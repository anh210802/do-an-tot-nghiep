const net = require('net');

// L∆∞u socket theo gateway_id
const gatewaySockets = {};

function startTcpServer(host, port, onData) {
    const server = net.createServer((socket) => {
        console.log('üíª New TCP connection established');
        
        socket.on('data', (data) => {
            try {
                const parsedData = JSON.parse(data.toString());
                console.log("üì° Received TCP data:", parsedData);

                // N·∫øu l√† y√™u c·∫ßu g√°n ID t·ª´ thi·∫øt b·ªã
                if (parsedData.request === "ping" && parsedData.gateway_id) {
                    const gatewayId = parsedData.gateway_id;
                    gatewaySockets[gatewayId] = socket; // L∆∞u socket theo gateway_id
                    console.log(`üóÇÔ∏è Stored socket for gateway ${gatewayId}`);
                }

                onData(parsedData); // G·ªçi callback ƒë·ªÉ x·ª≠ l√Ω ti·∫øp
            } catch (e) {
                console.log("‚ùå Error parsing TCP data:", e);
            }
        });

        socket.on('end', () => {
            console.log('üíª TCP connection closed');
        });

        socket.on('error', (err) => {
            console.error('‚ùå Socket error:', err.message);
        });
    });

    server.listen(port, host, () => {
        console.log(`üì° TCP Server listening on ${host}:${port}`);
    });
}

// G·ª≠i l·∫°i device ID v·ªÅ thi·∫øt b·ªã (qua TCP)
function sendDeviceId(gatewayId, deviceId, CowId) {
    const socket = gatewaySockets[gatewayId];
    if (socket) {
        const response = JSON.stringify({ response: "device_id", device_id: deviceId, cow_id: CowId });
        socket.write(response);
        console.log(`‚úÖ Sent device ID ${deviceId} to ${gatewayId}`);
    } else {
        console.warn(`‚ö†Ô∏è No socket found for gateway ${gatewayId}`);
    }
}

function findDeviceOn(gatewayId, deviceId, find_state) {
    const socket = gatewaySockets[gatewayId];
    if (socket) {
        const response = JSON.stringify({ response: "find_device", device_id: deviceId, find_state: find_state });
        socket.write(response);
        console.log(`‚úÖ Sent find_device to gateway ${gatewayId}`);
    } else {
        console.warn(`‚ö†Ô∏è No socket found for gateway ${gatewayId}`);
    }
}

module.exports = { startTcpServer, sendDeviceId, findDeviceOn };
