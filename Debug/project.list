
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca60  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800cba0  0800cba0  0000dba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0fc  0800d0fc  0000f34c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0fc  0800d0fc  0000e0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d104  0800d104  0000f34c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d104  0800d104  0000e104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d108  0800d108  0000e108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  0800d10c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e2c  20000350  0800d458  0000f350  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000117c  0800d458  0001017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f34c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b51  00000000  00000000  0000f375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003543  00000000  00000000  00023ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00027410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e20  00000000  00000000  00028648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f08  00000000  00000000  00029468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018141  00000000  00000000  00041370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a557  00000000  00000000  000594b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3a08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006158  00000000  00000000  000e3a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000e9ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000350 	.word	0x20000350
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cb88 	.word	0x0800cb88

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000354 	.word	0x20000354
 800017c:	0800cb88 	.word	0x0800cb88

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b99e 	b.w	80014e0 <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f83c 	bl	8001228 <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__aeabi_d2lz>:
 80011bc:	b538      	push	{r3, r4, r5, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	2300      	movs	r3, #0
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	f7ff fc11 	bl	80009ec <__aeabi_dcmplt>
 80011ca:	b928      	cbnz	r0, 80011d8 <__aeabi_d2lz+0x1c>
 80011cc:	4620      	mov	r0, r4
 80011ce:	4629      	mov	r1, r5
 80011d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011d4:	f000 b80a 	b.w	80011ec <__aeabi_d2ulz>
 80011d8:	4620      	mov	r0, r4
 80011da:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011de:	f000 f805 	bl	80011ec <__aeabi_d2ulz>
 80011e2:	4240      	negs	r0, r0
 80011e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e8:	bd38      	pop	{r3, r4, r5, pc}
 80011ea:	bf00      	nop

080011ec <__aeabi_d2ulz>:
 80011ec:	b5d0      	push	{r4, r6, r7, lr}
 80011ee:	2200      	movs	r2, #0
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <__aeabi_d2ulz+0x34>)
 80011f2:	4606      	mov	r6, r0
 80011f4:	460f      	mov	r7, r1
 80011f6:	f7ff f987 	bl	8000508 <__aeabi_dmul>
 80011fa:	f7ff fc5d 	bl	8000ab8 <__aeabi_d2uiz>
 80011fe:	4604      	mov	r4, r0
 8001200:	f7ff f908 	bl	8000414 <__aeabi_ui2d>
 8001204:	2200      	movs	r2, #0
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <__aeabi_d2ulz+0x38>)
 8001208:	f7ff f97e 	bl	8000508 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4630      	mov	r0, r6
 8001212:	4639      	mov	r1, r7
 8001214:	f7fe ffc0 	bl	8000198 <__aeabi_dsub>
 8001218:	f7ff fc4e 	bl	8000ab8 <__aeabi_d2uiz>
 800121c:	4621      	mov	r1, r4
 800121e:	bdd0      	pop	{r4, r6, r7, pc}
 8001220:	3df00000 	.word	0x3df00000
 8001224:	41f00000 	.word	0x41f00000

08001228 <__udivmoddi4>:
 8001228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800122c:	9d08      	ldr	r5, [sp, #32]
 800122e:	460c      	mov	r4, r1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d14e      	bne.n	80012d2 <__udivmoddi4+0xaa>
 8001234:	4694      	mov	ip, r2
 8001236:	458c      	cmp	ip, r1
 8001238:	4686      	mov	lr, r0
 800123a:	fab2 f282 	clz	r2, r2
 800123e:	d962      	bls.n	8001306 <__udivmoddi4+0xde>
 8001240:	b14a      	cbz	r2, 8001256 <__udivmoddi4+0x2e>
 8001242:	f1c2 0320 	rsb	r3, r2, #32
 8001246:	4091      	lsls	r1, r2
 8001248:	fa20 f303 	lsr.w	r3, r0, r3
 800124c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001250:	4319      	orrs	r1, r3
 8001252:	fa00 fe02 	lsl.w	lr, r0, r2
 8001256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800125a:	fbb1 f4f7 	udiv	r4, r1, r7
 800125e:	fb07 1114 	mls	r1, r7, r4, r1
 8001262:	fa1f f68c 	uxth.w	r6, ip
 8001266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800126a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800126e:	fb04 f106 	mul.w	r1, r4, r6
 8001272:	4299      	cmp	r1, r3
 8001274:	d90a      	bls.n	800128c <__udivmoddi4+0x64>
 8001276:	eb1c 0303 	adds.w	r3, ip, r3
 800127a:	f104 30ff 	add.w	r0, r4, #4294967295
 800127e:	f080 8110 	bcs.w	80014a2 <__udivmoddi4+0x27a>
 8001282:	4299      	cmp	r1, r3
 8001284:	f240 810d 	bls.w	80014a2 <__udivmoddi4+0x27a>
 8001288:	3c02      	subs	r4, #2
 800128a:	4463      	add	r3, ip
 800128c:	1a59      	subs	r1, r3, r1
 800128e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001292:	fb07 1110 	mls	r1, r7, r0, r1
 8001296:	fb00 f606 	mul.w	r6, r0, r6
 800129a:	fa1f f38e 	uxth.w	r3, lr
 800129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012a2:	429e      	cmp	r6, r3
 80012a4:	d90a      	bls.n	80012bc <__udivmoddi4+0x94>
 80012a6:	eb1c 0303 	adds.w	r3, ip, r3
 80012aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80012ae:	f080 80fa 	bcs.w	80014a6 <__udivmoddi4+0x27e>
 80012b2:	429e      	cmp	r6, r3
 80012b4:	f240 80f7 	bls.w	80014a6 <__udivmoddi4+0x27e>
 80012b8:	4463      	add	r3, ip
 80012ba:	3802      	subs	r0, #2
 80012bc:	2100      	movs	r1, #0
 80012be:	1b9b      	subs	r3, r3, r6
 80012c0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80012c4:	b11d      	cbz	r5, 80012ce <__udivmoddi4+0xa6>
 80012c6:	40d3      	lsrs	r3, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	e9c5 3200 	strd	r3, r2, [r5]
 80012ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d2:	428b      	cmp	r3, r1
 80012d4:	d905      	bls.n	80012e2 <__udivmoddi4+0xba>
 80012d6:	b10d      	cbz	r5, 80012dc <__udivmoddi4+0xb4>
 80012d8:	e9c5 0100 	strd	r0, r1, [r5]
 80012dc:	2100      	movs	r1, #0
 80012de:	4608      	mov	r0, r1
 80012e0:	e7f5      	b.n	80012ce <__udivmoddi4+0xa6>
 80012e2:	fab3 f183 	clz	r1, r3
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d146      	bne.n	8001378 <__udivmoddi4+0x150>
 80012ea:	42a3      	cmp	r3, r4
 80012ec:	d302      	bcc.n	80012f4 <__udivmoddi4+0xcc>
 80012ee:	4290      	cmp	r0, r2
 80012f0:	f0c0 80ee 	bcc.w	80014d0 <__udivmoddi4+0x2a8>
 80012f4:	1a86      	subs	r6, r0, r2
 80012f6:	eb64 0303 	sbc.w	r3, r4, r3
 80012fa:	2001      	movs	r0, #1
 80012fc:	2d00      	cmp	r5, #0
 80012fe:	d0e6      	beq.n	80012ce <__udivmoddi4+0xa6>
 8001300:	e9c5 6300 	strd	r6, r3, [r5]
 8001304:	e7e3      	b.n	80012ce <__udivmoddi4+0xa6>
 8001306:	2a00      	cmp	r2, #0
 8001308:	f040 808f 	bne.w	800142a <__udivmoddi4+0x202>
 800130c:	eba1 040c 	sub.w	r4, r1, ip
 8001310:	2101      	movs	r1, #1
 8001312:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001316:	fa1f f78c 	uxth.w	r7, ip
 800131a:	fbb4 f6f8 	udiv	r6, r4, r8
 800131e:	fb08 4416 	mls	r4, r8, r6, r4
 8001322:	fb07 f006 	mul.w	r0, r7, r6
 8001326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800132a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800132e:	4298      	cmp	r0, r3
 8001330:	d908      	bls.n	8001344 <__udivmoddi4+0x11c>
 8001332:	eb1c 0303 	adds.w	r3, ip, r3
 8001336:	f106 34ff 	add.w	r4, r6, #4294967295
 800133a:	d202      	bcs.n	8001342 <__udivmoddi4+0x11a>
 800133c:	4298      	cmp	r0, r3
 800133e:	f200 80cb 	bhi.w	80014d8 <__udivmoddi4+0x2b0>
 8001342:	4626      	mov	r6, r4
 8001344:	1a1c      	subs	r4, r3, r0
 8001346:	fbb4 f0f8 	udiv	r0, r4, r8
 800134a:	fb08 4410 	mls	r4, r8, r0, r4
 800134e:	fb00 f707 	mul.w	r7, r0, r7
 8001352:	fa1f f38e 	uxth.w	r3, lr
 8001356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800135a:	429f      	cmp	r7, r3
 800135c:	d908      	bls.n	8001370 <__udivmoddi4+0x148>
 800135e:	eb1c 0303 	adds.w	r3, ip, r3
 8001362:	f100 34ff 	add.w	r4, r0, #4294967295
 8001366:	d202      	bcs.n	800136e <__udivmoddi4+0x146>
 8001368:	429f      	cmp	r7, r3
 800136a:	f200 80ae 	bhi.w	80014ca <__udivmoddi4+0x2a2>
 800136e:	4620      	mov	r0, r4
 8001370:	1bdb      	subs	r3, r3, r7
 8001372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001376:	e7a5      	b.n	80012c4 <__udivmoddi4+0x9c>
 8001378:	f1c1 0720 	rsb	r7, r1, #32
 800137c:	408b      	lsls	r3, r1
 800137e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001382:	ea4c 0c03 	orr.w	ip, ip, r3
 8001386:	fa24 f607 	lsr.w	r6, r4, r7
 800138a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800138e:	fbb6 f8f9 	udiv	r8, r6, r9
 8001392:	fa1f fe8c 	uxth.w	lr, ip
 8001396:	fb09 6618 	mls	r6, r9, r8, r6
 800139a:	fa20 f307 	lsr.w	r3, r0, r7
 800139e:	408c      	lsls	r4, r1
 80013a0:	fa00 fa01 	lsl.w	sl, r0, r1
 80013a4:	fb08 f00e 	mul.w	r0, r8, lr
 80013a8:	431c      	orrs	r4, r3
 80013aa:	0c23      	lsrs	r3, r4, #16
 80013ac:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80013b0:	4298      	cmp	r0, r3
 80013b2:	fa02 f201 	lsl.w	r2, r2, r1
 80013b6:	d90a      	bls.n	80013ce <__udivmoddi4+0x1a6>
 80013b8:	eb1c 0303 	adds.w	r3, ip, r3
 80013bc:	f108 36ff 	add.w	r6, r8, #4294967295
 80013c0:	f080 8081 	bcs.w	80014c6 <__udivmoddi4+0x29e>
 80013c4:	4298      	cmp	r0, r3
 80013c6:	d97e      	bls.n	80014c6 <__udivmoddi4+0x29e>
 80013c8:	f1a8 0802 	sub.w	r8, r8, #2
 80013cc:	4463      	add	r3, ip
 80013ce:	1a1e      	subs	r6, r3, r0
 80013d0:	fbb6 f3f9 	udiv	r3, r6, r9
 80013d4:	fb09 6613 	mls	r6, r9, r3, r6
 80013d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80013dc:	b2a4      	uxth	r4, r4
 80013de:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80013e2:	45a6      	cmp	lr, r4
 80013e4:	d908      	bls.n	80013f8 <__udivmoddi4+0x1d0>
 80013e6:	eb1c 0404 	adds.w	r4, ip, r4
 80013ea:	f103 30ff 	add.w	r0, r3, #4294967295
 80013ee:	d266      	bcs.n	80014be <__udivmoddi4+0x296>
 80013f0:	45a6      	cmp	lr, r4
 80013f2:	d964      	bls.n	80014be <__udivmoddi4+0x296>
 80013f4:	3b02      	subs	r3, #2
 80013f6:	4464      	add	r4, ip
 80013f8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013fc:	fba0 8302 	umull	r8, r3, r0, r2
 8001400:	eba4 040e 	sub.w	r4, r4, lr
 8001404:	429c      	cmp	r4, r3
 8001406:	46c6      	mov	lr, r8
 8001408:	461e      	mov	r6, r3
 800140a:	d350      	bcc.n	80014ae <__udivmoddi4+0x286>
 800140c:	d04d      	beq.n	80014aa <__udivmoddi4+0x282>
 800140e:	b155      	cbz	r5, 8001426 <__udivmoddi4+0x1fe>
 8001410:	ebba 030e 	subs.w	r3, sl, lr
 8001414:	eb64 0406 	sbc.w	r4, r4, r6
 8001418:	fa04 f707 	lsl.w	r7, r4, r7
 800141c:	40cb      	lsrs	r3, r1
 800141e:	431f      	orrs	r7, r3
 8001420:	40cc      	lsrs	r4, r1
 8001422:	e9c5 7400 	strd	r7, r4, [r5]
 8001426:	2100      	movs	r1, #0
 8001428:	e751      	b.n	80012ce <__udivmoddi4+0xa6>
 800142a:	fa0c fc02 	lsl.w	ip, ip, r2
 800142e:	f1c2 0320 	rsb	r3, r2, #32
 8001432:	40d9      	lsrs	r1, r3
 8001434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001438:	fa20 f303 	lsr.w	r3, r0, r3
 800143c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001440:	fbb1 f0f8 	udiv	r0, r1, r8
 8001444:	fb08 1110 	mls	r1, r8, r0, r1
 8001448:	4094      	lsls	r4, r2
 800144a:	431c      	orrs	r4, r3
 800144c:	fa1f f78c 	uxth.w	r7, ip
 8001450:	0c23      	lsrs	r3, r4, #16
 8001452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001456:	fb00 f107 	mul.w	r1, r0, r7
 800145a:	4299      	cmp	r1, r3
 800145c:	d908      	bls.n	8001470 <__udivmoddi4+0x248>
 800145e:	eb1c 0303 	adds.w	r3, ip, r3
 8001462:	f100 36ff 	add.w	r6, r0, #4294967295
 8001466:	d22c      	bcs.n	80014c2 <__udivmoddi4+0x29a>
 8001468:	4299      	cmp	r1, r3
 800146a:	d92a      	bls.n	80014c2 <__udivmoddi4+0x29a>
 800146c:	3802      	subs	r0, #2
 800146e:	4463      	add	r3, ip
 8001470:	1a5b      	subs	r3, r3, r1
 8001472:	fbb3 f1f8 	udiv	r1, r3, r8
 8001476:	fb08 3311 	mls	r3, r8, r1, r3
 800147a:	b2a4      	uxth	r4, r4
 800147c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001480:	fb01 f307 	mul.w	r3, r1, r7
 8001484:	42a3      	cmp	r3, r4
 8001486:	d908      	bls.n	800149a <__udivmoddi4+0x272>
 8001488:	eb1c 0404 	adds.w	r4, ip, r4
 800148c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001490:	d213      	bcs.n	80014ba <__udivmoddi4+0x292>
 8001492:	42a3      	cmp	r3, r4
 8001494:	d911      	bls.n	80014ba <__udivmoddi4+0x292>
 8001496:	3902      	subs	r1, #2
 8001498:	4464      	add	r4, ip
 800149a:	1ae4      	subs	r4, r4, r3
 800149c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80014a0:	e73b      	b.n	800131a <__udivmoddi4+0xf2>
 80014a2:	4604      	mov	r4, r0
 80014a4:	e6f2      	b.n	800128c <__udivmoddi4+0x64>
 80014a6:	4608      	mov	r0, r1
 80014a8:	e708      	b.n	80012bc <__udivmoddi4+0x94>
 80014aa:	45c2      	cmp	sl, r8
 80014ac:	d2af      	bcs.n	800140e <__udivmoddi4+0x1e6>
 80014ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80014b2:	eb63 060c 	sbc.w	r6, r3, ip
 80014b6:	3801      	subs	r0, #1
 80014b8:	e7a9      	b.n	800140e <__udivmoddi4+0x1e6>
 80014ba:	4631      	mov	r1, r6
 80014bc:	e7ed      	b.n	800149a <__udivmoddi4+0x272>
 80014be:	4603      	mov	r3, r0
 80014c0:	e79a      	b.n	80013f8 <__udivmoddi4+0x1d0>
 80014c2:	4630      	mov	r0, r6
 80014c4:	e7d4      	b.n	8001470 <__udivmoddi4+0x248>
 80014c6:	46b0      	mov	r8, r6
 80014c8:	e781      	b.n	80013ce <__udivmoddi4+0x1a6>
 80014ca:	4463      	add	r3, ip
 80014cc:	3802      	subs	r0, #2
 80014ce:	e74f      	b.n	8001370 <__udivmoddi4+0x148>
 80014d0:	4606      	mov	r6, r0
 80014d2:	4623      	mov	r3, r4
 80014d4:	4608      	mov	r0, r1
 80014d6:	e711      	b.n	80012fc <__udivmoddi4+0xd4>
 80014d8:	3e02      	subs	r6, #2
 80014da:	4463      	add	r3, ip
 80014dc:	e732      	b.n	8001344 <__udivmoddi4+0x11c>
 80014de:	bf00      	nop

080014e0 <__aeabi_idiv0>:
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <setToggle>:
int counter = 0;
uint8_t set_buzzer_on[] = "!ID:000000:SET_BUZZER_ON#";
uint8_t set_buzzer_off[] = "!ID:000000:SET_BUZZER_OFF#";
uint8_t set_buzzer_error[] = "!ID:000000:SET_BUZZER_ERROR#";

void setToggle() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    counter++;
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <setToggle+0x18>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a03      	ldr	r2, [pc, #12]	@ (80014fc <setToggle+0x18>)
 80014f0:	6013      	str	r3, [r2, #0]
    toggleBuzzer();
 80014f2:	f000 fb11 	bl	8001b18 <toggleBuzzer>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000036c 	.word	0x2000036c

08001500 <setDeviceID>:

void setDeviceID() {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
    // Copy ID vào các mảng dữ liệu một cách an toàn
    for (int i = 0; i < ID_SIZE && i + 4 < sizeof(set_buzzer_on) - 1; i++) {
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e01a      	b.n	8001542 <setDeviceID+0x42>
        set_buzzer_on[i + 4] = id_device[i];
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3304      	adds	r3, #4
 8001510:	4912      	ldr	r1, [pc, #72]	@ (800155c <setDeviceID+0x5c>)
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	440a      	add	r2, r1
 8001516:	7811      	ldrb	r1, [r2, #0]
 8001518:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <setDeviceID+0x60>)
 800151a:	54d1      	strb	r1, [r2, r3]
        set_buzzer_off[i + 4] = id_device[i];
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	490e      	ldr	r1, [pc, #56]	@ (800155c <setDeviceID+0x5c>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	440a      	add	r2, r1
 8001526:	7811      	ldrb	r1, [r2, #0]
 8001528:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <setDeviceID+0x64>)
 800152a:	54d1      	strb	r1, [r2, r3]
        set_buzzer_error[i + 4] = id_device[i];
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3304      	adds	r3, #4
 8001530:	490a      	ldr	r1, [pc, #40]	@ (800155c <setDeviceID+0x5c>)
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	440a      	add	r2, r1
 8001536:	7811      	ldrb	r1, [r2, #0]
 8001538:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <setDeviceID+0x68>)
 800153a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < ID_SIZE && i + 4 < sizeof(set_buzzer_on) - 1; i++) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3301      	adds	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b05      	cmp	r3, #5
 8001546:	dc03      	bgt.n	8001550 <setDeviceID+0x50>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	2b18      	cmp	r3, #24
 800154e:	d9dd      	bls.n	800150c <setDeviceID+0xc>
    }
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000005c 	.word	0x2000005c
 8001560:	20000000 	.word	0x20000000
 8001564:	2000001c 	.word	0x2000001c
 8001568:	20000038 	.word	0x20000038

0800156c <sendOn>:

void sendOn(UART_HandleTypeDef *huart) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_IT(huart, set_buzzer_on, strlen((char *)set_buzzer_on));
 8001574:	4806      	ldr	r0, [pc, #24]	@ (8001590 <sendOn+0x24>)
 8001576:	f7fe fe03 	bl	8000180 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	4903      	ldr	r1, [pc, #12]	@ (8001590 <sendOn+0x24>)
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 fbd6 	bl	8007d34 <HAL_UART_Transmit_IT>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000000 	.word	0x20000000

08001594 <sendOff>:

void sendOff(UART_HandleTypeDef *huart) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_IT(huart, set_buzzer_off, strlen((char *)set_buzzer_off));
 800159c:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <sendOff+0x24>)
 800159e:	f7fe fdef 	bl	8000180 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	4903      	ldr	r1, [pc, #12]	@ (80015b8 <sendOff+0x24>)
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f006 fbc2 	bl	8007d34 <HAL_UART_Transmit_IT>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000001c 	.word	0x2000001c

080015bc <fsm_control_buzzer>:

void sendError(UART_HandleTypeDef *huart) {
    HAL_UART_Transmit_IT(huart, set_buzzer_error, strlen((char *)set_buzzer_error));
}

void fsm_control_buzzer(UART_HandleTypeDef *huart) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    switch (control_buzzer_state) {
 80015c4:	4b31      	ldr	r3, [pc, #196]	@ (800168c <fsm_control_buzzer+0xd0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d041      	beq.n	8001650 <fsm_control_buzzer+0x94>
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	dc54      	bgt.n	800167a <fsm_control_buzzer+0xbe>
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d002      	beq.n	80015da <fsm_control_buzzer+0x1e>
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d01f      	beq.n	8001618 <fsm_control_buzzer+0x5c>
        }
        break;

    default:
//        sendError(huart);
        break;
 80015d8:	e04f      	b.n	800167a <fsm_control_buzzer+0xbe>
        setDeviceID();
 80015da:	f7ff ff91 	bl	8001500 <setDeviceID>
        if (buzzer_flag) {
 80015de:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <fsm_control_buzzer+0xd4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00d      	beq.n	8001604 <fsm_control_buzzer+0x48>
            sendOn(huart);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffbf 	bl	800156c <sendOn>
            SCH_Add_Task(setToggle, 1, DELAY_BUZZER);
 80015ee:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80015f2:	461a      	mov	r2, r3
 80015f4:	2101      	movs	r1, #1
 80015f6:	4827      	ldr	r0, [pc, #156]	@ (8001694 <fsm_control_buzzer+0xd8>)
 80015f8:	f001 f900 	bl	80027fc <SCH_Add_Task>
            control_buzzer_state = CONTROL_BUZZER_ON;
 80015fc:	4b23      	ldr	r3, [pc, #140]	@ (800168c <fsm_control_buzzer+0xd0>)
 80015fe:	2202      	movs	r2, #2
 8001600:	701a      	strb	r2, [r3, #0]
        break;
 8001602:	e03f      	b.n	8001684 <fsm_control_buzzer+0xc8>
            counter = 0;
 8001604:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <fsm_control_buzzer+0xdc>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
            sendOff(huart);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffc2 	bl	8001594 <sendOff>
            control_buzzer_state = CONTROL_BUZZER_OFF;
 8001610:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <fsm_control_buzzer+0xd0>)
 8001612:	2203      	movs	r2, #3
 8001614:	701a      	strb	r2, [r3, #0]
        break;
 8001616:	e035      	b.n	8001684 <fsm_control_buzzer+0xc8>
        if (counter >= 100 || !buzzer_flag) {
 8001618:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <fsm_control_buzzer+0xdc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b63      	cmp	r3, #99	@ 0x63
 800161e:	dc07      	bgt.n	8001630 <fsm_control_buzzer+0x74>
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <fsm_control_buzzer+0xd4>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f083 0301 	eor.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d026      	beq.n	800167e <fsm_control_buzzer+0xc2>
            SCH_Delete_Task(setToggle);
 8001630:	4818      	ldr	r0, [pc, #96]	@ (8001694 <fsm_control_buzzer+0xd8>)
 8001632:	f001 f9db 	bl	80029ec <SCH_Delete_Task>
            buzzer_flag = false;
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <fsm_control_buzzer+0xd4>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
            counter = 0;
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <fsm_control_buzzer+0xdc>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
            sendOff(huart);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa6 	bl	8001594 <sendOff>
            control_buzzer_state = CONTROL_BUZZER_OFF;
 8001648:	4b10      	ldr	r3, [pc, #64]	@ (800168c <fsm_control_buzzer+0xd0>)
 800164a:	2203      	movs	r2, #3
 800164c:	701a      	strb	r2, [r3, #0]
        break;
 800164e:	e016      	b.n	800167e <fsm_control_buzzer+0xc2>
    	offBuzzer();
 8001650:	f000 fa56 	bl	8001b00 <offBuzzer>
        if (buzzer_flag) {
 8001654:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <fsm_control_buzzer+0xd4>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d011      	beq.n	8001682 <fsm_control_buzzer+0xc6>
            sendOn(huart);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff84 	bl	800156c <sendOn>
            SCH_Add_Task(setToggle, 1, DELAY_BUZZER);
 8001664:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001668:	461a      	mov	r2, r3
 800166a:	2101      	movs	r1, #1
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <fsm_control_buzzer+0xd8>)
 800166e:	f001 f8c5 	bl	80027fc <SCH_Add_Task>
            control_buzzer_state = CONTROL_BUZZER_ON;
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <fsm_control_buzzer+0xd0>)
 8001674:	2202      	movs	r2, #2
 8001676:	701a      	strb	r2, [r3, #0]
        break;
 8001678:	e003      	b.n	8001682 <fsm_control_buzzer+0xc6>
        break;
 800167a:	bf00      	nop
 800167c:	e002      	b.n	8001684 <fsm_control_buzzer+0xc8>
        break;
 800167e:	bf00      	nop
 8001680:	e000      	b.n	8001684 <fsm_control_buzzer+0xc8>
        break;
 8001682:	bf00      	nop
    }
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200003cb 	.word	0x200003cb
 8001690:	200004d3 	.word	0x200004d3
 8001694:	080014e5 	.word	0x080014e5
 8001698:	2000036c 	.word	0x2000036c

0800169c <check_id_request>:
 *      Author: anhxa
 */

#include "fsm_find_device.h"

int check_id_request(uint8_t* buffer, uint8_t * id) {
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	if (buffer[1] == 'I' && buffer[2] == 'D') {
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3301      	adds	r3, #1
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b49      	cmp	r3, #73	@ 0x49
 80016ae:	d11a      	bne.n	80016e6 <check_id_request+0x4a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3302      	adds	r3, #2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b44      	cmp	r3, #68	@ 0x44
 80016b8:	d115      	bne.n	80016e6 <check_id_request+0x4a>
		for (int i = 0; i < ID_SIZE; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e00f      	b.n	80016e0 <check_id_request+0x44>
			if (id[i] != buffer[i+4]) return 0;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3304      	adds	r3, #4
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	440b      	add	r3, r1
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <check_id_request+0x3e>
 80016d6:	2300      	movs	r3, #0
 80016d8:	e006      	b.n	80016e8 <check_id_request+0x4c>
		for (int i = 0; i < ID_SIZE; i++) {
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3301      	adds	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	ddec      	ble.n	80016c0 <check_id_request+0x24>
		}
	}
	return 1;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
	...

080016f4 <check_request>:

int check_request(uint8_t* buffer, uint8_t * id) {
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 4; i++) {
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e00f      	b.n	8001724 <check_request+0x30>
		if (action[i] != buffer[i+11]) return 0;
 8001704:	4a0c      	ldr	r2, [pc, #48]	@ (8001738 <check_request+0x44>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	330b      	adds	r3, #11
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	440b      	add	r3, r1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <check_request+0x2a>
 800171a:	2300      	movs	r3, #0
 800171c:	e006      	b.n	800172c <check_request+0x38>
	for(int i = 0; i < 4; i++) {
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3301      	adds	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b03      	cmp	r3, #3
 8001728:	ddec      	ble.n	8001704 <check_request+0x10>
	}
	return 1;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000164 	.word	0x20000164

0800173c <fsm_find_device>:

void fsm_find_device(UART_HandleTypeDef *huart) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	switch(find_device_state) {
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <fsm_find_device+0xa4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d028      	beq.n	800179e <fsm_find_device+0x62>
 800174c:	2b03      	cmp	r3, #3
 800174e:	dc40      	bgt.n	80017d2 <fsm_find_device+0x96>
 8001750:	2b01      	cmp	r3, #1
 8001752:	d002      	beq.n	800175a <fsm_find_device+0x1e>
 8001754:	2b02      	cmp	r3, #2
 8001756:	d00c      	beq.n	8001772 <fsm_find_device+0x36>
		} else {
			find_device_state = FIND_DEVICE_IDLE;
		}
		break;
	default:
		break;
 8001758:	e03b      	b.n	80017d2 <fsm_find_device+0x96>
		if (buffer_flag) {
 800175a:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <fsm_find_device+0xa8>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d038      	beq.n	80017d6 <fsm_find_device+0x9a>
			buffer_flag = false;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <fsm_find_device+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
			find_device_state = FIND_DEVICE_CHECK_REQUEST;
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <fsm_find_device+0xa4>)
 800176c:	2202      	movs	r2, #2
 800176e:	701a      	strb	r2, [r3, #0]
		break;
 8001770:	e031      	b.n	80017d6 <fsm_find_device+0x9a>
		if (check_id_request(buffer, id_device) == 1 && check_request(buffer, id_device) == 1) {
 8001772:	491d      	ldr	r1, [pc, #116]	@ (80017e8 <fsm_find_device+0xac>)
 8001774:	481d      	ldr	r0, [pc, #116]	@ (80017ec <fsm_find_device+0xb0>)
 8001776:	f7ff ff91 	bl	800169c <check_id_request>
 800177a:	4603      	mov	r3, r0
 800177c:	2b01      	cmp	r3, #1
 800177e:	d10a      	bne.n	8001796 <fsm_find_device+0x5a>
 8001780:	4919      	ldr	r1, [pc, #100]	@ (80017e8 <fsm_find_device+0xac>)
 8001782:	481a      	ldr	r0, [pc, #104]	@ (80017ec <fsm_find_device+0xb0>)
 8001784:	f7ff ffb6 	bl	80016f4 <check_request>
 8001788:	4603      	mov	r3, r0
 800178a:	2b01      	cmp	r3, #1
 800178c:	d103      	bne.n	8001796 <fsm_find_device+0x5a>
			find_device_state = FIND_DEVICE_UPDATE_BUZZER;
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <fsm_find_device+0xa4>)
 8001790:	2203      	movs	r2, #3
 8001792:	701a      	strb	r2, [r3, #0]
		break;
 8001794:	e020      	b.n	80017d8 <fsm_find_device+0x9c>
			find_device_state = FIND_DEVICE_IDLE;
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <fsm_find_device+0xa4>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
		break;
 800179c:	e01c      	b.n	80017d8 <fsm_find_device+0x9c>
		if (buffer[16] == '1') {
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <fsm_find_device+0xb0>)
 80017a0:	7c1b      	ldrb	r3, [r3, #16]
 80017a2:	2b31      	cmp	r3, #49	@ 0x31
 80017a4:	d106      	bne.n	80017b4 <fsm_find_device+0x78>
			buzzer_flag = true;
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <fsm_find_device+0xb4>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
			find_device_state = FIND_DEVICE_IDLE;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <fsm_find_device+0xa4>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
		break;
 80017b2:	e011      	b.n	80017d8 <fsm_find_device+0x9c>
		} else if (buffer[16] == '0') {
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <fsm_find_device+0xb0>)
 80017b6:	7c1b      	ldrb	r3, [r3, #16]
 80017b8:	2b30      	cmp	r3, #48	@ 0x30
 80017ba:	d106      	bne.n	80017ca <fsm_find_device+0x8e>
			buzzer_flag = false;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <fsm_find_device+0xb4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
			find_device_state = FIND_DEVICE_IDLE;
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <fsm_find_device+0xa4>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
		break;
 80017c8:	e006      	b.n	80017d8 <fsm_find_device+0x9c>
			find_device_state = FIND_DEVICE_IDLE;
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <fsm_find_device+0xa4>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
		break;
 80017d0:	e002      	b.n	80017d8 <fsm_find_device+0x9c>
		break;
 80017d2:	bf00      	nop
 80017d4:	e000      	b.n	80017d8 <fsm_find_device+0x9c>
		break;
 80017d6:	bf00      	nop
	}
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200003c9 	.word	0x200003c9
 80017e4:	200004d1 	.word	0x200004d1
 80017e8:	2000005c 	.word	0x2000005c
 80017ec:	200003d0 	.word	0x200003d0
 80017f0:	200004d3 	.word	0x200004d3

080017f4 <handleSensorData>:
#include "fsm_handle_data.h"

MPU6050_t MPU6050;


void handleSensorData(I2C_HandleTypeDef* hi2c) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	MPU6050_Read_Accel(hi2c, &MPU6050);
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <handleSensorData+0x3c>)
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 ff98 	bl	8002734 <MPU6050_Read_Accel>
	ax = MPU6050.Ax;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <handleSensorData+0x3c>)
 8001806:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800180a:	490a      	ldr	r1, [pc, #40]	@ (8001834 <handleSensorData+0x40>)
 800180c:	e9c1 2300 	strd	r2, r3, [r1]
	ay = MPU6050.Ay;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <handleSensorData+0x3c>)
 8001812:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001816:	4908      	ldr	r1, [pc, #32]	@ (8001838 <handleSensorData+0x44>)
 8001818:	e9c1 2300 	strd	r2, r3, [r1]
	az = MPU6050.Az;
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <handleSensorData+0x3c>)
 800181e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001822:	4906      	ldr	r1, [pc, #24]	@ (800183c <handleSensorData+0x48>)
 8001824:	e9c1 2300 	strd	r2, r3, [r1]
//	ax = MPU6050.Accel_X_RAW;
//	ay = MPU6050.Accel_Y_RAW;
//	az = MPU6050.Accel_Z_RAW;
//	SENSOR_flag = false;
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000370 	.word	0x20000370
 8001834:	200004d8 	.word	0x200004d8
 8001838:	200004e0 	.word	0x200004e0
 800183c:	200004e8 	.word	0x200004e8

08001840 <handleBatteryData>:

void handleBatteryData(ADC_HandleTypeDef* hadc) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	ADC_value = HAL_ADC_GetValue(hadc);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f001 fe25 	bl	8003498 <HAL_ADC_GetValue>
 800184e:	4603      	mov	r3, r0
 8001850:	4a02      	ldr	r2, [pc, #8]	@ (800185c <handleBatteryData+0x1c>)
 8001852:	6013      	str	r3, [r2, #0]
//    BATTERY_flag = false;
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000168 	.word	0x20000168

08001860 <send_data>:
 *      Author: anhxa
 */

#include "fsm_send_data.h"

void send_data(UART_HandleTypeDef *huart) {
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	f2ad 4d3c 	subw	sp, sp, #1084	@ 0x43c
 8001866:	af08      	add	r7, sp, #32
 8001868:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800186c:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001870:	6018      	str	r0, [r3, #0]
	char data[1024];
	char id_str[6] = "111111";
 8001872:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001876:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800187a:	4a20      	ldr	r2, [pc, #128]	@ (80018fc <send_data+0x9c>)
 800187c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001880:	6018      	str	r0, [r3, #0]
 8001882:	3304      	adds	r3, #4
 8001884:	8019      	strh	r1, [r3, #0]
	int adc_str;

	uint8_tToChar(id_str, id_device);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	491d      	ldr	r1, [pc, #116]	@ (8001900 <send_data+0xa0>)
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f965 	bl	8001b5c <uint8_tToChar>
	adc_str = (int)ADC_value;
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <send_data+0xa4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
	snprintf(data, sizeof(data),
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <send_data+0xa8>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	491a      	ldr	r1, [pc, #104]	@ (800190c <send_data+0xac>)
 80018a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018a6:	4c1a      	ldr	r4, [pc, #104]	@ (8001910 <send_data+0xb0>)
 80018a8:	cc30      	ldmia	r4, {r4, r5}
 80018aa:	f107 0e0c 	add.w	lr, r7, #12
 80018ae:	f107 0c14 	add.w	ip, r7, #20
 80018b2:	f8d7 6414 	ldr.w	r6, [r7, #1044]	@ 0x414
 80018b6:	9606      	str	r6, [sp, #24]
 80018b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80018bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018c0:	e9cd 2300 	strd	r2, r3, [sp]
 80018c4:	4673      	mov	r3, lr
 80018c6:	4a13      	ldr	r2, [pc, #76]	@ (8001914 <send_data+0xb4>)
 80018c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018cc:	4660      	mov	r0, ip
 80018ce:	f008 fb19 	bl	8009f04 <sniprintf>
			"!ID:%s:Accx:%.3f:Accy:%.3f:Accz:%.3f:POWER:%d#\r\n",
			id_str, ax, ay, az, adc_str);
	HAL_UART_Transmit_IT(huart, (uint8_t *)data, strlen(data));
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fc52 	bl	8000180 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	f107 0114 	add.w	r1, r7, #20
 80018e4:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80018e8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f006 fa21 	bl	8007d34 <HAL_UART_Transmit_IT>
}
 80018f2:	bf00      	nop
 80018f4:	f207 471c 	addw	r7, r7, #1052	@ 0x41c
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fc:	0800cbd4 	.word	0x0800cbd4
 8001900:	2000005c 	.word	0x2000005c
 8001904:	20000168 	.word	0x20000168
 8001908:	200004d8 	.word	0x200004d8
 800190c:	200004e0 	.word	0x200004e0
 8001910:	200004e8 	.word	0x200004e8
 8001914:	0800cba0 	.word	0x0800cba0

08001918 <handle_id>:
#include "fsm_start.h"

int timeout_connect = TIMEOUT_CONNECT;
bool update_id = false;

void handle_id(uint8_t* input, uint8_t* id) {
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
    if(input[3] == 'I' && input[4] == 'D') {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3303      	adds	r3, #3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b49      	cmp	r3, #73	@ 0x49
 800192a:	d126      	bne.n	800197a <handle_id+0x62>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b44      	cmp	r3, #68	@ 0x44
 8001934:	d121      	bne.n	800197a <handle_id+0x62>
        for(int i = 0; i < ID_SIZE; i++) {
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e019      	b.n	8001970 <handle_id+0x58>
            if (input[i+6] >= '0' && input[i+6] <= '9') {
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3306      	adds	r3, #6
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b2f      	cmp	r3, #47	@ 0x2f
 8001948:	d916      	bls.n	8001978 <handle_id+0x60>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3306      	adds	r3, #6
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b39      	cmp	r3, #57	@ 0x39
 8001956:	d80f      	bhi.n	8001978 <handle_id+0x60>
                id[i] = input[i+6];
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3306      	adds	r3, #6
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	441a      	add	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6839      	ldr	r1, [r7, #0]
 8001964:	440b      	add	r3, r1
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < ID_SIZE; i++) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3301      	adds	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b05      	cmp	r3, #5
 8001974:	dde2      	ble.n	800193c <handle_id+0x24>
 8001976:	e000      	b.n	800197a <handle_id+0x62>
            } else {
                return;
 8001978:	bf00      	nop
            }
        }
    }
}
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <init_buzzer_and_led>:

void init_buzzer_and_led() {
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
    onBuzzer();
 8001986:	f000 f8af 	bl	8001ae8 <onBuzzer>
    onLed();
 800198a:	f000 f8cf 	bl	8001b2c <onLed>
    HAL_Delay(200);
 800198e:	20c8      	movs	r0, #200	@ 0xc8
 8001990:	f001 fc1a 	bl	80031c8 <HAL_Delay>
    offLed();
 8001994:	f000 f8d6 	bl	8001b44 <offLed>
    offBuzzer();
 8001998:	f000 f8b2 	bl	8001b00 <offBuzzer>
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <fsm_start>:

void fsm_start(UART_HandleTypeDef* huart, uint8_t* buffer) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
    switch (start_state) {
 80019aa:	4b43      	ldr	r3, [pc, #268]	@ (8001ab8 <fsm_start+0x118>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d87b      	bhi.n	8001aaa <fsm_start+0x10a>
 80019b2:	a201      	add	r2, pc, #4	@ (adr r2, 80019b8 <fsm_start+0x18>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019df 	.word	0x080019df
 80019c0:	08001a1b 	.word	0x08001a1b
 80019c4:	08001a4f 	.word	0x08001a4f
 80019c8:	08001a67 	.word	0x08001a67
    case START_INIT:
    	handle_GPS_data_flag = false;
 80019cc:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <fsm_start+0x11c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
        init_buzzer_and_led();
 80019d2:	f7ff ffd6 	bl	8001982 <init_buzzer_and_led>
        start_state = START_CONNECTING;
 80019d6:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <fsm_start+0x118>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
        break;
 80019dc:	e068      	b.n	8001ab0 <fsm_start+0x110>

    case START_CONNECTING:
        HAL_UART_Transmit_IT(huart, hello_device, sizeof(hello_device));
 80019de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e2:	4937      	ldr	r1, [pc, #220]	@ (8001ac0 <fsm_start+0x120>)
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f006 f9a5 	bl	8007d34 <HAL_UART_Transmit_IT>
        if (!buffer_flag) {
 80019ea:	4b36      	ldr	r3, [pc, #216]	@ (8001ac4 <fsm_start+0x124>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f083 0301 	eor.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <fsm_start+0x6c>
            timeout_connect = TIMEOUT_CONNECT;
 80019fa:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <fsm_start+0x128>)
 8001a02:	601a      	str	r2, [r3, #0]
            start_state = START_WAIT;
 8001a04:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab8 <fsm_start+0x118>)
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
        } else {
            buffer_flag = false;
            start_state = START_UPDATE_ID;
        }
        break;
 8001a0a:	e051      	b.n	8001ab0 <fsm_start+0x110>
            buffer_flag = false;
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <fsm_start+0x124>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
            start_state = START_UPDATE_ID;
 8001a12:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <fsm_start+0x118>)
 8001a14:	2203      	movs	r2, #3
 8001a16:	701a      	strb	r2, [r3, #0]
        break;
 8001a18:	e04a      	b.n	8001ab0 <fsm_start+0x110>

    case START_WAIT:
        if (buffer_flag) {
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <fsm_start+0x124>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <fsm_start+0x92>
            buffer_flag = false;
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <fsm_start+0x124>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
            start_state = START_UPDATE_ID;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <fsm_start+0x118>)
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	701a      	strb	r2, [r3, #0]
        else if (timeout_connect <= 0) {
            start_state = START_CONNECTING;
        } else {
            timeout_connect--;
        }
        break;
 8001a30:	e03e      	b.n	8001ab0 <fsm_start+0x110>
        else if (timeout_connect <= 0) {
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <fsm_start+0x128>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	dc03      	bgt.n	8001a42 <fsm_start+0xa2>
            start_state = START_CONNECTING;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <fsm_start+0x118>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
        break;
 8001a40:	e036      	b.n	8001ab0 <fsm_start+0x110>
            timeout_connect--;
 8001a42:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <fsm_start+0x128>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac8 <fsm_start+0x128>)
 8001a4a:	6013      	str	r3, [r2, #0]
        break;
 8001a4c:	e030      	b.n	8001ab0 <fsm_start+0x110>

    case START_UPDATE_ID:
    	if (buffer[0] != '\0') {
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d02b      	beq.n	8001aae <fsm_start+0x10e>
    		handle_id(buffer, id_device);
 8001a56:	491d      	ldr	r1, [pc, #116]	@ (8001acc <fsm_start+0x12c>)
 8001a58:	6838      	ldr	r0, [r7, #0]
 8001a5a:	f7ff ff5d 	bl	8001918 <handle_id>
			if (sizeof(id_device) == 6) {
				start_state = START_IDLE;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <fsm_start+0x118>)
 8001a60:	2204      	movs	r2, #4
 8001a62:	701a      	strb	r2, [r3, #0]
			} else {
				start_state = START_CONNECTING;
			}
    	}
        break;
 8001a64:	e023      	b.n	8001aae <fsm_start+0x10e>

    case START_IDLE:
    	init_buzzer_and_led();
 8001a66:	f7ff ff8c 	bl	8001982 <init_buzzer_and_led>
    	HAL_Delay(200);
 8001a6a:	20c8      	movs	r0, #200	@ 0xc8
 8001a6c:	f001 fbac 	bl	80031c8 <HAL_Delay>
    	init_buzzer_and_led();
 8001a70:	f7ff ff87 	bl	8001982 <init_buzzer_and_led>

    	HAL_UART_Transmit_IT(huart, id_device, 6);
 8001a74:	2206      	movs	r2, #6
 8001a76:	4915      	ldr	r1, [pc, #84]	@ (8001acc <fsm_start+0x12c>)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f006 f95b 	bl	8007d34 <HAL_UART_Transmit_IT>
    	find_device_state = FIND_DEVICE_IDLE;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <fsm_start+0x130>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
    	handle_data_state = HANDLE_DATA_IDLE;
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <fsm_start+0x134>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
    	control_buzzer_state = CONTROL_BUZZER_IDLE;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <fsm_start+0x138>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
    	send_data_state = SEND_DATA_IDLE;
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <fsm_start+0x13c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
    	handle_data_flag = true;
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <fsm_start+0x140>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
    	start_idle_flag = true;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <fsm_start+0x144>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
    	handle_GPS_data_flag = true;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <fsm_start+0x11c>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]

        break;
 8001aa8:	e002      	b.n	8001ab0 <fsm_start+0x110>
    default:
        break;
 8001aaa:	bf00      	nop
 8001aac:	e000      	b.n	8001ab0 <fsm_start+0x110>
        break;
 8001aae:	bf00      	nop
    }
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200003c8 	.word	0x200003c8
 8001abc:	200004d6 	.word	0x200004d6
 8001ac0:	20000064 	.word	0x20000064
 8001ac4:	200004d1 	.word	0x200004d1
 8001ac8:	20000058 	.word	0x20000058
 8001acc:	2000005c 	.word	0x2000005c
 8001ad0:	200003c9 	.word	0x200003c9
 8001ad4:	200003ca 	.word	0x200003ca
 8001ad8:	200003cb 	.word	0x200003cb
 8001adc:	200003cc 	.word	0x200003cc
 8001ae0:	200004d7 	.word	0x200004d7
 8001ae4:	200004d2 	.word	0x200004d2

08001ae8 <onBuzzer>:
double az = 0;

uint32_t ADC_value = 123;


void onBuzzer(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2140      	movs	r1, #64	@ 0x40
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <onBuzzer+0x14>)
 8001af2:	f002 fa61 	bl	8003fb8 <HAL_GPIO_WritePin>
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020000 	.word	0x40020000

08001b00 <offBuzzer>:

void offBuzzer(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2140      	movs	r1, #64	@ 0x40
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <offBuzzer+0x14>)
 8001b0a:	f002 fa55 	bl	8003fb8 <HAL_GPIO_WritePin>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020000 	.word	0x40020000

08001b18 <toggleBuzzer>:

void toggleBuzzer(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001b1c:	2140      	movs	r1, #64	@ 0x40
 8001b1e:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <toggleBuzzer+0x10>)
 8001b20:	f002 fa62 	bl	8003fe8 <HAL_GPIO_TogglePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020000 	.word	0x40020000

08001b2c <onLed>:

void onLed(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2120      	movs	r1, #32
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <onLed+0x14>)
 8001b36:	f002 fa3f 	bl	8003fb8 <HAL_GPIO_WritePin>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40020000 	.word	0x40020000

08001b44 <offLed>:

void offLed(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <offLed+0x14>)
 8001b4e:	f002 fa33 	bl	8003fb8 <HAL_GPIO_WritePin>
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020000 	.word	0x40020000

08001b5c <uint8_tToChar>:

void toggleLed(void) {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

void uint8_tToChar(char* str, uint8_t* text) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 6; i++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	e00a      	b.n	8001b82 <uint8_tToChar+0x26>
		str[i] = (char)text[i];
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	441a      	add	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	440b      	add	r3, r1
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++) {
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	ddf1      	ble.n	8001b6c <uint8_tToChar+0x10>
	}
	str[6] = '\0';
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3306      	adds	r3, #6
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
	...

08001b9c <filterGNVTG>:
void sendTestMessage1() {
    char testMessage[] = "!aaaaaaaaaaaaa#\r\n";
    HAL_UART_Transmit(&huart1, (uint8_t*)testMessage, sizeof(testMessage), HAL_MAX_DELAY);
}

void filterGNVTG(const char* input) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    const char* gnvtgStart = strstr(input, "$GNVTG"); // Tìm câu $GPGGA
 8001ba4:	4911      	ldr	r1, [pc, #68]	@ (8001bec <filterGNVTG+0x50>)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f008 faac 	bl	800a104 <strstr>
 8001bac:	6178      	str	r0, [r7, #20]
    if (gnvtgStart != NULL) {
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d016      	beq.n	8001be2 <filterGNVTG+0x46>
        const char* gnvtgEnd = strstr(gnvtgStart, "\r\n"); // Tìm dấu kết thúc câu
 8001bb4:	490e      	ldr	r1, [pc, #56]	@ (8001bf0 <filterGNVTG+0x54>)
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f008 faa4 	bl	800a104 <strstr>
 8001bbc:	6138      	str	r0, [r7, #16]
        if (gnvtgEnd != NULL) {
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00e      	beq.n	8001be2 <filterGNVTG+0x46>
            size_t gnvtgLength = gnvtgEnd - gnvtgStart + 2; // �?ộ dài câu $GPGGA
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	3302      	adds	r3, #2
 8001bcc:	60fb      	str	r3, [r7, #12]
            strncpy(gnvtgBuffer, gnvtgStart, gnvtgLength); // Sao chép câu $GPGGA
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	6979      	ldr	r1, [r7, #20]
 8001bd2:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <filterGNVTG+0x58>)
 8001bd4:	f008 fa27 	bl	800a026 <strncpy>
            gnvtgBuffer[gnvtgLength] = '\0'; // Thêm ký tự kết thúc chuỗi
 8001bd8:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <filterGNVTG+0x58>)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0800cc04 	.word	0x0800cc04
 8001bf0:	0800cc0c 	.word	0x0800cc0c
 8001bf4:	20000a6c 	.word	0x20000a6c

08001bf8 <filterGPGGA>:


void filterGPGGA(const char* input) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    const char* gpggaStart = strstr(input, "$GNGGA"); // Tìm câu $GPGGA
 8001c00:	4911      	ldr	r1, [pc, #68]	@ (8001c48 <filterGPGGA+0x50>)
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f008 fa7e 	bl	800a104 <strstr>
 8001c08:	6178      	str	r0, [r7, #20]
    if (gpggaStart != NULL) {
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d016      	beq.n	8001c3e <filterGPGGA+0x46>
        const char* gpggaEnd = strstr(gpggaStart, "\r\n"); // Tìm dấu kết thúc câu
 8001c10:	490e      	ldr	r1, [pc, #56]	@ (8001c4c <filterGPGGA+0x54>)
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f008 fa76 	bl	800a104 <strstr>
 8001c18:	6138      	str	r0, [r7, #16]
        if (gpggaEnd != NULL) {
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00e      	beq.n	8001c3e <filterGPGGA+0x46>
            size_t gpggaLength = gpggaEnd - gpggaStart + 2; // �?ộ dài câu $GPGGA
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	3302      	adds	r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
            strncpy(gpggaBuffer, gpggaStart, gpggaLength); // Sao chép câu $GPGGA
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	6979      	ldr	r1, [r7, #20]
 8001c2e:	4808      	ldr	r0, [pc, #32]	@ (8001c50 <filterGPGGA+0x58>)
 8001c30:	f008 f9f9 	bl	800a026 <strncpy>
            gpggaBuffer[gpggaLength] = '\0'; // Thêm ký tự kết thúc chuỗi
 8001c34:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <filterGPGGA+0x58>)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	0800cc10 	.word	0x0800cc10
 8001c4c:	0800cc0c 	.word	0x0800cc0c
 8001c50:	2000086c 	.word	0x2000086c

08001c54 <parseVData>:

void parseVData(char* nmea){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	char* token;
	token = strstr(nmea, "$GNVTG");
 8001c5c:	4928      	ldr	r1, [pc, #160]	@ (8001d00 <parseVData+0xac>)
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f008 fa50 	bl	800a104 <strstr>
 8001c64:	60f8      	str	r0, [r7, #12]
	if (token != NULL){
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d044      	beq.n	8001cf6 <parseVData+0xa2>
		token = strtok(token, ","); // B�? qua "$GNVTG"
 8001c6c:	4925      	ldr	r1, [pc, #148]	@ (8001d04 <parseVData+0xb0>)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f008 f9ec 	bl	800a04c <strtok>
 8001c74:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL, ",");
 8001c76:	4923      	ldr	r1, [pc, #140]	@ (8001d04 <parseVData+0xb0>)
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f008 f9e7 	bl	800a04c <strtok>
 8001c7e:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL, ",");
 8001c80:	4920      	ldr	r1, [pc, #128]	@ (8001d04 <parseVData+0xb0>)
 8001c82:	2000      	movs	r0, #0
 8001c84:	f008 f9e2 	bl	800a04c <strtok>
 8001c88:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL, ",");
 8001c8a:	491e      	ldr	r1, [pc, #120]	@ (8001d04 <parseVData+0xb0>)
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f008 f9dd 	bl	800a04c <strtok>
 8001c92:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL, ",");
 8001c94:	491b      	ldr	r1, [pc, #108]	@ (8001d04 <parseVData+0xb0>)
 8001c96:	2000      	movs	r0, #0
 8001c98:	f008 f9d8 	bl	800a04c <strtok>
 8001c9c:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL, ",");
 8001c9e:	4919      	ldr	r1, [pc, #100]	@ (8001d04 <parseVData+0xb0>)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f008 f9d3 	bl	800a04c <strtok>
 8001ca6:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL, ",");
 8001ca8:	4916      	ldr	r1, [pc, #88]	@ (8001d04 <parseVData+0xb0>)
 8001caa:	2000      	movs	r0, #0
 8001cac:	f008 f9ce 	bl	800a04c <strtok>
 8001cb0:	60f8      	str	r0, [r7, #12]

		if (token != NULL){
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01e      	beq.n	8001cf6 <parseVData+0xa2>
			float speed = atof(token);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f006 fdfd 	bl	80088b8 <atof>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe ff17 	bl	8000af8 <__aeabi_d2f>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60bb      	str	r3, [r7, #8]
			if (speed == 0) {
 8001cce:	f04f 0100 	mov.w	r1, #0
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	f7ff fa02 	bl	80010dc <__aeabi_fcmpeq>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <parseVData+0x92>
				velocity = -1;
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <parseVData+0xb4>)
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <parseVData+0xb8>)
 8001ce2:	601a      	str	r2, [r3, #0]
			}
		}
	}


}
 8001ce4:	e007      	b.n	8001cf6 <parseVData+0xa2>
			velocity = speed / 3.6f;
 8001ce6:	490a      	ldr	r1, [pc, #40]	@ (8001d10 <parseVData+0xbc>)
 8001ce8:	68b8      	ldr	r0, [r7, #8]
 8001cea:	f7ff f917 	bl	8000f1c <__aeabi_fdiv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <parseVData+0xb4>)
 8001cf4:	601a      	str	r2, [r3, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	0800cc04 	.word	0x0800cc04
 8001d04:	0800cc18 	.word	0x0800cc18
 8001d08:	2000016c 	.word	0x2000016c
 8001d0c:	bf800000 	.word	0xbf800000
 8001d10:	40666666 	.word	0x40666666

08001d14 <parseGPSData>:
void parseGPSData(char* nmea) {
 8001d14:	b5b0      	push	{r4, r5, r7, lr}
 8001d16:	b08a      	sub	sp, #40	@ 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    char* token;

    // Tìm chuỗi $GPGGA
    token = strstr(nmea, "$GNGGA");
 8001d1c:	4965      	ldr	r1, [pc, #404]	@ (8001eb4 <parseGPSData+0x1a0>)
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f008 f9f0 	bl	800a104 <strstr>
 8001d24:	6278      	str	r0, [r7, #36]	@ 0x24
//    token =  nmea;
    if (token != NULL) {
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80be 	beq.w	8001eaa <parseGPSData+0x196>
        token = strtok(token, ","); // B�? qua "$GPGGA"
 8001d2e:	4962      	ldr	r1, [pc, #392]	@ (8001eb8 <parseGPSData+0x1a4>)
 8001d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d32:	f008 f98b 	bl	800a04c <strtok>
 8001d36:	6278      	str	r0, [r7, #36]	@ 0x24
        token = strtok(NULL, ","); // B�? qua th�?i gian
 8001d38:	495f      	ldr	r1, [pc, #380]	@ (8001eb8 <parseGPSData+0x1a4>)
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f008 f986 	bl	800a04c <strtok>
 8001d40:	6278      	str	r0, [r7, #36]	@ 0x24
        token = strtok(NULL, ","); // Lấy giá trị vĩ độ (latitude)
 8001d42:	495d      	ldr	r1, [pc, #372]	@ (8001eb8 <parseGPSData+0x1a4>)
 8001d44:	2000      	movs	r0, #0
 8001d46:	f008 f981 	bl	800a04c <strtok>
 8001d4a:	6278      	str	r0, [r7, #36]	@ 0x24

        if (token != NULL) {
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d051      	beq.n	8001df6 <parseGPSData+0xe2>
            float rawLatitude = atof(token); // Lấy giá trị DDMM.MMMM
 8001d52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d54:	f006 fdb0 	bl	80088b8 <atof>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe feca 	bl	8000af8 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	623b      	str	r3, [r7, #32]
            float degrees = (int)(rawLatitude / 100); // Lấy phần độ
 8001d68:	4954      	ldr	r1, [pc, #336]	@ (8001ebc <parseGPSData+0x1a8>)
 8001d6a:	6a38      	ldr	r0, [r7, #32]
 8001d6c:	f7ff f8d6 	bl	8000f1c <__aeabi_fdiv>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f9e4 	bl	8001140 <__aeabi_f2iz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe ffc6 	bl	8000d0c <__aeabi_i2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	61fb      	str	r3, [r7, #28]
            float minutes = rawLatitude - (degrees * 100); // Lấy phần phút
 8001d84:	494d      	ldr	r1, [pc, #308]	@ (8001ebc <parseGPSData+0x1a8>)
 8001d86:	69f8      	ldr	r0, [r7, #28]
 8001d88:	f7ff f814 	bl	8000db4 <__aeabi_fmul>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6a38      	ldr	r0, [r7, #32]
 8001d92:	f7fe ff05 	bl	8000ba0 <__aeabi_fsub>
 8001d96:	4603      	mov	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
            latitude = degrees + (minutes / 60.0); // Chuyển sang decimal degrees
 8001d9a:	69f8      	ldr	r0, [r7, #28]
 8001d9c:	f7fe fb5c 	bl	8000458 <__aeabi_f2d>
 8001da0:	4604      	mov	r4, r0
 8001da2:	460d      	mov	r5, r1
 8001da4:	69b8      	ldr	r0, [r7, #24]
 8001da6:	f7fe fb57 	bl	8000458 <__aeabi_f2d>
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b44      	ldr	r3, [pc, #272]	@ (8001ec0 <parseGPSData+0x1ac>)
 8001db0:	f7fe fcd4 	bl	800075c <__aeabi_ddiv>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe f9ee 	bl	800019c <__adddf3>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f7fe fe96 	bl	8000af8 <__aeabi_d2f>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec4 <parseGPSData+0x1b0>)
 8001dd0:	6013      	str	r3, [r2, #0]

            token = strtok(NULL, ","); // Lấy hướng vĩ độ (N/S)
 8001dd2:	4939      	ldr	r1, [pc, #228]	@ (8001eb8 <parseGPSData+0x1a4>)
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f008 f939 	bl	800a04c <strtok>
 8001dda:	6278      	str	r0, [r7, #36]	@ 0x24
            if (token != NULL && *token == 'S') {
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <parseGPSData+0xe2>
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b53      	cmp	r3, #83	@ 0x53
 8001de8:	d105      	bne.n	8001df6 <parseGPSData+0xe2>
                latitude = -latitude; // Nếu là 'S', đổi sang giá trị âm
 8001dea:	4b36      	ldr	r3, [pc, #216]	@ (8001ec4 <parseGPSData+0x1b0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001df2:	4a34      	ldr	r2, [pc, #208]	@ (8001ec4 <parseGPSData+0x1b0>)
 8001df4:	6013      	str	r3, [r2, #0]
            }
        }

        token = strtok(NULL, ","); // Lấy giá trị kinh độ (longitude)
 8001df6:	4930      	ldr	r1, [pc, #192]	@ (8001eb8 <parseGPSData+0x1a4>)
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f008 f927 	bl	800a04c <strtok>
 8001dfe:	6278      	str	r0, [r7, #36]	@ 0x24
        if (token != NULL) {
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d051      	beq.n	8001eaa <parseGPSData+0x196>
            float rawLongitude = atof(token); // Lấy giá trị DDMM.MMMM
 8001e06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e08:	f006 fd56 	bl	80088b8 <atof>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fe70 	bl	8000af8 <__aeabi_d2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	617b      	str	r3, [r7, #20]
            float degrees = (int)(rawLongitude / 100); // Lấy phần độ
 8001e1c:	4927      	ldr	r1, [pc, #156]	@ (8001ebc <parseGPSData+0x1a8>)
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff f87c 	bl	8000f1c <__aeabi_fdiv>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f98a 	bl	8001140 <__aeabi_f2iz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe ff6c 	bl	8000d0c <__aeabi_i2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	613b      	str	r3, [r7, #16]
            float minutes = rawLongitude - (degrees * 100); // Lấy phần phút
 8001e38:	4920      	ldr	r1, [pc, #128]	@ (8001ebc <parseGPSData+0x1a8>)
 8001e3a:	6938      	ldr	r0, [r7, #16]
 8001e3c:	f7fe ffba 	bl	8000db4 <__aeabi_fmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4619      	mov	r1, r3
 8001e44:	6978      	ldr	r0, [r7, #20]
 8001e46:	f7fe feab 	bl	8000ba0 <__aeabi_fsub>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
            longitude = degrees + (minutes / 60.0); // Chuyển sang decimal degrees
 8001e4e:	6938      	ldr	r0, [r7, #16]
 8001e50:	f7fe fb02 	bl	8000458 <__aeabi_f2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	460d      	mov	r5, r1
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7fe fafd 	bl	8000458 <__aeabi_f2d>
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <parseGPSData+0x1ac>)
 8001e64:	f7fe fc7a 	bl	800075c <__aeabi_ddiv>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7fe f994 	bl	800019c <__adddf3>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fe3c 	bl	8000af8 <__aeabi_d2f>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a11      	ldr	r2, [pc, #68]	@ (8001ec8 <parseGPSData+0x1b4>)
 8001e84:	6013      	str	r3, [r2, #0]
            token = strtok(NULL, ","); // Lấy hướng kinh độ (E/W)
 8001e86:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <parseGPSData+0x1a4>)
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f008 f8df 	bl	800a04c <strtok>
 8001e8e:	6278      	str	r0, [r7, #36]	@ 0x24

            if (token != NULL && *token == 'W') {
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <parseGPSData+0x196>
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b57      	cmp	r3, #87	@ 0x57
 8001e9c:	d105      	bne.n	8001eaa <parseGPSData+0x196>
                longitude = -longitude; // Nếu là 'W', đổi sang giá trị âm
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <parseGPSData+0x1b4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001ea6:	4a08      	ldr	r2, [pc, #32]	@ (8001ec8 <parseGPSData+0x1b4>)
 8001ea8:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 8001eaa:	bf00      	nop
 8001eac:	3728      	adds	r7, #40	@ 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	0800cc10 	.word	0x0800cc10
 8001eb8:	0800cc18 	.word	0x0800cc18
 8001ebc:	42c80000 	.word	0x42c80000
 8001ec0:	404e0000 	.word	0x404e0000
 8001ec4:	20000e70 	.word	0x20000e70
 8001ec8:	20000e6c 	.word	0x20000e6c

08001ecc <sendCoordinates>:


void sendCoordinates() {
 8001ecc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af06      	add	r7, sp, #24
    if (latitude != 0.0 && longitude != 0.0) {
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f88 <sendCoordinates+0xbc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f04f 0100 	mov.w	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f8fd 	bl	80010dc <__aeabi_fcmpeq>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d13a      	bne.n	8001f5e <sendCoordinates+0x92>
 8001ee8:	4b28      	ldr	r3, [pc, #160]	@ (8001f8c <sendCoordinates+0xc0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f8f3 	bl	80010dc <__aeabi_fcmpeq>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d130      	bne.n	8001f5e <sendCoordinates+0x92>
    	uint8_tToChar(id, id_device);
 8001efc:	4924      	ldr	r1, [pc, #144]	@ (8001f90 <sendCoordinates+0xc4>)
 8001efe:	4825      	ldr	r0, [pc, #148]	@ (8001f94 <sendCoordinates+0xc8>)
 8001f00:	f7ff fe2c 	bl	8001b5c <uint8_tToChar>
        snprintf(outputBuffer, sizeof(outputBuffer), "!ID:%s:GPS:%.6f:%.6f:V:%.4f#\r\n", id, longitude, latitude,velocity);
 8001f04:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <sendCoordinates+0xc0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe faa5 	bl	8000458 <__aeabi_f2d>
 8001f0e:	4604      	mov	r4, r0
 8001f10:	460d      	mov	r5, r1
 8001f12:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <sendCoordinates+0xbc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fa9e 	bl	8000458 <__aeabi_f2d>
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	4689      	mov	r9, r1
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <sendCoordinates+0xcc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fa97 	bl	8000458 <__aeabi_f2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f32:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001f36:	e9cd 4500 	strd	r4, r5, [sp]
 8001f3a:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <sendCoordinates+0xc8>)
 8001f3c:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <sendCoordinates+0xd0>)
 8001f3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f42:	4817      	ldr	r0, [pc, #92]	@ (8001fa0 <sendCoordinates+0xd4>)
 8001f44:	f007 ffde 	bl	8009f04 <sniprintf>
        HAL_UART_Transmit_IT(&huart1, (uint8_t*)outputBuffer, strlen(outputBuffer));
 8001f48:	4815      	ldr	r0, [pc, #84]	@ (8001fa0 <sendCoordinates+0xd4>)
 8001f4a:	f7fe f919 	bl	8000180 <strlen>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	4912      	ldr	r1, [pc, #72]	@ (8001fa0 <sendCoordinates+0xd4>)
 8001f56:	4813      	ldr	r0, [pc, #76]	@ (8001fa4 <sendCoordinates+0xd8>)
 8001f58:	f005 feec 	bl	8007d34 <HAL_UART_Transmit_IT>
 8001f5c:	e010      	b.n	8001f80 <sendCoordinates+0xb4>
    } else {
        snprintf(outputBuffer, sizeof(outputBuffer), "!Invalid GPS Data#\r\n");
 8001f5e:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <sendCoordinates+0xdc>)
 8001f60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f64:	480e      	ldr	r0, [pc, #56]	@ (8001fa0 <sendCoordinates+0xd4>)
 8001f66:	f007 ffcd 	bl	8009f04 <sniprintf>
        HAL_UART_Transmit_IT(&huart1, (uint8_t*)outputBuffer, strlen(outputBuffer));
 8001f6a:	480d      	ldr	r0, [pc, #52]	@ (8001fa0 <sendCoordinates+0xd4>)
 8001f6c:	f7fe f908 	bl	8000180 <strlen>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	490a      	ldr	r1, [pc, #40]	@ (8001fa0 <sendCoordinates+0xd4>)
 8001f78:	480a      	ldr	r0, [pc, #40]	@ (8001fa4 <sendCoordinates+0xd8>)
 8001f7a:	f005 fedb 	bl	8007d34 <HAL_UART_Transmit_IT>
    }
    //memset(outputBuffer, 0, sizeof(outputBuffer));
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f88:	20000e70 	.word	0x20000e70
 8001f8c:	20000e6c 	.word	0x20000e6c
 8001f90:	2000005c 	.word	0x2000005c
 8001f94:	20000170 	.word	0x20000170
 8001f98:	2000016c 	.word	0x2000016c
 8001f9c:	0800cc1c 	.word	0x0800cc1c
 8001fa0:	20000c6c 	.word	0x20000c6c
 8001fa4:	200005d8 	.word	0x200005d8
 8001fa8:	0800cc3c 	.word	0x0800cc3c

08001fac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a24      	ldr	r2, [pc, #144]	@ (800204c <HAL_UART_RxCpltCallback+0xa0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12b      	bne.n	8002016 <HAL_UART_RxCpltCallback+0x6a>
		if (temp != 13) {
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_UART_RxCpltCallback+0xa4>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b0d      	cmp	r3, #13
 8001fc4:	d016      	beq.n	8001ff4 <HAL_UART_RxCpltCallback+0x48>
			if (buffer_index < MAX_BUFFER_SIZE - 1) {
 8001fc6:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <HAL_UART_RxCpltCallback+0xa8>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2bff      	cmp	r3, #255	@ 0xff
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_UART_RxCpltCallback+0x3a>
				buffer[buffer_index++] = temp;
 8001fce:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <HAL_UART_RxCpltCallback+0xa8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	b2d1      	uxtb	r1, r2
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002054 <HAL_UART_RxCpltCallback+0xa8>)
 8001fd8:	7011      	strb	r1, [r2, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <HAL_UART_RxCpltCallback+0xa4>)
 8001fde:	7819      	ldrb	r1, [r3, #0]
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <HAL_UART_RxCpltCallback+0xac>)
 8001fe2:	5499      	strb	r1, [r3, r2]
 8001fe4:	e012      	b.n	800200c <HAL_UART_RxCpltCallback+0x60>
			} else {
				buffer_index = 0;
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_UART_RxCpltCallback+0xa8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
				buffer_flag = 1;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_UART_RxCpltCallback+0xb0>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_UART_RxCpltCallback+0x60>
			}
		} else {
			buffer[buffer_index] = '\0';
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <HAL_UART_RxCpltCallback+0xa8>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <HAL_UART_RxCpltCallback+0xac>)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	5499      	strb	r1, [r3, r2]
			buffer_index = 0;
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <HAL_UART_RxCpltCallback+0xa8>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
			buffer_flag = 1;
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_UART_RxCpltCallback+0xb0>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &temp, 1);
 800200c:	2201      	movs	r2, #1
 800200e:	4910      	ldr	r1, [pc, #64]	@ (8002050 <HAL_UART_RxCpltCallback+0xa4>)
 8002010:	4813      	ldr	r0, [pc, #76]	@ (8002060 <HAL_UART_RxCpltCallback+0xb4>)
 8002012:	f005 fec4 	bl	8007d9e <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART2) {
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <HAL_UART_RxCpltCallback+0xb8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d111      	bne.n	8002044 <HAL_UART_RxCpltCallback+0x98>
		filterGPGGA(gpsBuffer);
 8002020:	4811      	ldr	r0, [pc, #68]	@ (8002068 <HAL_UART_RxCpltCallback+0xbc>)
 8002022:	f7ff fde9 	bl	8001bf8 <filterGPGGA>
		parseGPSData(gpggaBuffer);
 8002026:	4811      	ldr	r0, [pc, #68]	@ (800206c <HAL_UART_RxCpltCallback+0xc0>)
 8002028:	f7ff fe74 	bl	8001d14 <parseGPSData>

		filterGNVTG(gpsBuffer);
 800202c:	480e      	ldr	r0, [pc, #56]	@ (8002068 <HAL_UART_RxCpltCallback+0xbc>)
 800202e:	f7ff fdb5 	bl	8001b9c <filterGNVTG>
		parseVData(gnvtgBuffer);
 8002032:	480f      	ldr	r0, [pc, #60]	@ (8002070 <HAL_UART_RxCpltCallback+0xc4>)
 8002034:	f7ff fe0e 	bl	8001c54 <parseVData>
//		sendCoordinates();
		HAL_UART_Receive_IT(&huart2, (uint8_t*)gpsBuffer, BUFFER_SIZE);
 8002038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800203c:	490a      	ldr	r1, [pc, #40]	@ (8002068 <HAL_UART_RxCpltCallback+0xbc>)
 800203e:	480d      	ldr	r0, [pc, #52]	@ (8002074 <HAL_UART_RxCpltCallback+0xc8>)
 8002040:	f005 fead 	bl	8007d9e <HAL_UART_Receive_IT>
	}
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40013800 	.word	0x40013800
 8002050:	200003cd 	.word	0x200003cd
 8002054:	200004d0 	.word	0x200004d0
 8002058:	200003d0 	.word	0x200003d0
 800205c:	200004d1 	.word	0x200004d1
 8002060:	200005d8 	.word	0x200005d8
 8002064:	40004400 	.word	0x40004400
 8002068:	2000066c 	.word	0x2000066c
 800206c:	2000086c 	.word	0x2000086c
 8002070:	20000a6c 	.word	0x20000a6c
 8002074:	20000620 	.word	0x20000620

08002078 <fsm_start_task>:

void fsm_start_task(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	fsm_start(&huart1, buffer);
 800207c:	4902      	ldr	r1, [pc, #8]	@ (8002088 <fsm_start_task+0x10>)
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <fsm_start_task+0x14>)
 8002080:	f7ff fc8e 	bl	80019a0 <fsm_start>
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200003d0 	.word	0x200003d0
 800208c:	200005d8 	.word	0x200005d8

08002090 <fsm_find_device_task>:

void fsm_find_device_task(void) {
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	fsm_find_device(&huart1);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <fsm_find_device_task+0x10>)
 8002096:	f7ff fb51 	bl	800173c <fsm_find_device>
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200005d8 	.word	0x200005d8

080020a4 <fsm_control_buzzer_task>:

void fsm_control_buzzer_task(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	fsm_control_buzzer(&huart1);
 80020a8:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <fsm_control_buzzer_task+0x10>)
 80020aa:	f7ff fa87 	bl	80015bc <fsm_control_buzzer>
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200005d8 	.word	0x200005d8

080020b8 <fsm_handle_data_task>:

void fsm_handle_data_task(void) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
	handleBatteryData(&hadc);
 80020bc:	4803      	ldr	r0, [pc, #12]	@ (80020cc <fsm_handle_data_task+0x14>)
 80020be:	f7ff fbbf 	bl	8001840 <handleBatteryData>
	handleSensorData(&hi2c1);
 80020c2:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <fsm_handle_data_task+0x18>)
 80020c4:	f7ff fb96 	bl	80017f4 <handleSensorData>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200004f0 	.word	0x200004f0
 80020d0:	20000544 	.word	0x20000544

080020d4 <fsm_send_data_task>:

void fsm_send_data_task(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	if (handle_data_flag == true) {
 80020d8:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <fsm_send_data_task+0x18>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <fsm_send_data_task+0x14>
		send_data(&huart1);
 80020e2:	4803      	ldr	r0, [pc, #12]	@ (80020f0 <fsm_send_data_task+0x1c>)
 80020e4:	f7ff fbbc 	bl	8001860 <send_data>
	}
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200004d7 	.word	0x200004d7
 80020f0:	200005d8 	.word	0x200005d8

080020f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020f8:	f000 fff7 	bl	80030ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020fc:	f000 f8a6 	bl	800224c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002100:	f000 fa18 	bl	8002534 <MX_GPIO_Init>
  MX_ADC_Init();
 8002104:	f000 f8f0 	bl	80022e8 <MX_ADC_Init>
  MX_I2C1_Init();
 8002108:	f000 f946 	bl	8002398 <MX_I2C1_Init>
  MX_TIM2_Init();
 800210c:	f000 f972 	bl	80023f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002110:	f000 f9bc 	bl	800248c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002114:	f000 f9e4 	bl	80024e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002118:	4838      	ldr	r0, [pc, #224]	@ (80021fc <main+0x108>)
 800211a:	f005 fa4b 	bl	80075b4 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2101      	movs	r1, #1
 8002122:	4837      	ldr	r0, [pc, #220]	@ (8002200 <main+0x10c>)
 8002124:	f001 ff48 	bl	8003fb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	2102      	movs	r1, #2
 800212c:	4834      	ldr	r0, [pc, #208]	@ (8002200 <main+0x10c>)
 800212e:	f001 ff43 	bl	8003fb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8002132:	2201      	movs	r2, #1
 8002134:	2140      	movs	r1, #64	@ 0x40
 8002136:	4833      	ldr	r0, [pc, #204]	@ (8002204 <main+0x110>)
 8002138:	f001 ff3e 	bl	8003fb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800213c:	2201      	movs	r2, #1
 800213e:	2120      	movs	r1, #32
 8002140:	4830      	ldr	r0, [pc, #192]	@ (8002204 <main+0x110>)
 8002142:	f001 ff39 	bl	8003fb8 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, &temp, 1);
 8002146:	2201      	movs	r2, #1
 8002148:	492f      	ldr	r1, [pc, #188]	@ (8002208 <main+0x114>)
 800214a:	4830      	ldr	r0, [pc, #192]	@ (800220c <main+0x118>)
 800214c:	f005 fe27 	bl	8007d9e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)gpsBuffer, BUFFER_SIZE);
 8002150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002154:	492e      	ldr	r1, [pc, #184]	@ (8002210 <main+0x11c>)
 8002156:	482f      	ldr	r0, [pc, #188]	@ (8002214 <main+0x120>)
 8002158:	f005 fe21 	bl	8007d9e <HAL_UART_Receive_IT>
  MPU6050_Init(&hi2c1);
 800215c:	482e      	ldr	r0, [pc, #184]	@ (8002218 <main+0x124>)
 800215e:	f000 fa91 	bl	8002684 <MPU6050_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(fsm_start_task, 1, 1);
 8002162:	2201      	movs	r2, #1
 8002164:	2101      	movs	r1, #1
 8002166:	482d      	ldr	r0, [pc, #180]	@ (800221c <main+0x128>)
 8002168:	f000 fb48 	bl	80027fc <SCH_Add_Task>
  SCH_Add_Task(fsm_find_device_task, 2, 1);
 800216c:	2201      	movs	r2, #1
 800216e:	2102      	movs	r1, #2
 8002170:	482b      	ldr	r0, [pc, #172]	@ (8002220 <main+0x12c>)
 8002172:	f000 fb43 	bl	80027fc <SCH_Add_Task>
  SCH_Add_Task(fsm_control_buzzer_task, 3, 1);
 8002176:	2201      	movs	r2, #1
 8002178:	2103      	movs	r1, #3
 800217a:	482a      	ldr	r0, [pc, #168]	@ (8002224 <main+0x130>)
 800217c:	f000 fb3e 	bl	80027fc <SCH_Add_Task>
  SCH_Add_Task(fsm_handle_data_task, 5, 1);
 8002180:	2201      	movs	r2, #1
 8002182:	2105      	movs	r1, #5
 8002184:	4828      	ldr	r0, [pc, #160]	@ (8002228 <main+0x134>)
 8002186:	f000 fb39 	bl	80027fc <SCH_Add_Task>
//  SCH_Add_Task(fsm_send_data_task, 6, 10000);
  setTimer0(1000);
 800218a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800218e:	f000 fc7b 	bl	8002a88 <setTimer0>
  setTimer1(5000);
 8002192:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002196:	f000 fc8b 	bl	8002ab0 <setTimer1>
  while (1)
  {
	  if (handle_GPS_data_flag == true) {
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <main+0x138>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00e      	beq.n	80021c2 <main+0xce>
		  if (u8_flag_10ms){
 80021a4:	4b22      	ldr	r3, [pc, #136]	@ (8002230 <main+0x13c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <main+0xce>
			u8_flag_10ms = 0;
 80021ac:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <main+0x13c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
			parseGPSData(gpggaBuffer);
 80021b2:	4820      	ldr	r0, [pc, #128]	@ (8002234 <main+0x140>)
 80021b4:	f7ff fdae 	bl	8001d14 <parseGPSData>
			parseVData(gnvtgBuffer);
 80021b8:	481f      	ldr	r0, [pc, #124]	@ (8002238 <main+0x144>)
 80021ba:	f7ff fd4b 	bl	8001c54 <parseVData>
			sendCoordinates();
 80021be:	f7ff fe85 	bl	8001ecc <sendCoordinates>
		  }
	  }
	  if (timer1_flag == 1) {
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <main+0x148>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d109      	bne.n	80021de <main+0xea>
		  SENSOR_flag = true;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <main+0x14c>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
		  BATTERY_flag = true;
 80021d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <main+0x150>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
		  setTimer1(5000);
 80021d6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80021da:	f000 fc69 	bl	8002ab0 <setTimer1>
	  }

	  if (start_idle_flag) {
 80021de:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <main+0x154>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <main+0x100>
		  start_idle_flag = false;
 80021e8:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <main+0x154>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
		  SCH_Delete_Task(fsm_start_task);
 80021ee:	480b      	ldr	r0, [pc, #44]	@ (800221c <main+0x128>)
 80021f0:	f000 fbfc 	bl	80029ec <SCH_Delete_Task>
	  }
	  SCH_Dispatch_Tasks();
 80021f4:	f000 fbb8 	bl	8002968 <SCH_Dispatch_Tasks>
	  if (handle_GPS_data_flag == true) {
 80021f8:	e7cf      	b.n	800219a <main+0xa6>
 80021fa:	bf00      	nop
 80021fc:	20000598 	.word	0x20000598
 8002200:	40020400 	.word	0x40020400
 8002204:	40020000 	.word	0x40020000
 8002208:	200003cd 	.word	0x200003cd
 800220c:	200005d8 	.word	0x200005d8
 8002210:	2000066c 	.word	0x2000066c
 8002214:	20000620 	.word	0x20000620
 8002218:	20000544 	.word	0x20000544
 800221c:	08002079 	.word	0x08002079
 8002220:	08002091 	.word	0x08002091
 8002224:	080020a5 	.word	0x080020a5
 8002228:	080020b9 	.word	0x080020b9
 800222c:	200004d6 	.word	0x200004d6
 8002230:	20000668 	.word	0x20000668
 8002234:	2000086c 	.word	0x2000086c
 8002238:	20000a6c 	.word	0x20000a6c
 800223c:	2000101c 	.word	0x2000101c
 8002240:	200004d5 	.word	0x200004d5
 8002244:	200004d4 	.word	0x200004d4
 8002248:	200004d2 	.word	0x200004d2

0800224c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b092      	sub	sp, #72	@ 0x48
 8002250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	2234      	movs	r2, #52	@ 0x34
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f007 fec9 	bl	8009ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002260:	463b      	mov	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800226e:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <SystemClock_Config+0x98>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8002276:	4a1b      	ldr	r2, [pc, #108]	@ (80022e4 <SystemClock_Config+0x98>)
 8002278:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800227c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800227e:	2302      	movs	r3, #2
 8002280:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002282:	2301      	movs	r3, #1
 8002284:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002286:	2310      	movs	r3, #16
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228a:	2302      	movs	r3, #2
 800228c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800228e:	2300      	movs	r3, #0
 8002290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002292:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002296:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8002298:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800229c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 fb92 	bl	80069cc <HAL_RCC_OscConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80022ae:	f000 f9e3 	bl	8002678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b2:	230f      	movs	r3, #15
 80022b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b6:	2303      	movs	r3, #3
 80022b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	2101      	movs	r1, #1
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 feae 	bl	800702c <HAL_RCC_ClockConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80022d6:	f000 f9cf 	bl	8002678 <Error_Handler>
  }
}
 80022da:	bf00      	nop
 80022dc:	3748      	adds	r7, #72	@ 0x48
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40007000 	.word	0x40007000

080022e8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80022f8:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <MX_ADC_Init+0xa8>)
 80022fa:	4a26      	ldr	r2, [pc, #152]	@ (8002394 <MX_ADC_Init+0xac>)
 80022fc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80022fe:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <MX_ADC_Init+0xa8>)
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002304:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <MX_ADC_Init+0xa8>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800230a:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <MX_ADC_Init+0xa8>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002310:	4b1f      	ldr	r3, [pc, #124]	@ (8002390 <MX_ADC_Init+0xa8>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002316:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <MX_ADC_Init+0xa8>)
 8002318:	2200      	movs	r2, #0
 800231a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800231c:	4b1c      	ldr	r3, [pc, #112]	@ (8002390 <MX_ADC_Init+0xa8>)
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <MX_ADC_Init+0xa8>)
 8002324:	2200      	movs	r2, #0
 8002326:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <MX_ADC_Init+0xa8>)
 800232a:	2200      	movs	r2, #0
 800232c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800232e:	4b18      	ldr	r3, [pc, #96]	@ (8002390 <MX_ADC_Init+0xa8>)
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8002336:	4b16      	ldr	r3, [pc, #88]	@ (8002390 <MX_ADC_Init+0xa8>)
 8002338:	2201      	movs	r2, #1
 800233a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800233c:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <MX_ADC_Init+0xa8>)
 800233e:	2200      	movs	r2, #0
 8002340:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002344:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <MX_ADC_Init+0xa8>)
 8002346:	2210      	movs	r2, #16
 8002348:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800234a:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <MX_ADC_Init+0xa8>)
 800234c:	2200      	movs	r2, #0
 800234e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002350:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <MX_ADC_Init+0xa8>)
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002358:	480d      	ldr	r0, [pc, #52]	@ (8002390 <MX_ADC_Init+0xa8>)
 800235a:	f000 ff57 	bl	800320c <HAL_ADC_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8002364:	f000 f988 	bl	8002678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800236c:	2301      	movs	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	@ (8002390 <MX_ADC_Init+0xa8>)
 800237a:	f001 f9ab 	bl	80036d4 <HAL_ADC_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8002384:	f000 f978 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200004f0 	.word	0x200004f0
 8002394:	40012400 	.word	0x40012400

08002398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <MX_I2C1_Init+0x50>)
 800239e:	4a13      	ldr	r2, [pc, #76]	@ (80023ec <MX_I2C1_Init+0x54>)
 80023a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <MX_I2C1_Init+0x50>)
 80023a4:	4a12      	ldr	r2, [pc, #72]	@ (80023f0 <MX_I2C1_Init+0x58>)
 80023a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <MX_I2C1_Init+0x50>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <MX_I2C1_Init+0x50>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <MX_I2C1_Init+0x50>)
 80023b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <MX_I2C1_Init+0x50>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <MX_I2C1_Init+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023c8:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <MX_I2C1_Init+0x50>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <MX_I2C1_Init+0x50>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023d4:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <MX_I2C1_Init+0x50>)
 80023d6:	f001 fe21 	bl	800401c <HAL_I2C_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023e0:	f000 f94a 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000544 	.word	0x20000544
 80023ec:	40005400 	.word	0x40005400
 80023f0:	00061a80 	.word	0x00061a80

080023f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002408:	463b      	mov	r3, r7
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002410:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <MX_TIM2_Init+0x94>)
 8002412:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002416:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8002418:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <MX_TIM2_Init+0x94>)
 800241a:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800241e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <MX_TIM2_Init+0x94>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <MX_TIM2_Init+0x94>)
 8002428:	2207      	movs	r2, #7
 800242a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242c:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <MX_TIM2_Init+0x94>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <MX_TIM2_Init+0x94>)
 8002434:	2200      	movs	r2, #0
 8002436:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002438:	4813      	ldr	r0, [pc, #76]	@ (8002488 <MX_TIM2_Init+0x94>)
 800243a:	f005 f87b 	bl	8007534 <HAL_TIM_Base_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002444:	f000 f918 	bl	8002678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800244c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	4619      	mov	r1, r3
 8002454:	480c      	ldr	r0, [pc, #48]	@ (8002488 <MX_TIM2_Init+0x94>)
 8002456:	f005 f9db 	bl	8007810 <HAL_TIM_ConfigClockSource>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002460:	f000 f90a 	bl	8002678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800246c:	463b      	mov	r3, r7
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	@ (8002488 <MX_TIM2_Init+0x94>)
 8002472:	f005 fbb1 	bl	8007bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800247c:	f000 f8fc 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000598 	.word	0x20000598

0800248c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <MX_USART1_UART_Init+0x4c>)
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <MX_USART1_UART_Init+0x50>)
 8002494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <MX_USART1_UART_Init+0x4c>)
 8002498:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800249c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <MX_USART1_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <MX_USART1_UART_Init+0x4c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <MX_USART1_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <MX_USART1_UART_Init+0x4c>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <MX_USART1_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <MX_USART1_UART_Init+0x4c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <MX_USART1_UART_Init+0x4c>)
 80024c4:	f005 fbe6 	bl	8007c94 <HAL_UART_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024ce:	f000 f8d3 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200005d8 	.word	0x200005d8
 80024dc:	40013800 	.word	0x40013800

080024e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <MX_USART2_UART_Init+0x4c>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <MX_USART2_UART_Init+0x50>)
 80024e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024ea:	4b10      	ldr	r3, [pc, #64]	@ (800252c <MX_USART2_UART_Init+0x4c>)
 80024ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <MX_USART2_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <MX_USART2_UART_Init+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <MX_USART2_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <MX_USART2_UART_Init+0x4c>)
 8002506:	220c      	movs	r2, #12
 8002508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250a:	4b08      	ldr	r3, [pc, #32]	@ (800252c <MX_USART2_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <MX_USART2_UART_Init+0x4c>)
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	@ (800252c <MX_USART2_UART_Init+0x4c>)
 8002518:	f005 fbbc 	bl	8007c94 <HAL_UART_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002522:	f000 f8a9 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000620 	.word	0x20000620
 8002530:	40004400 	.word	0x40004400

08002534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800254a:	4b27      	ldr	r3, [pc, #156]	@ (80025e8 <MX_GPIO_Init+0xb4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4a26      	ldr	r2, [pc, #152]	@ (80025e8 <MX_GPIO_Init+0xb4>)
 8002550:	f043 0320 	orr.w	r3, r3, #32
 8002554:	61d3      	str	r3, [r2, #28]
 8002556:	4b24      	ldr	r3, [pc, #144]	@ (80025e8 <MX_GPIO_Init+0xb4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	4b21      	ldr	r3, [pc, #132]	@ (80025e8 <MX_GPIO_Init+0xb4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a20      	ldr	r2, [pc, #128]	@ (80025e8 <MX_GPIO_Init+0xb4>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <MX_GPIO_Init+0xb4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <MX_GPIO_Init+0xb4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <MX_GPIO_Init+0xb4>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <MX_GPIO_Init+0xb4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	2160      	movs	r1, #96	@ 0x60
 8002596:	4815      	ldr	r0, [pc, #84]	@ (80025ec <MX_GPIO_Init+0xb8>)
 8002598:	f001 fd0e 	bl	8003fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2103      	movs	r1, #3
 80025a0:	4813      	ldr	r0, [pc, #76]	@ (80025f0 <MX_GPIO_Init+0xbc>)
 80025a2:	f001 fd09 	bl	8003fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZER_Pin;
 80025a6:	2360      	movs	r3, #96	@ 0x60
 80025a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	4619      	mov	r1, r3
 80025bc:	480b      	ldr	r0, [pc, #44]	@ (80025ec <MX_GPIO_Init+0xb8>)
 80025be:	f001 fb7b 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 80025c2:	2303      	movs	r3, #3
 80025c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4619      	mov	r1, r3
 80025d8:	4805      	ldr	r0, [pc, #20]	@ (80025f0 <MX_GPIO_Init+0xbc>)
 80025da:	f001 fb6d 	bl	8003cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025de:	bf00      	nop
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020400 	.word	0x40020400

080025f4 <HAL_TIM_PeriodElapsedCallback>:
//	timerRun();
//}

int counter_s = 0;
int counter_gps = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80025fc:	f000 f954 	bl	80028a8 <SCH_Update>
	timerRun();
 8002600:	f000 fa6a 	bl	8002ad8 <timerRun>
	if(htim->Instance==TIM2) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260c:	d126      	bne.n	800265c <HAL_TIM_PeriodElapsedCallback+0x68>
		if (counter_gps >= 5000) {
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002616:	4293      	cmp	r3, r2
 8002618:	dd05      	ble.n	8002626 <HAL_TIM_PeriodElapsedCallback+0x32>
			counter_gps = 0;
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
			u8_flag_10ms = 1;
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
		}
		if (counter_s >= 5123) {
 8002626:	4b11      	ldr	r3, [pc, #68]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f241 4202 	movw	r2, #5122	@ 0x1402
 800262e:	4293      	cmp	r3, r2
 8002630:	dd0a      	ble.n	8002648 <HAL_TIM_PeriodElapsedCallback+0x54>
			counter_s = 0;
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
			handleSensorData(&hi2c1);
 8002638:	480d      	ldr	r0, [pc, #52]	@ (8002670 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800263a:	f7ff f8db 	bl	80017f4 <handleSensorData>
			handleBatteryData(&hadc);
 800263e:	480d      	ldr	r0, [pc, #52]	@ (8002674 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002640:	f7ff f8fe 	bl	8001840 <handleBatteryData>
			fsm_send_data_task();
 8002644:	f7ff fd46 	bl	80020d4 <fsm_send_data_task>
		}
		counter_gps++;
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4a05      	ldr	r2, [pc, #20]	@ (8002664 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002650:	6013      	str	r3, [r2, #0]
		counter_s++;
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a04      	ldr	r2, [pc, #16]	@ (800266c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800265a:	6013      	str	r3, [r2, #0]
	}
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000e78 	.word	0x20000e78
 8002668:	20000668 	.word	0x20000668
 800266c:	20000e74 	.word	0x20000e74
 8002670:	20000544 	.word	0x20000544
 8002674:	200004f0 	.word	0x200004f0

08002678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800267c:	b672      	cpsid	i
}
 800267e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <Error_Handler+0x8>

08002684 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af04      	add	r7, sp, #16
 800268a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800268c:	2364      	movs	r3, #100	@ 0x64
 800268e:	9302      	str	r3, [sp, #8]
 8002690:	2301      	movs	r3, #1
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	f107 030f 	add.w	r3, r7, #15
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	2275      	movs	r2, #117	@ 0x75
 800269e:	21d0      	movs	r1, #208	@ 0xd0
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f001 ff0d 	bl	80044c0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b68      	cmp	r3, #104	@ 0x68
 80026aa:	d13d      	bne.n	8002728 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80026b0:	2364      	movs	r3, #100	@ 0x64
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	2301      	movs	r3, #1
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	f107 030e 	add.w	r3, r7, #14
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2301      	movs	r3, #1
 80026c0:	226b      	movs	r2, #107	@ 0x6b
 80026c2:	21d0      	movs	r1, #208	@ 0xd0
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f001 fe01 	bl	80042cc <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80026ca:	2307      	movs	r3, #7
 80026cc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80026ce:	2364      	movs	r3, #100	@ 0x64
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	2301      	movs	r3, #1
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	f107 030e 	add.w	r3, r7, #14
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	2219      	movs	r2, #25
 80026e0:	21d0      	movs	r1, #208	@ 0xd0
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f001 fdf2 	bl	80042cc <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80026ec:	2364      	movs	r3, #100	@ 0x64
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	2301      	movs	r3, #1
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	f107 030e 	add.w	r3, r7, #14
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2301      	movs	r3, #1
 80026fc:	221c      	movs	r2, #28
 80026fe:	21d0      	movs	r1, #208	@ 0xd0
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f001 fde3 	bl	80042cc <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002706:	2300      	movs	r3, #0
 8002708:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800270a:	2364      	movs	r3, #100	@ 0x64
 800270c:	9302      	str	r3, [sp, #8]
 800270e:	2301      	movs	r3, #1
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	f107 030e 	add.w	r3, r7, #14
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2301      	movs	r3, #1
 800271a:	221b      	movs	r2, #27
 800271c:	21d0      	movs	r1, #208	@ 0xd0
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f001 fdd4 	bl	80042cc <HAL_I2C_Mem_Write>
        return 0;
 8002724:	2300      	movs	r3, #0
 8002726:	e000      	b.n	800272a <MPU6050_Init+0xa6>
    }
    return 1;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af04      	add	r7, sp, #16
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 800273e:	2364      	movs	r3, #100	@ 0x64
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2306      	movs	r3, #6
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	f107 0308 	add.w	r3, r7, #8
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	223b      	movs	r2, #59	@ 0x3b
 8002750:	21d0      	movs	r1, #208	@ 0xd0
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f001 feb4 	bl	80044c0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002758:	7a3b      	ldrb	r3, [r7, #8]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	b21a      	sxth	r2, r3
 800275e:	7a7b      	ldrb	r3, [r7, #9]
 8002760:	b21b      	sxth	r3, r3
 8002762:	4313      	orrs	r3, r2
 8002764:	b21a      	sxth	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800276a:	7abb      	ldrb	r3, [r7, #10]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	b21a      	sxth	r2, r3
 8002770:	7afb      	ldrb	r3, [r7, #11]
 8002772:	b21b      	sxth	r3, r3
 8002774:	4313      	orrs	r3, r2
 8002776:	b21a      	sxth	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800277c:	7b3b      	ldrb	r3, [r7, #12]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	b21a      	sxth	r2, r3
 8002782:	7b7b      	ldrb	r3, [r7, #13]
 8002784:	b21b      	sxth	r3, r3
 8002786:	4313      	orrs	r3, r2
 8002788:	b21a      	sxth	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fe4d 	bl	8000434 <__aeabi_i2d>
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <MPU6050_Read_Accel+0xc4>)
 80027a0:	f7fd ffdc 	bl	800075c <__aeabi_ddiv>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe3d 	bl	8000434 <__aeabi_i2d>
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <MPU6050_Read_Accel+0xc4>)
 80027c0:	f7fd ffcc 	bl	800075c <__aeabi_ddiv>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fe2d 	bl	8000434 <__aeabi_i2d>
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <MPU6050_Read_Accel+0xc4>)
 80027e0:	f7fd ffbc 	bl	800075c <__aeabi_ddiv>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40d00000 	.word	0x40d00000

080027fc <SCH_Add_Task>:

void SCH_Init(void) {
	current_index_task = 0;
}

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASKS) {
 8002808:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <SCH_Add_Task+0xa4>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b13      	cmp	r3, #19
 800280e:	d842      	bhi.n	8002896 <SCH_Add_Task+0x9a>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8002810:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <SCH_Add_Task+0xa4>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	4a23      	ldr	r2, [pc, #140]	@ (80028a4 <SCH_Add_Task+0xa8>)
 8002818:	460b      	mov	r3, r1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 8002826:	4b1e      	ldr	r3, [pc, #120]	@ (80028a0 <SCH_Add_Task+0xa4>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4a1d      	ldr	r2, [pc, #116]	@ (80028a4 <SCH_Add_Task+0xa8>)
 800282e:	460b      	mov	r3, r1
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	3304      	adds	r3, #4
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD;
 800283e:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <SCH_Add_Task+0xa4>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	4619      	mov	r1, r3
 8002844:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <SCH_Add_Task+0xa8>)
 8002846:	460b      	mov	r3, r1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3308      	adds	r3, #8
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8002856:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <SCH_Add_Task+0xa4>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	4619      	mov	r1, r3
 800285c:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <SCH_Add_Task+0xa8>)
 800285e:	460b      	mov	r3, r1
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	330c      	adds	r3, #12
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800286e:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <SCH_Add_Task+0xa4>)
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <SCH_Add_Task+0xa4>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <SCH_Add_Task+0xa8>)
 800287c:	460b      	mov	r3, r1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	3310      	adds	r3, #16
 8002888:	6018      	str	r0, [r3, #0]
		current_index_task++;
 800288a:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <SCH_Add_Task+0xa4>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b03      	ldr	r3, [pc, #12]	@ (80028a0 <SCH_Add_Task+0xa4>)
 8002894:	701a      	strb	r2, [r3, #0]
	}
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	2000100c 	.word	0x2000100c
 80028a4:	20000e7c 	.word	0x20000e7c

080028a8 <SCH_Update>:

void SCH_Update(void) {
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	e048      	b.n	8002946 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0) {
 80028b4:	492a      	ldr	r1, [pc, #168]	@ (8002960 <SCH_Update+0xb8>)
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3304      	adds	r3, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d013      	beq.n	80028f2 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 80028ca:	4925      	ldr	r1, [pc, #148]	@ (8002960 <SCH_Update+0xb8>)
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3304      	adds	r3, #4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1e59      	subs	r1, r3, #1
 80028de:	4820      	ldr	r0, [pc, #128]	@ (8002960 <SCH_Update+0xb8>)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4403      	add	r3, r0
 80028ec:	3304      	adds	r3, #4
 80028ee:	6019      	str	r1, [r3, #0]
 80028f0:	e026      	b.n	8002940 <SCH_Update+0x98>
		} else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80028f2:	491b      	ldr	r1, [pc, #108]	@ (8002960 <SCH_Update+0xb8>)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3308      	adds	r3, #8
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	4816      	ldr	r0, [pc, #88]	@ (8002960 <SCH_Update+0xb8>)
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4403      	add	r3, r0
 8002912:	3304      	adds	r3, #4
 8002914:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8002916:	4912      	ldr	r1, [pc, #72]	@ (8002960 <SCH_Update+0xb8>)
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	330c      	adds	r3, #12
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	b2d8      	uxtb	r0, r3
 800292c:	490c      	ldr	r1, [pc, #48]	@ (8002960 <SCH_Update+0xb8>)
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	330c      	adds	r3, #12
 800293c:	4602      	mov	r2, r0
 800293e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < current_index_task; i++) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	4b07      	ldr	r3, [pc, #28]	@ (8002964 <SCH_Update+0xbc>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4293      	cmp	r3, r2
 8002950:	dbb0      	blt.n	80028b4 <SCH_Update+0xc>
		}
	}
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000e7c 	.word	0x20000e7c
 8002964:	2000100c 	.word	0x2000100c

08002968 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	e02b      	b.n	80029cc <SCH_Dispatch_Tasks+0x64>
		if (SCH_tasks_G[i].RunMe > 0) {
 8002974:	491b      	ldr	r1, [pc, #108]	@ (80029e4 <SCH_Dispatch_Tasks+0x7c>)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	330c      	adds	r3, #12
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01d      	beq.n	80029c6 <SCH_Dispatch_Tasks+0x5e>
			SCH_tasks_G[i].RunMe--;
 800298a:	4916      	ldr	r1, [pc, #88]	@ (80029e4 <SCH_Dispatch_Tasks+0x7c>)
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	330c      	adds	r3, #12
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	3b01      	subs	r3, #1
 800299e:	b2d8      	uxtb	r0, r3
 80029a0:	4910      	ldr	r1, [pc, #64]	@ (80029e4 <SCH_Dispatch_Tasks+0x7c>)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	330c      	adds	r3, #12
 80029b0:	4602      	mov	r2, r0
 80029b2:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 80029b4:	490b      	ldr	r1, [pc, #44]	@ (80029e4 <SCH_Dispatch_Tasks+0x7c>)
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4798      	blx	r3
	for (int i = 0; i < current_index_task; i++) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3301      	adds	r3, #1
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <SCH_Dispatch_Tasks+0x80>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4293      	cmp	r3, r2
 80029d6:	dbcd      	blt.n	8002974 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000e7c 	.word	0x20000e7c
 80029e8:	2000100c 	.word	0x2000100c

080029ec <SCH_Delete_Task>:

void SCH_Delete_Task(void (*pFunction)()) {
 80029ec:	b4b0      	push	{r4, r5, r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < current_index_task; i++) {
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e035      	b.n	8002a66 <SCH_Delete_Task+0x7a>
        if (SCH_tasks_G[i].pTask == pFunction) {
 80029fa:	4921      	ldr	r1, [pc, #132]	@ (8002a80 <SCH_Delete_Task+0x94>)
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d127      	bne.n	8002a60 <SCH_Delete_Task+0x74>
            for (int j = i; j < current_index_task - 1; j++) {
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	e017      	b.n	8002a46 <SCH_Delete_Task+0x5a>
                SCH_tasks_G[j] = SCH_tasks_G[j + 1];
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	4819      	ldr	r0, [pc, #100]	@ (8002a80 <SCH_Delete_Task+0x94>)
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4418      	add	r0, r3
 8002a28:	4915      	ldr	r1, [pc, #84]	@ (8002a80 <SCH_Delete_Task+0x94>)
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	4604      	mov	r4, r0
 8002a36:	461d      	mov	r5, r3
 8002a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	6023      	str	r3, [r4, #0]
            for (int j = i; j < current_index_task - 1; j++) {
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	3301      	adds	r3, #1
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <SCH_Delete_Task+0x98>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	dbe1      	blt.n	8002a16 <SCH_Delete_Task+0x2a>
            }
            current_index_task--;
 8002a52:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <SCH_Delete_Task+0x98>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <SCH_Delete_Task+0x98>)
 8002a5c:	701a      	strb	r2, [r3, #0]
            break;
 8002a5e:	e009      	b.n	8002a74 <SCH_Delete_Task+0x88>
    for (int i = 0; i < current_index_task; i++) {
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b07      	ldr	r3, [pc, #28]	@ (8002a84 <SCH_Delete_Task+0x98>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	dbc3      	blt.n	80029fa <SCH_Delete_Task+0xe>
        }
    }
}
 8002a72:	bf00      	nop
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bcb0      	pop	{r4, r5, r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000e7c 	.word	0x20000e7c
 8002a84:	2000100c 	.word	0x2000100c

08002a88 <setTimer0>:
int timer2_counter = 0;
int timer2_flag = 0;

// Ham khoi tao timer

void setTimer0(int duration) {
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
    timer0_counter = duration;
 8002a90:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <setTimer0+0x20>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <setTimer0+0x24>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20001010 	.word	0x20001010
 8002aac:	20001014 	.word	0x20001014

08002ab0 <setTimer1>:

void setTimer1(int duration) {
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
    timer1_counter = duration;
 8002ab8:	4a05      	ldr	r2, [pc, #20]	@ (8002ad0 <setTimer1+0x20>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 8002abe:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <setTimer1+0x24>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20001018 	.word	0x20001018
 8002ad4:	2000101c 	.word	0x2000101c

08002ad8 <timerRun>:
    timer2_flag = 0;
}

// Ham chay timer

void timerRun() {
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
    if (timer0_counter > 0) {
 8002adc:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <timerRun+0x6c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	dd0b      	ble.n	8002afc <timerRun+0x24>
        timer0_counter--;
 8002ae4:	4b17      	ldr	r3, [pc, #92]	@ (8002b44 <timerRun+0x6c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	4a16      	ldr	r2, [pc, #88]	@ (8002b44 <timerRun+0x6c>)
 8002aec:	6013      	str	r3, [r2, #0]
        if (timer0_counter <= 0) {
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <timerRun+0x6c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	dc02      	bgt.n	8002afc <timerRun+0x24>
            timer0_flag = 1;
 8002af6:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <timerRun+0x70>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer1_counter > 0) {
 8002afc:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <timerRun+0x74>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	dd0b      	ble.n	8002b1c <timerRun+0x44>
        timer1_counter--;
 8002b04:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <timerRun+0x74>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	4a10      	ldr	r2, [pc, #64]	@ (8002b4c <timerRun+0x74>)
 8002b0c:	6013      	str	r3, [r2, #0]
        if (timer1_counter <= 0) {
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <timerRun+0x74>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	dc02      	bgt.n	8002b1c <timerRun+0x44>
            timer1_flag = 1;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <timerRun+0x78>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer2_counter > 0) {
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <timerRun+0x7c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	dd0b      	ble.n	8002b3c <timerRun+0x64>
        timer2_counter--;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <timerRun+0x7c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <timerRun+0x7c>)
 8002b2c:	6013      	str	r3, [r2, #0]
        if (timer2_counter <= 0) {
 8002b2e:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <timerRun+0x7c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	dc02      	bgt.n	8002b3c <timerRun+0x64>
            timer2_flag = 1;
 8002b36:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <timerRun+0x80>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
        }
    }
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	20001010 	.word	0x20001010
 8002b48:	20001014 	.word	0x20001014
 8002b4c:	20001018 	.word	0x20001018
 8002b50:	2000101c 	.word	0x2000101c
 8002b54:	20001020 	.word	0x20001020
 8002b58:	20001024 	.word	0x20001024

08002b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <HAL_MspInit+0x58>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	4a13      	ldr	r2, [pc, #76]	@ (8002bb4 <HAL_MspInit+0x58>)
 8002b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b6c:	6253      	str	r3, [r2, #36]	@ 0x24
 8002b6e:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <HAL_MspInit+0x58>)
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb4 <HAL_MspInit+0x58>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb4 <HAL_MspInit+0x58>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6213      	str	r3, [r2, #32]
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_MspInit+0x58>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <HAL_MspInit+0x58>)
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	4a07      	ldr	r2, [pc, #28]	@ (8002bb4 <HAL_MspInit+0x58>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	6253      	str	r3, [r2, #36]	@ 0x24
 8002b9e:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_MspInit+0x58>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <HAL_ADC_MspInit+0x84>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d12b      	bne.n	8002c32 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bda:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_ADC_MspInit+0x88>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <HAL_ADC_MspInit+0x88>)
 8002be0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <HAL_ADC_MspInit+0x88>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_ADC_MspInit+0x88>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	@ (8002c40 <HAL_ADC_MspInit+0x88>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	61d3      	str	r3, [r2, #28]
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_ADC_MspInit+0x88>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4809      	ldr	r0, [pc, #36]	@ (8002c44 <HAL_ADC_MspInit+0x8c>)
 8002c1e:	f001 f84b 	bl	8003cb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2012      	movs	r0, #18
 8002c28:	f000 ff85 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002c2c:	2012      	movs	r0, #18
 8002c2e:	f000 ff9e 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c32:	bf00      	nop
 8002c34:	3728      	adds	r7, #40	@ 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40012400 	.word	0x40012400
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	@ 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce4 <HAL_I2C_MspInit+0x9c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d137      	bne.n	8002cda <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <HAL_I2C_MspInit+0xa0>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce8 <HAL_I2C_MspInit+0xa0>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	61d3      	str	r3, [r2, #28]
 8002c76:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce8 <HAL_I2C_MspInit+0xa0>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c82:	23c0      	movs	r3, #192	@ 0xc0
 8002c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c86:	2312      	movs	r3, #18
 8002c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c92:	2304      	movs	r3, #4
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4813      	ldr	r0, [pc, #76]	@ (8002cec <HAL_I2C_MspInit+0xa4>)
 8002c9e:	f001 f80b 	bl	8003cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <HAL_I2C_MspInit+0xa0>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	4a10      	ldr	r2, [pc, #64]	@ (8002ce8 <HAL_I2C_MspInit+0xa0>)
 8002ca8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cac:	6253      	str	r3, [r2, #36]	@ 0x24
 8002cae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <HAL_I2C_MspInit+0xa0>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	201f      	movs	r0, #31
 8002cc0:	f000 ff39 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002cc4:	201f      	movs	r0, #31
 8002cc6:	f000 ff52 	bl	8003b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2100      	movs	r1, #0
 8002cce:	2020      	movs	r0, #32
 8002cd0:	f000 ff31 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002cd4:	2020      	movs	r0, #32
 8002cd6:	f000 ff4a 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cda:	bf00      	nop
 8002cdc:	3728      	adds	r7, #40	@ 0x28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40005400 	.word	0x40005400
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40020400 	.word	0x40020400

08002cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d00:	d113      	bne.n	8002d2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d02:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <HAL_TIM_Base_MspInit+0x44>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	4a0b      	ldr	r2, [pc, #44]	@ (8002d34 <HAL_TIM_Base_MspInit+0x44>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6253      	str	r3, [r2, #36]	@ 0x24
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_TIM_Base_MspInit+0x44>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	201c      	movs	r0, #28
 8002d20:	f000 ff09 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d24:	201c      	movs	r0, #28
 8002d26:	f000 ff22 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08c      	sub	sp, #48	@ 0x30
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 031c 	add.w	r3, r7, #28
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a36      	ldr	r2, [pc, #216]	@ (8002e30 <HAL_UART_MspInit+0xf8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d131      	bne.n	8002dbe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d5a:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a35      	ldr	r2, [pc, #212]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	4b33      	ldr	r3, [pc, #204]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	4b30      	ldr	r3, [pc, #192]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4a2f      	ldr	r2, [pc, #188]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	61d3      	str	r3, [r2, #28]
 8002d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d9c:	2307      	movs	r3, #7
 8002d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	f107 031c 	add.w	r3, r7, #28
 8002da4:	4619      	mov	r1, r3
 8002da6:	4824      	ldr	r0, [pc, #144]	@ (8002e38 <HAL_UART_MspInit+0x100>)
 8002da8:	f000 ff86 	bl	8003cb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	2025      	movs	r0, #37	@ 0x25
 8002db2:	f000 fec0 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002db6:	2025      	movs	r0, #37	@ 0x25
 8002db8:	f000 fed9 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dbc:	e034      	b.n	8002e28 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e3c <HAL_UART_MspInit+0x104>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d12f      	bne.n	8002e28 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	4a19      	ldr	r2, [pc, #100]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd2:	6253      	str	r3, [r2, #36]	@ 0x24
 8002dd4:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de0:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	4a13      	ldr	r2, [pc, #76]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	61d3      	str	r3, [r2, #28]
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <HAL_UART_MspInit+0xfc>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002df8:	230c      	movs	r3, #12
 8002dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e08:	2307      	movs	r3, #7
 8002e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	4619      	mov	r1, r3
 8002e12:	4809      	ldr	r0, [pc, #36]	@ (8002e38 <HAL_UART_MspInit+0x100>)
 8002e14:	f000 ff50 	bl	8003cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2026      	movs	r0, #38	@ 0x26
 8002e1e:	f000 fe8a 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e22:	2026      	movs	r0, #38	@ 0x26
 8002e24:	f000 fea3 	bl	8003b6e <HAL_NVIC_EnableIRQ>
}
 8002e28:	bf00      	nop
 8002e2a:	3730      	adds	r7, #48	@ 0x30
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40013800 	.word	0x40013800
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40004400 	.word	0x40004400

08002e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <NMI_Handler+0x4>

08002e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <HardFault_Handler+0x4>

08002e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <MemManage_Handler+0x4>

08002e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <BusFault_Handler+0x4>

08002e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e64:	bf00      	nop
 8002e66:	e7fd      	b.n	8002e64 <UsageFault_Handler+0x4>

08002e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e90:	f000 f97e 	bl	8003190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002e9c:	4802      	ldr	r0, [pc, #8]	@ (8002ea8 <ADC1_IRQHandler+0x10>)
 8002e9e:	f000 fb07 	bl	80034b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200004f0 	.word	0x200004f0

08002eac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002eb0:	4802      	ldr	r0, [pc, #8]	@ (8002ebc <TIM2_IRQHandler+0x10>)
 8002eb2:	f004 fbd1 	bl	8007658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000598 	.word	0x20000598

08002ec0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ec4:	4802      	ldr	r0, [pc, #8]	@ (8002ed0 <I2C1_EV_IRQHandler+0x10>)
 8002ec6:	f001 fd21 	bl	800490c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000544 	.word	0x20000544

08002ed4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ed8:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <I2C1_ER_IRQHandler+0x10>)
 8002eda:	f001 fe6a 	bl	8004bb2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000544 	.word	0x20000544

08002ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002eec:	4802      	ldr	r0, [pc, #8]	@ (8002ef8 <USART1_IRQHandler+0x10>)
 8002eee:	f004 ff7b 	bl	8007de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200005d8 	.word	0x200005d8

08002efc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f00:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <USART2_IRQHandler+0x10>)
 8002f02:	f004 ff71 	bl	8007de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000620 	.word	0x20000620

08002f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return 1;
 8002f14:	2301      	movs	r3, #1
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <_kill>:

int _kill(int pid, int sig)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f28:	f007 f94c 	bl	800a1c4 <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2216      	movs	r2, #22
 8002f30:	601a      	str	r2, [r3, #0]
  return -1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <_exit>:

void _exit (int status)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f46:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ffe7 	bl	8002f1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <_exit+0x12>

08002f54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e00a      	b.n	8002f7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f66:	f3af 8000 	nop.w
 8002f6a:	4601      	mov	r1, r0
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	60ba      	str	r2, [r7, #8]
 8002f72:	b2ca      	uxtb	r2, r1
 8002f74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dbf0      	blt.n	8002f66 <_read+0x12>
  }

  return len;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e009      	b.n	8002fb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	60ba      	str	r2, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	dbf1      	blt.n	8002fa0 <_write+0x12>
  }
  return len;
 8002fbc:	687b      	ldr	r3, [r7, #4]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_close>:

int _close(int file)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fec:	605a      	str	r2, [r3, #4]
  return 0;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <_isatty>:

int _isatty(int file)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
	...

08003028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003030:	4a14      	ldr	r2, [pc, #80]	@ (8003084 <_sbrk+0x5c>)
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <_sbrk+0x60>)
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800303c:	4b13      	ldr	r3, [pc, #76]	@ (800308c <_sbrk+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <_sbrk+0x64>)
 8003046:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <_sbrk+0x68>)
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <_sbrk+0x64>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	429a      	cmp	r2, r3
 8003056:	d207      	bcs.n	8003068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003058:	f007 f8b4 	bl	800a1c4 <__errno>
 800305c:	4603      	mov	r3, r0
 800305e:	220c      	movs	r2, #12
 8003060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
 8003066:	e009      	b.n	800307c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003068:	4b08      	ldr	r3, [pc, #32]	@ (800308c <_sbrk+0x64>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800306e:	4b07      	ldr	r3, [pc, #28]	@ (800308c <_sbrk+0x64>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	4a05      	ldr	r2, [pc, #20]	@ (800308c <_sbrk+0x64>)
 8003078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20008000 	.word	0x20008000
 8003088:	00000400 	.word	0x00000400
 800308c:	20001028 	.word	0x20001028
 8003090:	20001180 	.word	0x20001180

08003094 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80030a0:	f7ff fff8 	bl	8003094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030a4:	480b      	ldr	r0, [pc, #44]	@ (80030d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80030a6:	490c      	ldr	r1, [pc, #48]	@ (80030d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80030a8:	4a0c      	ldr	r2, [pc, #48]	@ (80030dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ac:	e002      	b.n	80030b4 <LoopCopyDataInit>

080030ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b2:	3304      	adds	r3, #4

080030b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b8:	d3f9      	bcc.n	80030ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ba:	4a09      	ldr	r2, [pc, #36]	@ (80030e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030bc:	4c09      	ldr	r4, [pc, #36]	@ (80030e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c0:	e001      	b.n	80030c6 <LoopFillZerobss>

080030c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c4:	3204      	adds	r2, #4

080030c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c8:	d3fb      	bcc.n	80030c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030ca:	f007 f881 	bl	800a1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030ce:	f7ff f811 	bl	80020f4 <main>
  bx lr
 80030d2:	4770      	bx	lr
  ldr r0, =_sdata
 80030d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d8:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80030dc:	0800d10c 	.word	0x0800d10c
  ldr r2, =_sbss
 80030e0:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80030e4:	2000117c 	.word	0x2000117c

080030e8 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030e8:	e7fe      	b.n	80030e8 <COMP_IRQHandler>

080030ea <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030f4:	2003      	movs	r0, #3
 80030f6:	f000 fd13 	bl	8003b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030fa:	200f      	movs	r0, #15
 80030fc:	f000 f80e 	bl	800311c <HAL_InitTick>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	71fb      	strb	r3, [r7, #7]
 800310a:	e001      	b.n	8003110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800310c:	f7ff fd26 	bl	8002b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003110:	79fb      	ldrb	r3, [r7, #7]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003128:	4b16      	ldr	r3, [pc, #88]	@ (8003184 <HAL_InitTick+0x68>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d022      	beq.n	8003176 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003130:	4b15      	ldr	r3, [pc, #84]	@ (8003188 <HAL_InitTick+0x6c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <HAL_InitTick+0x68>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800313c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fd20 	bl	8003b8a <HAL_SYSTICK_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10f      	bne.n	8003170 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b0f      	cmp	r3, #15
 8003154:	d809      	bhi.n	800316a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003156:	2200      	movs	r2, #0
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	f04f 30ff 	mov.w	r0, #4294967295
 800315e:	f000 fcea 	bl	8003b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003162:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <HAL_InitTick+0x70>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e007      	b.n	800317a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	e004      	b.n	800317a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e001      	b.n	800317a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000180 	.word	0x20000180
 8003188:	20000178 	.word	0x20000178
 800318c:	2000017c 	.word	0x2000017c

08003190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003194:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <HAL_IncTick+0x1c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <HAL_IncTick+0x20>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4413      	add	r3, r2
 800319e:	4a03      	ldr	r2, [pc, #12]	@ (80031ac <HAL_IncTick+0x1c>)
 80031a0:	6013      	str	r3, [r2, #0]
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	2000102c 	.word	0x2000102c
 80031b0:	20000180 	.word	0x20000180

080031b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return uwTick;
 80031b8:	4b02      	ldr	r3, [pc, #8]	@ (80031c4 <HAL_GetTick+0x10>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	2000102c 	.word	0x2000102c

080031c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff fff0 	bl	80031b4 <HAL_GetTick>
 80031d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d004      	beq.n	80031ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e2:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <HAL_Delay+0x40>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ec:	bf00      	nop
 80031ee:	f7ff ffe1 	bl	80031b4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d8f7      	bhi.n	80031ee <HAL_Delay+0x26>
  {
  }
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000180 	.word	0x20000180

0800320c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08e      	sub	sp, #56	@ 0x38
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e127      	b.n	800347c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d115      	bne.n	8003266 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003248:	4b8e      	ldr	r3, [pc, #568]	@ (8003484 <HAL_ADC_Init+0x278>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a8d      	ldr	r2, [pc, #564]	@ (8003484 <HAL_ADC_Init+0x278>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	4b8b      	ldr	r3, [pc, #556]	@ (8003484 <HAL_ADC_Init+0x278>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fca9 	bl	8002bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 80ff 	bne.w	8003472 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003278:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800327c:	f023 0302 	bic.w	r3, r3, #2
 8003280:	f043 0202 	orr.w	r2, r3, #2
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8003288:	4b7f      	ldr	r3, [pc, #508]	@ (8003488 <HAL_ADC_Init+0x27c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	497c      	ldr	r1, [pc, #496]	@ (8003488 <HAL_ADC_Init+0x27c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80032a2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032aa:	4619      	mov	r1, r3
 80032ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032b0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80032c6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80032cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032d4:	4619      	mov	r1, r3
 80032d6:	2302      	movs	r3, #2
 80032d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80032ee:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80032f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032f2:	4313      	orrs	r3, r2
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d007      	beq.n	800330e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8003306:	4313      	orrs	r3, r2
 8003308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800330a:	4313      	orrs	r3, r2
 800330c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	d04f      	beq.n	80033bc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003322:	4313      	orrs	r3, r2
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800332e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6912      	ldr	r2, [r2, #16]
 8003334:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8003338:	d003      	beq.n	8003342 <HAL_ADC_Init+0x136>
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6912      	ldr	r2, [r2, #16]
 800333e:	2a01      	cmp	r2, #1
 8003340:	d102      	bne.n	8003348 <HAL_ADC_Init+0x13c>
 8003342:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003346:	e000      	b.n	800334a <HAL_ADC_Init+0x13e>
 8003348:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800334a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800334c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334e:	4313      	orrs	r3, r2
 8003350:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d125      	bne.n	80033a8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	d114      	bne.n	8003390 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	3b01      	subs	r3, #1
 800336c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003370:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	fa92 f2a2 	rbit	r2, r2
 8003378:	617a      	str	r2, [r7, #20]
  return result;
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	4093      	lsls	r3, r2
 8003384:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800338a:	4313      	orrs	r3, r2
 800338c:	633b      	str	r3, [r7, #48]	@ 0x30
 800338e:	e00b      	b.n	80033a8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a0:	f043 0201 	orr.w	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4b37      	ldr	r3, [pc, #220]	@ (800348c <HAL_ADC_Init+0x280>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	4b33      	ldr	r3, [pc, #204]	@ (8003490 <HAL_ADC_Init+0x284>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d8:	d003      	beq.n	80033e2 <HAL_ADC_Init+0x1d6>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d119      	bne.n	8003416 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 80033f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	fa92 f2a2 	rbit	r2, r2
 80033fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	fa03 f202 	lsl.w	r2, r3, r2
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
 8003414:	e007      	b.n	8003426 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b19      	ldr	r3, [pc, #100]	@ (8003494 <HAL_ADC_Init+0x288>)
 800342e:	4013      	ands	r3, r2
 8003430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003432:	429a      	cmp	r2, r3
 8003434:	d10b      	bne.n	800344e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003440:	f023 0303 	bic.w	r3, r3, #3
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800344c:	e014      	b.n	8003478 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	f023 0312 	bic.w	r3, r3, #18
 8003456:	f043 0210 	orr.w	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003470:	e002      	b.n	8003478 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003478:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800347c:	4618      	mov	r0, r3
 800347e:	3738      	adds	r7, #56	@ 0x38
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	40012700 	.word	0x40012700
 800348c:	fcfc16ff 	.word	0xfcfc16ff
 8003490:	c0fff18d 	.word	0xc0fff18d
 8003494:	bf80fffe 	.word	0xbf80fffe

08003498 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d04c      	beq.n	800356c <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d047      	beq.n	800356c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d12c      	bne.n	800355c <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003508:	2b00      	cmp	r3, #0
 800350a:	d127      	bne.n	800355c <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003524:	2b00      	cmp	r3, #0
 8003526:	d119      	bne.n	800355c <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0220 	bic.w	r2, r2, #32
 8003536:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f89e 	bl	800369e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f06f 0212 	mvn.w	r2, #18
 800356a:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003572:	2b00      	cmp	r3, #0
 8003574:	d05a      	beq.n	800362c <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d055      	beq.n	800362c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003590:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d13a      	bne.n	800361c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d12c      	bne.n	800361c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d125      	bne.n	800361c <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11e      	bne.n	800361c <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d119      	bne.n	800361c <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035f6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003614:	f043 0201 	orr.w	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f9a9 	bl	8003974 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 020c 	mvn.w	r2, #12
 800362a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d012      	beq.n	800365c <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003644:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f82f 	bl	80036b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0201 	mvn.w	r2, #1
 800365a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d017      	beq.n	8003696 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003674:	f043 0202 	orr.w	r2, r3, #2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0220 	mvn.w	r2, #32
 8003684:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f81b 	bl	80036c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0220 	mvn.w	r2, #32
 8003694:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x20>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e134      	b.n	800395e <HAL_ADC_ConfigChannel+0x28a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d81c      	bhi.n	800373e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	3b05      	subs	r3, #5
 8003716:	221f      	movs	r2, #31
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	4019      	ands	r1, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	3b05      	subs	r3, #5
 8003730:	fa00 f203 	lsl.w	r2, r0, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
 800373c:	e07e      	b.n	800383c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d81c      	bhi.n	8003780 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	3b23      	subs	r3, #35	@ 0x23
 8003758:	221f      	movs	r2, #31
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	4019      	ands	r1, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	3b23      	subs	r3, #35	@ 0x23
 8003772:	fa00 f203 	lsl.w	r2, r0, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800377e:	e05d      	b.n	800383c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b12      	cmp	r3, #18
 8003786:	d81c      	bhi.n	80037c2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	3b41      	subs	r3, #65	@ 0x41
 800379a:	221f      	movs	r2, #31
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	4019      	ands	r1, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	3b41      	subs	r3, #65	@ 0x41
 80037b4:	fa00 f203 	lsl.w	r2, r0, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	639a      	str	r2, [r3, #56]	@ 0x38
 80037c0:	e03c      	b.n	800383c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b18      	cmp	r3, #24
 80037c8:	d81c      	bhi.n	8003804 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	3b5f      	subs	r3, #95	@ 0x5f
 80037dc:	221f      	movs	r2, #31
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	4019      	ands	r1, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	3b5f      	subs	r3, #95	@ 0x5f
 80037f6:	fa00 f203 	lsl.w	r2, r0, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	635a      	str	r2, [r3, #52]	@ 0x34
 8003802:	e01b      	b.n	800383c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	3b7d      	subs	r3, #125	@ 0x7d
 8003816:	221f      	movs	r2, #31
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	4019      	ands	r1, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	3b7d      	subs	r3, #125	@ 0x7d
 8003830:	fa00 f203 	lsl.w	r2, r0, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b09      	cmp	r3, #9
 8003842:	d81a      	bhi.n	800387a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6959      	ldr	r1, [r3, #20]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	2207      	movs	r2, #7
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	4019      	ands	r1, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6898      	ldr	r0, [r3, #8]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	fa00 f203 	lsl.w	r2, r0, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	615a      	str	r2, [r3, #20]
 8003878:	e042      	b.n	8003900 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b13      	cmp	r3, #19
 8003880:	d81c      	bhi.n	80038bc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6919      	ldr	r1, [r3, #16]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	3b1e      	subs	r3, #30
 8003894:	2207      	movs	r2, #7
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	4019      	ands	r1, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6898      	ldr	r0, [r3, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	3b1e      	subs	r3, #30
 80038ae:	fa00 f203 	lsl.w	r2, r0, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	611a      	str	r2, [r3, #16]
 80038ba:	e021      	b.n	8003900 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b1a      	cmp	r3, #26
 80038c2:	d81c      	bhi.n	80038fe <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68d9      	ldr	r1, [r3, #12]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	3b3c      	subs	r3, #60	@ 0x3c
 80038d6:	2207      	movs	r2, #7
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	4019      	ands	r1, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6898      	ldr	r0, [r3, #8]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	3b3c      	subs	r3, #60	@ 0x3c
 80038f0:	fa00 f203 	lsl.w	r2, r0, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	e000      	b.n	8003900 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80038fe:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b10      	cmp	r3, #16
 8003906:	d003      	beq.n	8003910 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800390c:	2b11      	cmp	r3, #17
 800390e:	d121      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8003910:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <HAL_ADC_ConfigChannel+0x294>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11b      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800391c:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <HAL_ADC_ConfigChannel+0x294>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a11      	ldr	r2, [pc, #68]	@ (8003968 <HAL_ADC_ConfigChannel+0x294>)
 8003922:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003926:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b10      	cmp	r3, #16
 800392e:	d111      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003930:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <HAL_ADC_ConfigChannel+0x298>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0e      	ldr	r2, [pc, #56]	@ (8003970 <HAL_ADC_ConfigChannel+0x29c>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0c9a      	lsrs	r2, r3, #18
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003946:	e002      	b.n	800394e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	3b01      	subs	r3, #1
 800394c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f9      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	40012700 	.word	0x40012700
 800396c:	20000178 	.word	0x20000178
 8003970:	431bde83 	.word	0x431bde83

08003974 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
	...

08003988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003998:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <__NVIC_SetPriorityGrouping+0x44>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039a4:	4013      	ands	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ba:	4a04      	ldr	r2, [pc, #16]	@ (80039cc <__NVIC_SetPriorityGrouping+0x44>)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	60d3      	str	r3, [r2, #12]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d4:	4b04      	ldr	r3, [pc, #16]	@ (80039e8 <__NVIC_GetPriorityGrouping+0x18>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	f003 0307 	and.w	r3, r3, #7
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	db0b      	blt.n	8003a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	f003 021f 	and.w	r2, r3, #31
 8003a04:	4906      	ldr	r1, [pc, #24]	@ (8003a20 <__NVIC_EnableIRQ+0x34>)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	e000e100 	.word	0xe000e100

08003a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db0a      	blt.n	8003a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	490c      	ldr	r1, [pc, #48]	@ (8003a70 <__NVIC_SetPriority+0x4c>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	0112      	lsls	r2, r2, #4
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	440b      	add	r3, r1
 8003a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a4c:	e00a      	b.n	8003a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4908      	ldr	r1, [pc, #32]	@ (8003a74 <__NVIC_SetPriority+0x50>)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	3b04      	subs	r3, #4
 8003a5c:	0112      	lsls	r2, r2, #4
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	440b      	add	r3, r1
 8003a62:	761a      	strb	r2, [r3, #24]
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000e100 	.word	0xe000e100
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	@ 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f1c3 0307 	rsb	r3, r3, #7
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	bf28      	it	cs
 8003a96:	2304      	movcs	r3, #4
 8003a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d902      	bls.n	8003aa8 <NVIC_EncodePriority+0x30>
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3b03      	subs	r3, #3
 8003aa6:	e000      	b.n	8003aaa <NVIC_EncodePriority+0x32>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	401a      	ands	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	43d9      	mvns	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	4313      	orrs	r3, r2
         );
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3724      	adds	r7, #36	@ 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aec:	d301      	bcc.n	8003af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aee:	2301      	movs	r3, #1
 8003af0:	e00f      	b.n	8003b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <SysTick_Config+0x40>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003afa:	210f      	movs	r1, #15
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f7ff ff90 	bl	8003a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <SysTick_Config+0x40>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0a:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <SysTick_Config+0x40>)
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	e000e010 	.word	0xe000e010

08003b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff2d 	bl	8003988 <__NVIC_SetPriorityGrouping>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b48:	f7ff ff42 	bl	80039d0 <__NVIC_GetPriorityGrouping>
 8003b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	6978      	ldr	r0, [r7, #20]
 8003b54:	f7ff ff90 	bl	8003a78 <NVIC_EncodePriority>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff5f 	bl	8003a24 <__NVIC_SetPriority>
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff35 	bl	80039ec <__NVIC_EnableIRQ>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ffa2 	bl	8003adc <SysTick_Config>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d008      	beq.n	8003bcc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e022      	b.n	8003c12 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 020e 	bic.w	r2, r2, #14
 8003bda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	f003 021c 	and.w	r2, r3, #28
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfe:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d005      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2204      	movs	r2, #4
 8003c38:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e029      	b.n	8003c94 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 020e 	bic.w	r2, r2, #14
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	f003 021c 	and.w	r2, r3, #28
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c72:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
    }
  }
  return status;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003cac:	b2db      	uxtb	r3, r3
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cce:	e154      	b.n	8003f7a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8146 	beq.w	8003f74 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d130      	bne.n	8003d62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003d36:	2201      	movs	r2, #1
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0201 	and.w	r2, r3, #1
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d017      	beq.n	8003d9e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d123      	bne.n	8003df2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	6939      	ldr	r1, [r7, #16]
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80a0 	beq.w	8003f74 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e34:	4b58      	ldr	r3, [pc, #352]	@ (8003f98 <HAL_GPIO_Init+0x2e0>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4a57      	ldr	r2, [pc, #348]	@ (8003f98 <HAL_GPIO_Init+0x2e0>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6213      	str	r3, [r2, #32]
 8003e40:	4b55      	ldr	r3, [pc, #340]	@ (8003f98 <HAL_GPIO_Init+0x2e0>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e4c:	4a53      	ldr	r2, [pc, #332]	@ (8003f9c <HAL_GPIO_Init+0x2e4>)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3302      	adds	r3, #2
 8003e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	220f      	movs	r2, #15
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa0 <HAL_GPIO_Init+0x2e8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d019      	beq.n	8003eac <HAL_GPIO_Init+0x1f4>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa4 <HAL_GPIO_Init+0x2ec>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_GPIO_Init+0x1f0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a49      	ldr	r2, [pc, #292]	@ (8003fa8 <HAL_GPIO_Init+0x2f0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00d      	beq.n	8003ea4 <HAL_GPIO_Init+0x1ec>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a48      	ldr	r2, [pc, #288]	@ (8003fac <HAL_GPIO_Init+0x2f4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <HAL_GPIO_Init+0x1e8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a47      	ldr	r2, [pc, #284]	@ (8003fb0 <HAL_GPIO_Init+0x2f8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_GPIO_Init+0x1e4>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e008      	b.n	8003eae <HAL_GPIO_Init+0x1f6>
 8003e9c:	2305      	movs	r3, #5
 8003e9e:	e006      	b.n	8003eae <HAL_GPIO_Init+0x1f6>
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e004      	b.n	8003eae <HAL_GPIO_Init+0x1f6>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e002      	b.n	8003eae <HAL_GPIO_Init+0x1f6>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_GPIO_Init+0x1f6>
 8003eac:	2300      	movs	r3, #0
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	f002 0203 	and.w	r2, r2, #3
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	4093      	lsls	r3, r2
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ebe:	4937      	ldr	r1, [pc, #220]	@ (8003f9c <HAL_GPIO_Init+0x2e4>)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ecc:	4b39      	ldr	r3, [pc, #228]	@ (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ef0:	4a30      	ldr	r2, [pc, #192]	@ (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f1a:	4a26      	ldr	r2, [pc, #152]	@ (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f20:	4b24      	ldr	r3, [pc, #144]	@ (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f44:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f6e:	4a11      	ldr	r2, [pc, #68]	@ (8003fb4 <HAL_GPIO_Init+0x2fc>)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	3301      	adds	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f47f aea3 	bne.w	8003cd0 <HAL_GPIO_Init+0x18>
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	40020400 	.word	0x40020400
 8003fa8:	40020800 	.word	0x40020800
 8003fac:	40020c00 	.word	0x40020c00
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40010400 	.word	0x40010400

08003fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fc8:	787b      	ldrb	r3, [r7, #1]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003fd4:	e003      	b.n	8003fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	041a      	lsls	r2, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	619a      	str	r2, [r3, #24]
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4013      	ands	r3, r2
 8004000:	041a      	lsls	r2, r3, #16
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	43d9      	mvns	r1, r3
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	400b      	ands	r3, r1
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
	...

0800401c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e12b      	b.n	8004286 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fe fe00 	bl	8002c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2224      	movs	r2, #36	@ 0x24
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800406e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800407e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004080:	f003 f9d0 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
 8004084:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4a81      	ldr	r2, [pc, #516]	@ (8004290 <HAL_I2C_Init+0x274>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d807      	bhi.n	80040a0 <HAL_I2C_Init+0x84>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a80      	ldr	r2, [pc, #512]	@ (8004294 <HAL_I2C_Init+0x278>)
 8004094:	4293      	cmp	r3, r2
 8004096:	bf94      	ite	ls
 8004098:	2301      	movls	r3, #1
 800409a:	2300      	movhi	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e006      	b.n	80040ae <HAL_I2C_Init+0x92>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a7d      	ldr	r2, [pc, #500]	@ (8004298 <HAL_I2C_Init+0x27c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	bf94      	ite	ls
 80040a8:	2301      	movls	r3, #1
 80040aa:	2300      	movhi	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0e7      	b.n	8004286 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a78      	ldr	r2, [pc, #480]	@ (800429c <HAL_I2C_Init+0x280>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0c9b      	lsrs	r3, r3, #18
 80040c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a6a      	ldr	r2, [pc, #424]	@ (8004290 <HAL_I2C_Init+0x274>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d802      	bhi.n	80040f0 <HAL_I2C_Init+0xd4>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3301      	adds	r3, #1
 80040ee:	e009      	b.n	8004104 <HAL_I2C_Init+0xe8>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	4a69      	ldr	r2, [pc, #420]	@ (80042a0 <HAL_I2C_Init+0x284>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	099b      	lsrs	r3, r3, #6
 8004102:	3301      	adds	r3, #1
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	430b      	orrs	r3, r1
 800410a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004116:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	495c      	ldr	r1, [pc, #368]	@ (8004290 <HAL_I2C_Init+0x274>)
 8004120:	428b      	cmp	r3, r1
 8004122:	d819      	bhi.n	8004158 <HAL_I2C_Init+0x13c>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e59      	subs	r1, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004138:	400b      	ands	r3, r1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_I2C_Init+0x138>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1e59      	subs	r1, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fbb1 f3f3 	udiv	r3, r1, r3
 800414c:	3301      	adds	r3, #1
 800414e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004152:	e051      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 8004154:	2304      	movs	r3, #4
 8004156:	e04f      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d111      	bne.n	8004184 <HAL_I2C_Init+0x168>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e58      	subs	r0, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	440b      	add	r3, r1
 800416e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e012      	b.n	80041aa <HAL_I2C_Init+0x18e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1e58      	subs	r0, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	0099      	lsls	r1, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	fbb0 f3f3 	udiv	r3, r0, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Init+0x196>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10e      	bne.n	80041d8 <HAL_I2C_Init+0x1bc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1e58      	subs	r0, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	440b      	add	r3, r1
 80041c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Init+0x1dc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1e58      	subs	r0, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	0099      	lsls	r1, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ee:	3301      	adds	r3, #1
 80041f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	6809      	ldr	r1, [r1, #0]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004226:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6911      	ldr	r1, [r2, #16]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68d2      	ldr	r2, [r2, #12]
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	430b      	orrs	r3, r1
 800423a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	000186a0 	.word	0x000186a0
 8004294:	001e847f 	.word	0x001e847f
 8004298:	003d08ff 	.word	0x003d08ff
 800429c:	431bde83 	.word	0x431bde83
 80042a0:	10624dd3 	.word	0x10624dd3

080042a4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b6:	2b80      	cmp	r3, #128	@ 0x80
 80042b8:	d103      	bne.n	80042c2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
  }
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	461a      	mov	r2, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	817b      	strh	r3, [r7, #10]
 80042de:	460b      	mov	r3, r1
 80042e0:	813b      	strh	r3, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042e6:	f7fe ff65 	bl	80031b4 <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	f040 80d9 	bne.w	80044ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	2319      	movs	r3, #25
 8004300:	2201      	movs	r2, #1
 8004302:	496d      	ldr	r1, [pc, #436]	@ (80044b8 <HAL_I2C_Mem_Write+0x1ec>)
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f002 f8df 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
 8004312:	e0cc      	b.n	80044ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_I2C_Mem_Write+0x56>
 800431e:	2302      	movs	r3, #2
 8004320:	e0c5      	b.n	80044ae <HAL_I2C_Mem_Write+0x1e2>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d007      	beq.n	8004348 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004356:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2221      	movs	r2, #33	@ 0x21
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2240      	movs	r2, #64	@ 0x40
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a3a      	ldr	r2, [r7, #32]
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004378:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a4d      	ldr	r2, [pc, #308]	@ (80044bc <HAL_I2C_Mem_Write+0x1f0>)
 8004388:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800438a:	88f8      	ldrh	r0, [r7, #6]
 800438c:	893a      	ldrh	r2, [r7, #8]
 800438e:	8979      	ldrh	r1, [r7, #10]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	4603      	mov	r3, r0
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f001 fe6e 	bl	800607c <I2C_RequestMemoryWrite>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d052      	beq.n	800444c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e081      	b.n	80044ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f002 f9a4 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00d      	beq.n	80043d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d107      	bne.n	80043d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e06b      	b.n	80044ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b04      	cmp	r3, #4
 8004412:	d11b      	bne.n	800444c <HAL_I2C_Mem_Write+0x180>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	d017      	beq.n	800444c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1aa      	bne.n	80043aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f002 f997 	bl	800678c <I2C_WaitOnBTFFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	2b04      	cmp	r3, #4
 800446a:	d107      	bne.n	800447c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800447a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e016      	b.n	80044ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800448e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	e000      	b.n	80044ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	00100002 	.word	0x00100002
 80044bc:	ffff0000 	.word	0xffff0000

080044c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	@ 0x30
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	817b      	strh	r3, [r7, #10]
 80044d2:	460b      	mov	r3, r1
 80044d4:	813b      	strh	r3, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044da:	f7fe fe6b 	bl	80031b4 <HAL_GetTick>
 80044de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	f040 8208 	bne.w	80048fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	2319      	movs	r3, #25
 80044f4:	2201      	movs	r2, #1
 80044f6:	497b      	ldr	r1, [pc, #492]	@ (80046e4 <HAL_I2C_Mem_Read+0x224>)
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f001 ffe5 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
 8004506:	e1fb      	b.n	8004900 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_I2C_Mem_Read+0x56>
 8004512:	2302      	movs	r3, #2
 8004514:	e1f4      	b.n	8004900 <HAL_I2C_Mem_Read+0x440>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	d007      	beq.n	800453c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800454a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2222      	movs	r2, #34	@ 0x22
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2240      	movs	r2, #64	@ 0x40
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004566:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800456c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a5b      	ldr	r2, [pc, #364]	@ (80046e8 <HAL_I2C_Mem_Read+0x228>)
 800457c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800457e:	88f8      	ldrh	r0, [r7, #6]
 8004580:	893a      	ldrh	r2, [r7, #8]
 8004582:	8979      	ldrh	r1, [r7, #10]
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	4603      	mov	r3, r0
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f001 fe0a 	bl	80061a8 <I2C_RequestMemoryRead>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e1b0      	b.n	8004900 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d113      	bne.n	80045ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a6:	2300      	movs	r3, #0
 80045a8:	623b      	str	r3, [r7, #32]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	623b      	str	r3, [r7, #32]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	623b      	str	r3, [r7, #32]
 80045ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e184      	b.n	80048d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d11b      	bne.n	800460e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e164      	b.n	80048d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004612:	2b02      	cmp	r3, #2
 8004614:	d11b      	bne.n	800464e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004624:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004634:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	e144      	b.n	80048d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004664:	e138      	b.n	80048d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466a:	2b03      	cmp	r3, #3
 800466c:	f200 80f1 	bhi.w	8004852 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004674:	2b01      	cmp	r3, #1
 8004676:	d123      	bne.n	80046c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f002 f8ff 	bl	8006880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e139      	b.n	8004900 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046be:	e10b      	b.n	80048d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d14e      	bne.n	8004766 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ce:	2200      	movs	r2, #0
 80046d0:	4906      	ldr	r1, [pc, #24]	@ (80046ec <HAL_I2C_Mem_Read+0x22c>)
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f001 fef8 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e10e      	b.n	8004900 <HAL_I2C_Mem_Read+0x440>
 80046e2:	bf00      	nop
 80046e4:	00100002 	.word	0x00100002
 80046e8:	ffff0000 	.word	0xffff0000
 80046ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004764:	e0b8      	b.n	80048d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	2200      	movs	r2, #0
 800476e:	4966      	ldr	r1, [pc, #408]	@ (8004908 <HAL_I2C_Mem_Read+0x448>)
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f001 fea9 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0bf      	b.n	8004900 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800478e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c8:	2200      	movs	r2, #0
 80047ca:	494f      	ldr	r1, [pc, #316]	@ (8004908 <HAL_I2C_Mem_Read+0x448>)
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f001 fe7b 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e091      	b.n	8004900 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004850:	e042      	b.n	80048d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004854:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f002 f812 	bl	8006880 <I2C_WaitOnRXNEFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e04c      	b.n	8004900 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d118      	bne.n	80048d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f47f aec2 	bne.w	8004666 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e000      	b.n	8004900 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048fe:	2302      	movs	r3, #2
  }
}
 8004900:	4618      	mov	r0, r3
 8004902:	3728      	adds	r7, #40	@ 0x28
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	00010004 	.word	0x00010004

0800490c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800492c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004934:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b10      	cmp	r3, #16
 800493a:	d003      	beq.n	8004944 <HAL_I2C_EV_IRQHandler+0x38>
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	f040 80b1 	bne.w	8004aa6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10d      	bne.n	800497a <HAL_I2C_EV_IRQHandler+0x6e>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004964:	d003      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x62>
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800496c:	d101      	bne.n	8004972 <HAL_I2C_EV_IRQHandler+0x66>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_I2C_EV_IRQHandler+0x68>
 8004972:	2300      	movs	r3, #0
 8004974:	2b01      	cmp	r3, #1
 8004976:	f000 8114 	beq.w	8004ba2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <HAL_I2C_EV_IRQHandler+0x90>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f002 f801 	bl	8006996 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fd58 	bl	800544a <I2C_Master_SB>
 800499a:	e083      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_I2C_EV_IRQHandler+0xac>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fdcf 	bl	8005554 <I2C_Master_ADD10>
 80049b6:	e075      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_I2C_EV_IRQHandler+0xc8>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fdea 	bl	80055a6 <I2C_Master_ADDR>
 80049d2:	e067      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d036      	beq.n	8004a4c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ec:	f000 80db 	beq.w	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00d      	beq.n	8004a16 <HAL_I2C_EV_IRQHandler+0x10a>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_I2C_EV_IRQHandler+0x10a>
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9cc 	bl	8004dac <I2C_MasterTransmit_TXE>
 8004a14:	e046      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80c2 	beq.w	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80bc 	beq.w	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	2b21      	cmp	r3, #33	@ 0x21
 8004a32:	d103      	bne.n	8004a3c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fa55 	bl	8004ee4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a3a:	e0b4      	b.n	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	2b40      	cmp	r3, #64	@ 0x40
 8004a40:	f040 80b1 	bne.w	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fac3 	bl	8004fd0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a4a:	e0ac      	b.n	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a5a:	f000 80a4 	beq.w	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <HAL_I2C_EV_IRQHandler+0x178>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_I2C_EV_IRQHandler+0x178>
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d103      	bne.n	8004a84 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fb3f 	bl	8005100 <I2C_MasterReceive_RXNE>
 8004a82:	e00f      	b.n	8004aa4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 808b 	beq.w	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8085 	beq.w	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fbea 	bl	8005276 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aa2:	e080      	b.n	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004aa4:	e07f      	b.n	8004ba6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d004      	beq.n	8004ab8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	e007      	b.n	8004ac8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00c      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004aec:	69b9      	ldr	r1, [r7, #24]
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 ffa5 	bl	8005a3e <I2C_Slave_ADDR>
 8004af4:	e05a      	b.n	8004bac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_I2C_EV_IRQHandler+0x206>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 ffe0 	bl	8005ad0 <I2C_Slave_STOPF>
 8004b10:	e04c      	b.n	8004bac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b12:	7bbb      	ldrb	r3, [r7, #14]
 8004b14:	2b21      	cmp	r3, #33	@ 0x21
 8004b16:	d002      	beq.n	8004b1e <HAL_I2C_EV_IRQHandler+0x212>
 8004b18:	7bbb      	ldrb	r3, [r7, #14]
 8004b1a:	2b29      	cmp	r3, #41	@ 0x29
 8004b1c:	d120      	bne.n	8004b60 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <HAL_I2C_EV_IRQHandler+0x238>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <HAL_I2C_EV_IRQHandler+0x238>
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d103      	bne.n	8004b44 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fec2 	bl	80058c6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b42:	e032      	b.n	8004baa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d02d      	beq.n	8004baa <HAL_I2C_EV_IRQHandler+0x29e>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d028      	beq.n	8004baa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fef1 	bl	8005940 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b5e:	e024      	b.n	8004baa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <HAL_I2C_EV_IRQHandler+0x27a>
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_I2C_EV_IRQHandler+0x27a>
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d103      	bne.n	8004b86 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fefe 	bl	8005980 <I2C_SlaveReceive_RXNE>
 8004b84:	e012      	b.n	8004bac <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <HAL_I2C_EV_IRQHandler+0x2a0>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 ff2e 	bl	80059fc <I2C_SlaveReceive_BTF>
 8004ba0:	e004      	b.n	8004bac <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004baa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b08a      	sub	sp, #40	@ 0x28
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bd4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00d      	beq.n	8004bfc <HAL_I2C_ER_IRQHandler+0x4a>
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004bfa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <HAL_I2C_ER_IRQHandler+0x70>
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004c20:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d03e      	beq.n	8004caa <HAL_I2C_ER_IRQHandler+0xf8>
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d039      	beq.n	8004caa <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004c36:	7efb      	ldrb	r3, [r7, #27]
 8004c38:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c48:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004c50:	7ebb      	ldrb	r3, [r7, #26]
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d112      	bne.n	8004c7c <HAL_I2C_ER_IRQHandler+0xca>
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10f      	bne.n	8004c7c <HAL_I2C_ER_IRQHandler+0xca>
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	2b21      	cmp	r3, #33	@ 0x21
 8004c60:	d008      	beq.n	8004c74 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b29      	cmp	r3, #41	@ 0x29
 8004c66:	d005      	beq.n	8004c74 <HAL_I2C_ER_IRQHandler+0xc2>
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	2b28      	cmp	r3, #40	@ 0x28
 8004c6c:	d106      	bne.n	8004c7c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b21      	cmp	r3, #33	@ 0x21
 8004c72:	d103      	bne.n	8004c7c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 f85b 	bl	8005d30 <I2C_Slave_AF>
 8004c7a:	e016      	b.n	8004caa <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c84:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	f043 0304 	orr.w	r3, r3, #4
 8004c8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c8e:	7efb      	ldrb	r3, [r7, #27]
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d002      	beq.n	8004c9a <HAL_I2C_ER_IRQHandler+0xe8>
 8004c94:	7efb      	ldrb	r3, [r7, #27]
 8004c96:	2b40      	cmp	r3, #64	@ 0x40
 8004c98:	d107      	bne.n	8004caa <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_I2C_ER_IRQHandler+0x11e>
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	f043 0308 	orr.w	r3, r3, #8
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004cce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d008      	beq.n	8004ce8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f001 f898 	bl	8005e18 <I2C_ITError>
  }
}
 8004ce8:	bf00      	nop
 8004cea:	3728      	adds	r7, #40	@ 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
 8004d44:	4613      	mov	r3, r2
 8004d46:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d150      	bne.n	8004e74 <I2C_MasterTransmit_TXE+0xc8>
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b21      	cmp	r3, #33	@ 0x21
 8004dd6:	d14d      	bne.n	8004e74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d01d      	beq.n	8004e1a <I2C_MasterTransmit_TXE+0x6e>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d01a      	beq.n	8004e1a <I2C_MasterTransmit_TXE+0x6e>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004dea:	d016      	beq.n	8004e1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dfa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2211      	movs	r2, #17
 8004e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff6c 	bl	8004cf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e18:	e060      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b40      	cmp	r3, #64	@ 0x40
 8004e52:	d107      	bne.n	8004e64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff81 	bl	8004d64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e62:	e03b      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ff3f 	bl	8004cf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e72:	e033      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b21      	cmp	r3, #33	@ 0x21
 8004e78:	d005      	beq.n	8004e86 <I2C_MasterTransmit_TXE+0xda>
 8004e7a:	7bbb      	ldrb	r3, [r7, #14]
 8004e7c:	2b40      	cmp	r3, #64	@ 0x40
 8004e7e:	d12d      	bne.n	8004edc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b22      	cmp	r3, #34	@ 0x22
 8004e84:	d12a      	bne.n	8004edc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ea0:	e01c      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b40      	cmp	r3, #64	@ 0x40
 8004eac:	d103      	bne.n	8004eb6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f88e 	bl	8004fd0 <I2C_MemoryTransmit_TXE_BTF>
}
 8004eb4:	e012      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	781a      	ldrb	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004eda:	e7ff      	b.n	8004edc <I2C_MasterTransmit_TXE+0x130>
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b21      	cmp	r3, #33	@ 0x21
 8004efc:	d164      	bne.n	8004fc8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d012      	beq.n	8004f2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f2c:	e04c      	b.n	8004fc8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d01d      	beq.n	8004f70 <I2C_MasterTransmit_BTF+0x8c>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d01a      	beq.n	8004f70 <I2C_MasterTransmit_BTF+0x8c>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f40:	d016      	beq.n	8004f70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2211      	movs	r2, #17
 8004f56:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fec1 	bl	8004cf0 <HAL_I2C_MasterTxCpltCallback>
}
 8004f6e:	e02b      	b.n	8004fc8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b40      	cmp	r3, #64	@ 0x40
 8004fa8:	d107      	bne.n	8004fba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fed6 	bl	8004d64 <HAL_I2C_MemTxCpltCallback>
}
 8004fb8:	e006      	b.n	8004fc8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fe94 	bl	8004cf0 <HAL_I2C_MasterTxCpltCallback>
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11d      	bne.n	8005024 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10b      	bne.n	8005008 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005006:	e077      	b.n	80050f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500c:	b29b      	uxth	r3, r3
 800500e:	121b      	asrs	r3, r3, #8
 8005010:	b2da      	uxtb	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005022:	e069      	b.n	80050f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10b      	bne.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005030:	b2da      	uxtb	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005042:	e059      	b.n	80050f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005048:	2b02      	cmp	r3, #2
 800504a:	d152      	bne.n	80050f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b22      	cmp	r3, #34	@ 0x22
 8005050:	d10d      	bne.n	800506e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005060:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800506c:	e044      	b.n	80050f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d015      	beq.n	80050a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b21      	cmp	r3, #33	@ 0x21
 800507c:	d112      	bne.n	80050a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80050a2:	e029      	b.n	80050f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d124      	bne.n	80050f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	2b21      	cmp	r3, #33	@ 0x21
 80050b2:	d121      	bne.n	80050f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff fe3a 	bl	8004d64 <HAL_I2C_MemTxCpltCallback>
}
 80050f0:	e002      	b.n	80050f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff f8d6 	bl	80042a4 <I2C_Flush_DR>
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b22      	cmp	r3, #34	@ 0x22
 8005112:	f040 80ac 	bne.w	800526e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d921      	bls.n	8005168 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b03      	cmp	r3, #3
 8005152:	f040 808c 	bne.w	800526e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005164:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005166:	e082      	b.n	800526e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	2b02      	cmp	r3, #2
 800516e:	d075      	beq.n	800525c <I2C_MasterReceive_RXNE+0x15c>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d002      	beq.n	800517c <I2C_MasterReceive_RXNE+0x7c>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d16f      	bne.n	800525c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 fb4d 	bl	800681c <I2C_WaitOnSTOPRequestThroughIT>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d142      	bne.n	800520e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005196:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b40      	cmp	r3, #64	@ 0x40
 80051e0:	d10a      	bne.n	80051f8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff fdc0 	bl	8004d76 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051f6:	e03a      	b.n	800526e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2212      	movs	r2, #18
 8005204:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fd7b 	bl	8004d02 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800520c:	e02f      	b.n	800526e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800521c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fd97 	bl	8004d88 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800525a:	e008      	b.n	800526e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800526a:	605a      	str	r2, [r3, #4]
}
 800526c:	e7ff      	b.n	800526e <I2C_MasterReceive_RXNE+0x16e>
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b04      	cmp	r3, #4
 800528c:	d11b      	bne.n	80052c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80052c4:	e0bd      	b.n	8005442 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d129      	bne.n	8005324 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d00a      	beq.n	80052fc <I2C_MasterReceive_BTF+0x86>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d007      	beq.n	80052fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005322:	e08e      	b.n	8005442 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d176      	bne.n	800541c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d002      	beq.n	800533a <I2C_MasterReceive_BTF+0xc4>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b10      	cmp	r3, #16
 8005338:	d108      	bne.n	800534c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e019      	b.n	8005380 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b04      	cmp	r3, #4
 8005350:	d002      	beq.n	8005358 <I2C_MasterReceive_BTF+0xe2>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d108      	bne.n	800536a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e00a      	b.n	8005380 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b10      	cmp	r3, #16
 800536e:	d007      	beq.n	8005380 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800537e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80053da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b40      	cmp	r3, #64	@ 0x40
 80053ee:	d10a      	bne.n	8005406 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff fcb9 	bl	8004d76 <HAL_I2C_MemRxCpltCallback>
}
 8005404:	e01d      	b.n	8005442 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2212      	movs	r2, #18
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fc74 	bl	8004d02 <HAL_I2C_MasterRxCpltCallback>
}
 800541a:	e012      	b.n	8005442 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	d117      	bne.n	800548e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	b2db      	uxtb	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005476:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005478:	e067      	b.n	800554a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	b2da      	uxtb	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	611a      	str	r2, [r3, #16]
}
 800548c:	e05d      	b.n	800554a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005496:	d133      	bne.n	8005500 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b21      	cmp	r3, #33	@ 0x21
 80054a2:	d109      	bne.n	80054b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054b4:	611a      	str	r2, [r3, #16]
 80054b6:	e008      	b.n	80054ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <I2C_Master_SB+0x92>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d108      	bne.n	80054ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d032      	beq.n	800554a <I2C_Master_SB+0x100>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02d      	beq.n	800554a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054fc:	605a      	str	r2, [r3, #4]
}
 80054fe:	e024      	b.n	800554a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10e      	bne.n	8005526 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550c:	b29b      	uxth	r3, r3
 800550e:	11db      	asrs	r3, r3, #7
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0306 	and.w	r3, r3, #6
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f063 030f 	orn	r3, r3, #15
 800551c:	b2da      	uxtb	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	611a      	str	r2, [r3, #16]
}
 8005524:	e011      	b.n	800554a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10d      	bne.n	800554a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005532:	b29b      	uxth	r3, r3
 8005534:	11db      	asrs	r3, r3, #7
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f003 0306 	and.w	r3, r3, #6
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f063 030e 	orn	r3, r3, #14
 8005542:	b2da      	uxtb	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	611a      	str	r2, [r3, #16]
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005560:	b2da      	uxtb	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <I2C_Master_ADD10+0x26>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d108      	bne.n	800558c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <I2C_Master_ADD10+0x48>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800559a:	605a      	str	r2, [r3, #4]
  }
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr

080055a6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b091      	sub	sp, #68	@ 0x44
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b22      	cmp	r3, #34	@ 0x22
 80055ce:	f040 8169 	bne.w	80058a4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <I2C_Master_ADDR+0x54>
 80055da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80055de:	2b40      	cmp	r3, #64	@ 0x40
 80055e0:	d10b      	bne.n	80055fa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e2:	2300      	movs	r3, #0
 80055e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	e160      	b.n	80058bc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d11d      	bne.n	800563e <I2C_Master_ADDR+0x98>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800560a:	d118      	bne.n	800563e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560c:	2300      	movs	r3, #0
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005630:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	651a      	str	r2, [r3, #80]	@ 0x50
 800563c:	e13e      	b.n	80058bc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d113      	bne.n	8005670 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005648:	2300      	movs	r3, #0
 800564a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e115      	b.n	800589c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b01      	cmp	r3, #1
 8005678:	f040 808a 	bne.w	8005790 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005682:	d137      	bne.n	80056f4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005692:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800569e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a2:	d113      	bne.n	80056cc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b4:	2300      	movs	r3, #0
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	e0e7      	b.n	800589c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056cc:	2300      	movs	r3, #0
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e0d3      	b.n	800589c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d02e      	beq.n	8005758 <I2C_Master_ADDR+0x1b2>
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d02b      	beq.n	8005758 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005702:	2b12      	cmp	r3, #18
 8005704:	d102      	bne.n	800570c <I2C_Master_ADDR+0x166>
 8005706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005708:	2b01      	cmp	r3, #1
 800570a:	d125      	bne.n	8005758 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800570c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570e:	2b04      	cmp	r3, #4
 8005710:	d00e      	beq.n	8005730 <I2C_Master_ADDR+0x18a>
 8005712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005714:	2b02      	cmp	r3, #2
 8005716:	d00b      	beq.n	8005730 <I2C_Master_ADDR+0x18a>
 8005718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571a:	2b10      	cmp	r3, #16
 800571c:	d008      	beq.n	8005730 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e007      	b.n	8005740 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800573e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	e0a1      	b.n	800589c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005766:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005768:	2300      	movs	r3, #0
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e085      	b.n	800589c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d14d      	bne.n	8005836 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800579a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579c:	2b04      	cmp	r3, #4
 800579e:	d016      	beq.n	80057ce <I2C_Master_ADDR+0x228>
 80057a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d013      	beq.n	80057ce <I2C_Master_ADDR+0x228>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d010      	beq.n	80057ce <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e007      	b.n	80057de <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057dc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ec:	d117      	bne.n	800581e <I2C_Master_ADDR+0x278>
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057f4:	d00b      	beq.n	800580e <I2C_Master_ADDR+0x268>
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d008      	beq.n	800580e <I2C_Master_ADDR+0x268>
 80057fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d005      	beq.n	800580e <I2C_Master_ADDR+0x268>
 8005802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005804:	2b10      	cmp	r3, #16
 8005806:	d002      	beq.n	800580e <I2C_Master_ADDR+0x268>
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	2b20      	cmp	r3, #32
 800580c:	d107      	bne.n	800581e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800581c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	e032      	b.n	800589c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005844:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005854:	d117      	bne.n	8005886 <I2C_Master_ADDR+0x2e0>
 8005856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005858:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800585c:	d00b      	beq.n	8005876 <I2C_Master_ADDR+0x2d0>
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	2b01      	cmp	r3, #1
 8005862:	d008      	beq.n	8005876 <I2C_Master_ADDR+0x2d0>
 8005864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005866:	2b08      	cmp	r3, #8
 8005868:	d005      	beq.n	8005876 <I2C_Master_ADDR+0x2d0>
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	2b10      	cmp	r3, #16
 800586e:	d002      	beq.n	8005876 <I2C_Master_ADDR+0x2d0>
 8005870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005872:	2b20      	cmp	r3, #32
 8005874:	d107      	bne.n	8005886 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005884:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005886:	2300      	movs	r3, #0
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80058a2:	e00b      	b.n	80058bc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
}
 80058ba:	e7ff      	b.n	80058bc <I2C_Master_ADDR+0x316>
 80058bc:	bf00      	nop
 80058be:	3744      	adds	r7, #68	@ 0x44
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d02b      	beq.n	8005938 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d114      	bne.n	8005938 <I2C_SlaveTransmit_TXE+0x72>
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b29      	cmp	r3, #41	@ 0x29
 8005912:	d111      	bne.n	8005938 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005922:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2221      	movs	r2, #33	@ 0x21
 8005928:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2228      	movs	r2, #40	@ 0x28
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff f9ee 	bl	8004d14 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d02c      	beq.n	80059f4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d114      	bne.n	80059f4 <I2C_SlaveReceive_RXNE+0x74>
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80059ce:	d111      	bne.n	80059f4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059de:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2222      	movs	r2, #34	@ 0x22
 80059e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2228      	movs	r2, #40	@ 0x28
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff f999 	bl	8004d26 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d012      	beq.n	8005a34 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr

08005a3e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a58:	2b28      	cmp	r3, #40	@ 0x28
 8005a5a:	d125      	bne.n	8005aa8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a6a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005a76:	2301      	movs	r3, #1
 8005a78:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	81bb      	strh	r3, [r7, #12]
 8005a8a:	e002      	b.n	8005a92 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a9a:	89ba      	ldrh	r2, [r7, #12]
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff f949 	bl	8004d38 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005aa6:	e00e      	b.n	8005ac6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60bb      	str	r3, [r7, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	60bb      	str	r3, [r7, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ade:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005aee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005af0:	2300      	movs	r3, #0
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b1c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b2c:	d172      	bne.n	8005c14 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	2b22      	cmp	r3, #34	@ 0x22
 8005b32:	d002      	beq.n	8005b3a <I2C_Slave_STOPF+0x6a>
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b38:	d135      	bne.n	8005ba6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	f043 0204 	orr.w	r2, r3, #4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe f893 	bl	8003c9e <HAL_DMA_GetState>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d049      	beq.n	8005c12 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	4a69      	ldr	r2, [pc, #420]	@ (8005d28 <I2C_Slave_STOPF+0x258>)
 8005b84:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe f846 	bl	8003c1c <HAL_DMA_Abort_IT>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d03d      	beq.n	8005c12 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ba4:	e035      	b.n	8005c12 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d005      	beq.n	8005bca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	f043 0204 	orr.w	r2, r3, #4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe f85d 	bl	8003c9e <HAL_DMA_GetState>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d014      	beq.n	8005c14 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bee:	4a4e      	ldr	r2, [pc, #312]	@ (8005d28 <I2C_Slave_STOPF+0x258>)
 8005bf0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe f810 	bl	8003c1c <HAL_DMA_Abort_IT>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
 8005c10:	e000      	b.n	8005c14 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c12:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d03e      	beq.n	8005c9c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d112      	bne.n	8005c52 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5c:	2b40      	cmp	r3, #64	@ 0x40
 8005c5e:	d112      	bne.n	8005c86 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	f043 0204 	orr.w	r2, r3, #4
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f8b7 	bl	8005e18 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005caa:	e039      	b.n	8005d20 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cb0:	d109      	bne.n	8005cc6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2228      	movs	r2, #40	@ 0x28
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff f830 	bl	8004d26 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b28      	cmp	r3, #40	@ 0x28
 8005cd0:	d111      	bne.n	8005cf6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a15      	ldr	r2, [pc, #84]	@ (8005d2c <I2C_Slave_STOPF+0x25c>)
 8005cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff f82f 	bl	8004d52 <HAL_I2C_ListenCpltCallback>
}
 8005cf4:	e014      	b.n	8005d20 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfa:	2b22      	cmp	r3, #34	@ 0x22
 8005cfc:	d002      	beq.n	8005d04 <I2C_Slave_STOPF+0x234>
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b22      	cmp	r3, #34	@ 0x22
 8005d02:	d10d      	bne.n	8005d20 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff f803 	bl	8004d26 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	08006379 	.word	0x08006379
 8005d2c:	ffff0000 	.word	0xffff0000

08005d30 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d002      	beq.n	8005d52 <I2C_Slave_AF+0x22>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d129      	bne.n	8005da6 <I2C_Slave_AF+0x76>
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	2b28      	cmp	r3, #40	@ 0x28
 8005d56:	d126      	bne.n	8005da6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8005e14 <I2C_Slave_AF+0xe4>)
 8005d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d6c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d76:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d86:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fe ffd7 	bl	8004d52 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005da4:	e031      	b.n	8005e0a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b21      	cmp	r3, #33	@ 0x21
 8005daa:	d129      	bne.n	8005e00 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a19      	ldr	r2, [pc, #100]	@ (8005e14 <I2C_Slave_AF+0xe4>)
 8005db0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2221      	movs	r2, #33	@ 0x21
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005dd6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005de0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005df0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fe fa56 	bl	80042a4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fe ff8b 	bl	8004d14 <HAL_I2C_SlaveTxCpltCallback>
}
 8005dfe:	e004      	b.n	8005e0a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e08:	615a      	str	r2, [r3, #20]
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	ffff0000 	.word	0xffff0000

08005e18 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e26:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e2e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d002      	beq.n	8005e3c <I2C_ITError+0x24>
 8005e36:	7bbb      	ldrb	r3, [r7, #14]
 8005e38:	2b40      	cmp	r3, #64	@ 0x40
 8005e3a:	d10a      	bne.n	8005e52 <I2C_ITError+0x3a>
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b22      	cmp	r3, #34	@ 0x22
 8005e40:	d107      	bne.n	8005e52 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e50:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e58:	2b28      	cmp	r3, #40	@ 0x28
 8005e5a:	d107      	bne.n	8005e6c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2228      	movs	r2, #40	@ 0x28
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005e6a:	e015      	b.n	8005e98 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e7a:	d00a      	beq.n	8005e92 <I2C_ITError+0x7a>
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b60      	cmp	r3, #96	@ 0x60
 8005e80:	d007      	beq.n	8005e92 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea6:	d162      	bne.n	8005f6e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ebc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d020      	beq.n	8005f08 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eca:	4a6a      	ldr	r2, [pc, #424]	@ (8006074 <I2C_ITError+0x25c>)
 8005ecc:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fd fea2 	bl	8003c1c <HAL_DMA_Abort_IT>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8089 	beq.w	8005ff2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f02:	4610      	mov	r0, r2
 8005f04:	4798      	blx	r3
 8005f06:	e074      	b.n	8005ff2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	4a59      	ldr	r2, [pc, #356]	@ (8006074 <I2C_ITError+0x25c>)
 8005f0e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fd fe81 	bl	8003c1c <HAL_DMA_Abort_IT>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d068      	beq.n	8005ff2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2a:	2b40      	cmp	r3, #64	@ 0x40
 8005f2c:	d10b      	bne.n	8005f46 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4798      	blx	r3
 8005f6c:	e041      	b.n	8005ff2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b60      	cmp	r3, #96	@ 0x60
 8005f78:	d125      	bne.n	8005fc6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f92:	2b40      	cmp	r3, #64	@ 0x40
 8005f94:	d10b      	bne.n	8005fae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0201 	bic.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fe feeb 	bl	8004d9a <HAL_I2C_AbortCpltCallback>
 8005fc4:	e015      	b.n	8005ff2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd0:	2b40      	cmp	r3, #64	@ 0x40
 8005fd2:	d10b      	bne.n	8005fec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7fe fecb 	bl	8004d88 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10e      	bne.n	8006020 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006008:	2b00      	cmp	r3, #0
 800600a:	d109      	bne.n	8006020 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800602e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006036:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b04      	cmp	r3, #4
 8006042:	d113      	bne.n	800606c <I2C_ITError+0x254>
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2b28      	cmp	r3, #40	@ 0x28
 8006048:	d110      	bne.n	800606c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a0a      	ldr	r2, [pc, #40]	@ (8006078 <I2C_ITError+0x260>)
 800604e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fe fe73 	bl	8004d52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	08006379 	.word	0x08006379
 8006078:	ffff0000 	.word	0xffff0000

0800607c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	4608      	mov	r0, r1
 8006086:	4611      	mov	r1, r2
 8006088:	461a      	mov	r2, r3
 800608a:	4603      	mov	r3, r0
 800608c:	817b      	strh	r3, [r7, #10]
 800608e:	460b      	mov	r3, r1
 8006090:	813b      	strh	r3, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fa08 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060cc:	d103      	bne.n	80060d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e05f      	b.n	800619a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	492d      	ldr	r1, [pc, #180]	@ (80061a4 <I2C_RequestMemoryWrite+0x128>)
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fa63 	bl	80065bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e04c      	b.n	800619a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006118:	6a39      	ldr	r1, [r7, #32]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 faee 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00d      	beq.n	8006142 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612a:	2b04      	cmp	r3, #4
 800612c:	d107      	bne.n	800613e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800613c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e02b      	b.n	800619a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d105      	bne.n	8006154 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006148:	893b      	ldrh	r3, [r7, #8]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	611a      	str	r2, [r3, #16]
 8006152:	e021      	b.n	8006198 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006154:	893b      	ldrh	r3, [r7, #8]
 8006156:	0a1b      	lsrs	r3, r3, #8
 8006158:	b29b      	uxth	r3, r3
 800615a:	b2da      	uxtb	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006164:	6a39      	ldr	r1, [r7, #32]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fac8 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00d      	beq.n	800618e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	2b04      	cmp	r3, #4
 8006178:	d107      	bne.n	800618a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006188:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e005      	b.n	800619a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800618e:	893b      	ldrh	r3, [r7, #8]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	00010002 	.word	0x00010002

080061a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	4608      	mov	r0, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	461a      	mov	r2, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	817b      	strh	r3, [r7, #10]
 80061ba:	460b      	mov	r3, r1
 80061bc:	813b      	strh	r3, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f96a 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00d      	beq.n	8006216 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006208:	d103      	bne.n	8006212 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006210:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e0aa      	b.n	800636c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006216:	897b      	ldrh	r3, [r7, #10]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	6a3a      	ldr	r2, [r7, #32]
 800622a:	4952      	ldr	r1, [pc, #328]	@ (8006374 <I2C_RequestMemoryRead+0x1cc>)
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f9c5 	bl	80065bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e097      	b.n	800636c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006254:	6a39      	ldr	r1, [r7, #32]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fa50 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00d      	beq.n	800627e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006266:	2b04      	cmp	r3, #4
 8006268:	d107      	bne.n	800627a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e076      	b.n	800636c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d105      	bne.n	8006290 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006284:	893b      	ldrh	r3, [r7, #8]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	611a      	str	r2, [r3, #16]
 800628e:	e021      	b.n	80062d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006290:	893b      	ldrh	r3, [r7, #8]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	b29b      	uxth	r3, r3
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a0:	6a39      	ldr	r1, [r7, #32]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 fa2a 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00d      	beq.n	80062ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d107      	bne.n	80062c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e050      	b.n	800636c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ca:	893b      	ldrh	r3, [r7, #8]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d6:	6a39      	ldr	r1, [r7, #32]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fa0f 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00d      	beq.n	8006300 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d107      	bne.n	80062fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e035      	b.n	800636c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800630e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	2200      	movs	r2, #0
 8006318:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f8d3 	bl	80064c8 <I2C_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00d      	beq.n	8006344 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006336:	d103      	bne.n	8006340 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800633e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e013      	b.n	800636c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006344:	897b      	ldrh	r3, [r7, #10]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f043 0301 	orr.w	r3, r3, #1
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	4906      	ldr	r1, [pc, #24]	@ (8006374 <I2C_RequestMemoryRead+0x1cc>)
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f92e 	bl	80065bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	00010002 	.word	0x00010002

08006378 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006390:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006392:	4b4b      	ldr	r3, [pc, #300]	@ (80064c0 <I2C_DMAAbort+0x148>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	08db      	lsrs	r3, r3, #3
 8006398:	4a4a      	ldr	r2, [pc, #296]	@ (80064c4 <I2C_DMAAbort+0x14c>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	0a1a      	lsrs	r2, r3, #8
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	00da      	lsls	r2, r3, #3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80063be:	e00a      	b.n	80063d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063d4:	d0ea      	beq.n	80063ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e2:	2200      	movs	r2, #0
 80063e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	2200      	movs	r2, #0
 80063f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006404:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006418:	2200      	movs	r2, #0
 800641a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006428:	2200      	movs	r2, #0
 800642a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0201 	bic.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b60      	cmp	r3, #96	@ 0x60
 8006446:	d10e      	bne.n	8006466 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2200      	movs	r2, #0
 800645c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800645e:	6978      	ldr	r0, [r7, #20]
 8006460:	f7fe fc9b 	bl	8004d9a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006464:	e027      	b.n	80064b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006466:	7cfb      	ldrb	r3, [r7, #19]
 8006468:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800646c:	2b28      	cmp	r3, #40	@ 0x28
 800646e:	d117      	bne.n	80064a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800648e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2228      	movs	r2, #40	@ 0x28
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800649e:	e007      	b.n	80064b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80064b0:	6978      	ldr	r0, [r7, #20]
 80064b2:	f7fe fc69 	bl	8004d88 <HAL_I2C_ErrorCallback>
}
 80064b6:	bf00      	nop
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000178 	.word	0x20000178
 80064c4:	14f8b589 	.word	0x14f8b589

080064c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064d8:	e048      	b.n	800656c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	d044      	beq.n	800656c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e2:	f7fc fe67 	bl	80031b4 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d302      	bcc.n	80064f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d139      	bne.n	800656c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	0c1b      	lsrs	r3, r3, #16
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d10d      	bne.n	800651e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	43da      	mvns	r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4013      	ands	r3, r2
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	e00c      	b.n	8006538 <I2C_WaitOnFlagUntilTimeout+0x70>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	43da      	mvns	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4013      	ands	r3, r2
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	bf0c      	ite	eq
 8006530:	2301      	moveq	r3, #1
 8006532:	2300      	movne	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	429a      	cmp	r2, r3
 800653c:	d116      	bne.n	800656c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006558:	f043 0220 	orr.w	r2, r3, #32
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e023      	b.n	80065b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	0c1b      	lsrs	r3, r3, #16
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b01      	cmp	r3, #1
 8006574:	d10d      	bne.n	8006592 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	43da      	mvns	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	4013      	ands	r3, r2
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	bf0c      	ite	eq
 8006588:	2301      	moveq	r3, #1
 800658a:	2300      	movne	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	e00c      	b.n	80065ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	43da      	mvns	r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d093      	beq.n	80064da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065ca:	e071      	b.n	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065da:	d123      	bne.n	8006624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006610:	f043 0204 	orr.w	r2, r3, #4
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e067      	b.n	80066f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d041      	beq.n	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662c:	f7fc fdc2 	bl	80031b4 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d302      	bcc.n	8006642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d136      	bne.n	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	d10c      	bne.n	8006666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	43da      	mvns	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4013      	ands	r3, r2
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	e00b      	b.n	800667e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	43da      	mvns	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	4013      	ands	r3, r2
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d016      	beq.n	80066b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e021      	b.n	80066f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	0c1b      	lsrs	r3, r3, #16
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d10c      	bne.n	80066d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	43da      	mvns	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4013      	ands	r3, r2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bf14      	ite	ne
 80066cc:	2301      	movne	r3, #1
 80066ce:	2300      	moveq	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	e00b      	b.n	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	43da      	mvns	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4013      	ands	r3, r2
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bf14      	ite	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	2300      	moveq	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f47f af6d 	bne.w	80065cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006708:	e034      	b.n	8006774 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f915 	bl	800693a <I2C_IsAcknowledgeFailed>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e034      	b.n	8006784 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d028      	beq.n	8006774 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006722:	f7fc fd47 	bl	80031b4 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d302      	bcc.n	8006738 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11d      	bne.n	8006774 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006742:	2b80      	cmp	r3, #128	@ 0x80
 8006744:	d016      	beq.n	8006774 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006760:	f043 0220 	orr.w	r2, r3, #32
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e007      	b.n	8006784 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800677e:	2b80      	cmp	r3, #128	@ 0x80
 8006780:	d1c3      	bne.n	800670a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006798:	e034      	b.n	8006804 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f8cd 	bl	800693a <I2C_IsAcknowledgeFailed>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e034      	b.n	8006814 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d028      	beq.n	8006804 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b2:	f7fc fcff 	bl	80031b4 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d302      	bcc.n	80067c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d11d      	bne.n	8006804 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d016      	beq.n	8006804 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f0:	f043 0220 	orr.w	r2, r3, #32
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e007      	b.n	8006814 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b04      	cmp	r3, #4
 8006810:	d1c3      	bne.n	800679a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006828:	4b13      	ldr	r3, [pc, #76]	@ (8006878 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	08db      	lsrs	r3, r3, #3
 800682e:	4a13      	ldr	r2, [pc, #76]	@ (800687c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	0a1a      	lsrs	r2, r3, #8
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3b01      	subs	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d107      	bne.n	800685a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	f043 0220 	orr.w	r2, r3, #32
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e008      	b.n	800686c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006868:	d0e9      	beq.n	800683e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	20000178 	.word	0x20000178
 800687c:	14f8b589 	.word	0x14f8b589

08006880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800688c:	e049      	b.n	8006922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b10      	cmp	r3, #16
 800689a:	d119      	bne.n	80068d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0210 	mvn.w	r2, #16
 80068a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e030      	b.n	8006932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d0:	f7fc fc70 	bl	80031b4 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d302      	bcc.n	80068e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d11d      	bne.n	8006922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d016      	beq.n	8006922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e007      	b.n	8006932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692c:	2b40      	cmp	r3, #64	@ 0x40
 800692e:	d1ae      	bne.n	800688e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800694c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006950:	d11b      	bne.n	800698a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800695a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	f043 0204 	orr.w	r2, r3, #4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80069a6:	d103      	bne.n	80069b0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80069ae:	e007      	b.n	80069c0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80069b8:	d102      	bne.n	80069c0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2208      	movs	r2, #8
 80069be:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr
	...

080069cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e31d      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069de:	4b94      	ldr	r3, [pc, #592]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 030c 	and.w	r3, r3, #12
 80069e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069e8:	4b91      	ldr	r3, [pc, #580]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069f0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d07b      	beq.n	8006af6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d006      	beq.n	8006a12 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	2b0c      	cmp	r3, #12
 8006a08:	d10f      	bne.n	8006a2a <HAL_RCC_OscConfig+0x5e>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a10:	d10b      	bne.n	8006a2a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a12:	4b87      	ldr	r3, [pc, #540]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d06a      	beq.n	8006af4 <HAL_RCC_OscConfig+0x128>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d166      	bne.n	8006af4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e2f7      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d106      	bne.n	8006a40 <HAL_RCC_OscConfig+0x74>
 8006a32:	4b7f      	ldr	r3, [pc, #508]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a7e      	ldr	r2, [pc, #504]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e02d      	b.n	8006a9c <HAL_RCC_OscConfig+0xd0>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10c      	bne.n	8006a62 <HAL_RCC_OscConfig+0x96>
 8006a48:	4b79      	ldr	r3, [pc, #484]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a78      	ldr	r2, [pc, #480]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	4b76      	ldr	r3, [pc, #472]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a75      	ldr	r2, [pc, #468]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	e01c      	b.n	8006a9c <HAL_RCC_OscConfig+0xd0>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCC_OscConfig+0xb8>
 8006a6a:	4b71      	ldr	r3, [pc, #452]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a70      	ldr	r2, [pc, #448]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	4b6e      	ldr	r3, [pc, #440]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a6d      	ldr	r2, [pc, #436]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	e00b      	b.n	8006a9c <HAL_RCC_OscConfig+0xd0>
 8006a84:	4b6a      	ldr	r3, [pc, #424]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a69      	ldr	r2, [pc, #420]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	4b67      	ldr	r3, [pc, #412]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a66      	ldr	r2, [pc, #408]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d013      	beq.n	8006acc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa4:	f7fc fb86 	bl	80031b4 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aac:	f7fc fb82 	bl	80031b4 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b64      	cmp	r3, #100	@ 0x64
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e2ad      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006abe:	4b5c      	ldr	r3, [pc, #368]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0xe0>
 8006aca:	e014      	b.n	8006af6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006acc:	f7fc fb72 	bl	80031b4 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ad4:	f7fc fb6e 	bl	80031b4 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b64      	cmp	r3, #100	@ 0x64
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e299      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ae6:	4b52      	ldr	r3, [pc, #328]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f0      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x108>
 8006af2:	e000      	b.n	8006af6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05a      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	2b0c      	cmp	r3, #12
 8006b0c:	d119      	bne.n	8006b42 <HAL_RCC_OscConfig+0x176>
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d116      	bne.n	8006b42 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b14:	4b46      	ldr	r3, [pc, #280]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <HAL_RCC_OscConfig+0x160>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e276      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b2c:	4b40      	ldr	r3, [pc, #256]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	493d      	ldr	r1, [pc, #244]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b40:	e03a      	b.n	8006bb8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d020      	beq.n	8006b8c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8006c34 <HAL_RCC_OscConfig+0x268>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b50:	f7fc fb30 	bl	80031b4 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b58:	f7fc fb2c 	bl	80031b4 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e257      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b6a:	4b31      	ldr	r3, [pc, #196]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b76:	4b2e      	ldr	r3, [pc, #184]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	492a      	ldr	r1, [pc, #168]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	604b      	str	r3, [r1, #4]
 8006b8a:	e015      	b.n	8006bb8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b8c:	4b29      	ldr	r3, [pc, #164]	@ (8006c34 <HAL_RCC_OscConfig+0x268>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b92:	f7fc fb0f 	bl	80031b4 <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b98:	e008      	b.n	8006bac <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b9a:	f7fc fb0b 	bl	80031b4 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e236      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bac:	4b20      	ldr	r3, [pc, #128]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f0      	bne.n	8006b9a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0310 	and.w	r3, r3, #16
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 80b8 	beq.w	8006d36 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d170      	bne.n	8006cae <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006bcc:	4b18      	ldr	r3, [pc, #96]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_RCC_OscConfig+0x218>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e21a      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1a      	ldr	r2, [r3, #32]
 8006be8:	4b11      	ldr	r3, [pc, #68]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d921      	bls.n	8006c38 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fc3b 	bl	8007474 <RCC_SetFlashLatencyFromMSIRange>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e208      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c08:	4b09      	ldr	r3, [pc, #36]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	4906      	ldr	r1, [pc, #24]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c1a:	4b05      	ldr	r3, [pc, #20]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	061b      	lsls	r3, r3, #24
 8006c28:	4901      	ldr	r1, [pc, #4]	@ (8006c30 <HAL_RCC_OscConfig+0x264>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	604b      	str	r3, [r1, #4]
 8006c2e:	e020      	b.n	8006c72 <HAL_RCC_OscConfig+0x2a6>
 8006c30:	40023800 	.word	0x40023800
 8006c34:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c38:	4b99      	ldr	r3, [pc, #612]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	4996      	ldr	r1, [pc, #600]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c4a:	4b95      	ldr	r3, [pc, #596]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	061b      	lsls	r3, r3, #24
 8006c58:	4991      	ldr	r1, [pc, #580]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fc06 	bl	8007474 <RCC_SetFlashLatencyFromMSIRange>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e1d3      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	0b5b      	lsrs	r3, r3, #13
 8006c78:	3301      	adds	r3, #1
 8006c7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006c82:	4a87      	ldr	r2, [pc, #540]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006c84:	6892      	ldr	r2, [r2, #8]
 8006c86:	0912      	lsrs	r2, r2, #4
 8006c88:	f002 020f 	and.w	r2, r2, #15
 8006c8c:	4985      	ldr	r1, [pc, #532]	@ (8006ea4 <HAL_RCC_OscConfig+0x4d8>)
 8006c8e:	5c8a      	ldrb	r2, [r1, r2]
 8006c90:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006c92:	4a85      	ldr	r2, [pc, #532]	@ (8006ea8 <HAL_RCC_OscConfig+0x4dc>)
 8006c94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c96:	4b85      	ldr	r3, [pc, #532]	@ (8006eac <HAL_RCC_OscConfig+0x4e0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fc fa3e 	bl	800311c <HAL_InitTick>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d045      	beq.n	8006d36 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	e1b5      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d029      	beq.n	8006d0a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006cb6:	4b7e      	ldr	r3, [pc, #504]	@ (8006eb0 <HAL_RCC_OscConfig+0x4e4>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cbc:	f7fc fa7a 	bl	80031b4 <HAL_GetTick>
 8006cc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cc4:	f7fc fa76 	bl	80031b4 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e1a1      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006cd6:	4b72      	ldr	r3, [pc, #456]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0f0      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	496c      	ldr	r1, [pc, #432]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	061b      	lsls	r3, r3, #24
 8006d02:	4967      	ldr	r1, [pc, #412]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	604b      	str	r3, [r1, #4]
 8006d08:	e015      	b.n	8006d36 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006d0a:	4b69      	ldr	r3, [pc, #420]	@ (8006eb0 <HAL_RCC_OscConfig+0x4e4>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d10:	f7fc fa50 	bl	80031b4 <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d18:	f7fc fa4c 	bl	80031b4 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e177      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d030      	beq.n	8006da4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d016      	beq.n	8006d78 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb4 <HAL_RCC_OscConfig+0x4e8>)
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d50:	f7fc fa30 	bl	80031b4 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d58:	f7fc fa2c 	bl	80031b4 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e157      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0f0      	beq.n	8006d58 <HAL_RCC_OscConfig+0x38c>
 8006d76:	e015      	b.n	8006da4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d78:	4b4e      	ldr	r3, [pc, #312]	@ (8006eb4 <HAL_RCC_OscConfig+0x4e8>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d7e:	f7fc fa19 	bl	80031b4 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d86:	f7fc fa15 	bl	80031b4 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e140      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d98:	4b41      	ldr	r3, [pc, #260]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f0      	bne.n	8006d86 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80b5 	beq.w	8006f1c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006db2:	2300      	movs	r3, #0
 8006db4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006db6:	4b3a      	ldr	r3, [pc, #232]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10d      	bne.n	8006dde <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc2:	4b37      	ldr	r3, [pc, #220]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	4a36      	ldr	r2, [pc, #216]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dcc:	6253      	str	r3, [r2, #36]	@ 0x24
 8006dce:	4b34      	ldr	r3, [pc, #208]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd6:	60bb      	str	r3, [r7, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dde:	4b36      	ldr	r3, [pc, #216]	@ (8006eb8 <HAL_RCC_OscConfig+0x4ec>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d118      	bne.n	8006e1c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dea:	4b33      	ldr	r3, [pc, #204]	@ (8006eb8 <HAL_RCC_OscConfig+0x4ec>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a32      	ldr	r2, [pc, #200]	@ (8006eb8 <HAL_RCC_OscConfig+0x4ec>)
 8006df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006df6:	f7fc f9dd 	bl	80031b4 <HAL_GetTick>
 8006dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfc:	e008      	b.n	8006e10 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dfe:	f7fc f9d9 	bl	80031b4 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b64      	cmp	r3, #100	@ 0x64
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e104      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e10:	4b29      	ldr	r3, [pc, #164]	@ (8006eb8 <HAL_RCC_OscConfig+0x4ec>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0f0      	beq.n	8006dfe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d106      	bne.n	8006e32 <HAL_RCC_OscConfig+0x466>
 8006e24:	4b1e      	ldr	r3, [pc, #120]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e28:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e2e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006e30:	e02d      	b.n	8006e8e <HAL_RCC_OscConfig+0x4c2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10c      	bne.n	8006e54 <HAL_RCC_OscConfig+0x488>
 8006e3a:	4b19      	ldr	r3, [pc, #100]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e3e:	4a18      	ldr	r2, [pc, #96]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e44:	6353      	str	r3, [r2, #52]	@ 0x34
 8006e46:	4b16      	ldr	r3, [pc, #88]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e50:	6353      	str	r3, [r2, #52]	@ 0x34
 8006e52:	e01c      	b.n	8006e8e <HAL_RCC_OscConfig+0x4c2>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b05      	cmp	r3, #5
 8006e5a:	d10c      	bne.n	8006e76 <HAL_RCC_OscConfig+0x4aa>
 8006e5c:	4b10      	ldr	r3, [pc, #64]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e60:	4a0f      	ldr	r2, [pc, #60]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e66:	6353      	str	r3, [r2, #52]	@ 0x34
 8006e68:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e72:	6353      	str	r3, [r2, #52]	@ 0x34
 8006e74:	e00b      	b.n	8006e8e <HAL_RCC_OscConfig+0x4c2>
 8006e76:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e7a:	4a09      	ldr	r2, [pc, #36]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e80:	6353      	str	r3, [r2, #52]	@ 0x34
 8006e82:	4b07      	ldr	r3, [pc, #28]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e86:	4a06      	ldr	r2, [pc, #24]	@ (8006ea0 <HAL_RCC_OscConfig+0x4d4>)
 8006e88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e8c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d024      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e96:	f7fc f98d 	bl	80031b4 <HAL_GetTick>
 8006e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e9c:	e019      	b.n	8006ed2 <HAL_RCC_OscConfig+0x506>
 8006e9e:	bf00      	nop
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	0800cc60 	.word	0x0800cc60
 8006ea8:	20000178 	.word	0x20000178
 8006eac:	2000017c 	.word	0x2000017c
 8006eb0:	42470020 	.word	0x42470020
 8006eb4:	42470680 	.word	0x42470680
 8006eb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ebc:	f7fc f97a 	bl	80031b4 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e0a3      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ed2:	4b54      	ldr	r3, [pc, #336]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0ee      	beq.n	8006ebc <HAL_RCC_OscConfig+0x4f0>
 8006ede:	e014      	b.n	8006f0a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ee0:	f7fc f968 	bl	80031b4 <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ee6:	e00a      	b.n	8006efe <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee8:	f7fc f964 	bl	80031b4 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e08d      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006efe:	4b49      	ldr	r3, [pc, #292]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1ee      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f0a:	7ffb      	ldrb	r3, [r7, #31]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d105      	bne.n	8006f1c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f10:	4b44      	ldr	r3, [pc, #272]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	4a43      	ldr	r2, [pc, #268]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f1a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d079      	beq.n	8007018 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b0c      	cmp	r3, #12
 8006f28:	d056      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d13b      	bne.n	8006faa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f32:	4b3d      	ldr	r3, [pc, #244]	@ (8007028 <HAL_RCC_OscConfig+0x65c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f38:	f7fc f93c 	bl	80031b4 <HAL_GetTick>
 8006f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f40:	f7fc f938 	bl	80031b4 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e063      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f52:	4b34      	ldr	r3, [pc, #208]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f0      	bne.n	8006f40 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f5e:	4b31      	ldr	r3, [pc, #196]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	4319      	orrs	r1, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f74:	430b      	orrs	r3, r1
 8006f76:	492b      	ldr	r1, [pc, #172]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8007028 <HAL_RCC_OscConfig+0x65c>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f82:	f7fc f917 	bl	80031b4 <HAL_GetTick>
 8006f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f88:	e008      	b.n	8006f9c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8a:	f7fc f913 	bl	80031b4 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e03e      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f9c:	4b21      	ldr	r3, [pc, #132]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0f0      	beq.n	8006f8a <HAL_RCC_OscConfig+0x5be>
 8006fa8:	e036      	b.n	8007018 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006faa:	4b1f      	ldr	r3, [pc, #124]	@ (8007028 <HAL_RCC_OscConfig+0x65c>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb0:	f7fc f900 	bl	80031b4 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb8:	f7fc f8fc 	bl	80031b4 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e027      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fca:	4b16      	ldr	r3, [pc, #88]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x5ec>
 8006fd6:	e01f      	b.n	8007018 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e01a      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8007024 <HAL_RCC_OscConfig+0x658>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d10d      	bne.n	8007014 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007002:	429a      	cmp	r2, r3
 8007004:	d106      	bne.n	8007014 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800
 8007028:	42470060 	.word	0x42470060

0800702c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e11a      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007040:	4b8f      	ldr	r3, [pc, #572]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d919      	bls.n	8007082 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d105      	bne.n	8007060 <HAL_RCC_ClockConfig+0x34>
 8007054:	4b8a      	ldr	r3, [pc, #552]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a89      	ldr	r2, [pc, #548]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 800705a:	f043 0304 	orr.w	r3, r3, #4
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	4b87      	ldr	r3, [pc, #540]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f023 0201 	bic.w	r2, r3, #1
 8007068:	4985      	ldr	r1, [pc, #532]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	4313      	orrs	r3, r2
 800706e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007070:	4b83      	ldr	r3, [pc, #524]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d001      	beq.n	8007082 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e0f9      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d008      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800708e:	4b7d      	ldr	r3, [pc, #500]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	497a      	ldr	r1, [pc, #488]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 800709c:	4313      	orrs	r3, r2
 800709e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 808e 	beq.w	80071ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d107      	bne.n	80070c6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070b6:	4b73      	ldr	r3, [pc, #460]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d121      	bne.n	8007106 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e0d7      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d107      	bne.n	80070de <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070ce:	4b6d      	ldr	r3, [pc, #436]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d115      	bne.n	8007106 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e0cb      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d107      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070e6:	4b67      	ldr	r3, [pc, #412]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e0bf      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80070f6:	4b63      	ldr	r3, [pc, #396]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e0b7      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007106:	4b5f      	ldr	r3, [pc, #380]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f023 0203 	bic.w	r2, r3, #3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	495c      	ldr	r1, [pc, #368]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 8007114:	4313      	orrs	r3, r2
 8007116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007118:	f7fc f84c 	bl	80031b4 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d112      	bne.n	800714c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007126:	e00a      	b.n	800713e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007128:	f7fc f844 	bl	80031b4 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007136:	4293      	cmp	r3, r2
 8007138:	d901      	bls.n	800713e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e09b      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800713e:	4b51      	ldr	r3, [pc, #324]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 030c 	and.w	r3, r3, #12
 8007146:	2b08      	cmp	r3, #8
 8007148:	d1ee      	bne.n	8007128 <HAL_RCC_ClockConfig+0xfc>
 800714a:	e03e      	b.n	80071ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b03      	cmp	r3, #3
 8007152:	d112      	bne.n	800717a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007154:	e00a      	b.n	800716c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007156:	f7fc f82d 	bl	80031b4 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007164:	4293      	cmp	r3, r2
 8007166:	d901      	bls.n	800716c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e084      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800716c:	4b45      	ldr	r3, [pc, #276]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 030c 	and.w	r3, r3, #12
 8007174:	2b0c      	cmp	r3, #12
 8007176:	d1ee      	bne.n	8007156 <HAL_RCC_ClockConfig+0x12a>
 8007178:	e027      	b.n	80071ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d11d      	bne.n	80071be <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007182:	e00a      	b.n	800719a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007184:	f7fc f816 	bl	80031b4 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007192:	4293      	cmp	r3, r2
 8007194:	d901      	bls.n	800719a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e06d      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800719a:	4b3a      	ldr	r3, [pc, #232]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 030c 	and.w	r3, r3, #12
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d1ee      	bne.n	8007184 <HAL_RCC_ClockConfig+0x158>
 80071a6:	e010      	b.n	80071ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071a8:	f7fc f804 	bl	80031b4 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e05b      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80071be:	4b31      	ldr	r3, [pc, #196]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 030c 	and.w	r3, r3, #12
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1ee      	bne.n	80071a8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d219      	bcs.n	800720c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d105      	bne.n	80071ea <HAL_RCC_ClockConfig+0x1be>
 80071de:	4b28      	ldr	r3, [pc, #160]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a27      	ldr	r2, [pc, #156]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 80071e4:	f043 0304 	orr.w	r3, r3, #4
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	4b25      	ldr	r3, [pc, #148]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f023 0201 	bic.w	r2, r3, #1
 80071f2:	4923      	ldr	r1, [pc, #140]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fa:	4b21      	ldr	r3, [pc, #132]	@ (8007280 <HAL_RCC_ClockConfig+0x254>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d001      	beq.n	800720c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e034      	b.n	8007276 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007218:	4b1a      	ldr	r3, [pc, #104]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	4917      	ldr	r1, [pc, #92]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 8007226:	4313      	orrs	r3, r2
 8007228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d009      	beq.n	800724a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007236:	4b13      	ldr	r3, [pc, #76]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	490f      	ldr	r1, [pc, #60]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 8007246:	4313      	orrs	r3, r2
 8007248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800724a:	f000 f823 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 800724e:	4602      	mov	r2, r0
 8007250:	4b0c      	ldr	r3, [pc, #48]	@ (8007284 <HAL_RCC_ClockConfig+0x258>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	490b      	ldr	r1, [pc, #44]	@ (8007288 <HAL_RCC_ClockConfig+0x25c>)
 800725c:	5ccb      	ldrb	r3, [r1, r3]
 800725e:	fa22 f303 	lsr.w	r3, r2, r3
 8007262:	4a0a      	ldr	r2, [pc, #40]	@ (800728c <HAL_RCC_ClockConfig+0x260>)
 8007264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007266:	4b0a      	ldr	r3, [pc, #40]	@ (8007290 <HAL_RCC_ClockConfig+0x264>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7fb ff56 	bl	800311c <HAL_InitTick>
 8007270:	4603      	mov	r3, r0
 8007272:	72fb      	strb	r3, [r7, #11]

  return status;
 8007274:	7afb      	ldrb	r3, [r7, #11]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	40023c00 	.word	0x40023c00
 8007284:	40023800 	.word	0x40023800
 8007288:	0800cc60 	.word	0x0800cc60
 800728c:	20000178 	.word	0x20000178
 8007290:	2000017c 	.word	0x2000017c

08007294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007298:	b08e      	sub	sp, #56	@ 0x38
 800729a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800729c:	4b58      	ldr	r3, [pc, #352]	@ (8007400 <HAL_RCC_GetSysClockFreq+0x16c>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	f003 030c 	and.w	r3, r3, #12
 80072a8:	2b0c      	cmp	r3, #12
 80072aa:	d00d      	beq.n	80072c8 <HAL_RCC_GetSysClockFreq+0x34>
 80072ac:	2b0c      	cmp	r3, #12
 80072ae:	f200 8092 	bhi.w	80073d6 <HAL_RCC_GetSysClockFreq+0x142>
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d002      	beq.n	80072bc <HAL_RCC_GetSysClockFreq+0x28>
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d003      	beq.n	80072c2 <HAL_RCC_GetSysClockFreq+0x2e>
 80072ba:	e08c      	b.n	80073d6 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072bc:	4b51      	ldr	r3, [pc, #324]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x170>)
 80072be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80072c0:	e097      	b.n	80073f2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072c2:	4b51      	ldr	r3, [pc, #324]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x174>)
 80072c4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80072c6:	e094      	b.n	80073f2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80072c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ca:	0c9b      	lsrs	r3, r3, #18
 80072cc:	f003 020f 	and.w	r2, r3, #15
 80072d0:	4b4e      	ldr	r3, [pc, #312]	@ (800740c <HAL_RCC_GetSysClockFreq+0x178>)
 80072d2:	5c9b      	ldrb	r3, [r3, r2]
 80072d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80072d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d8:	0d9b      	lsrs	r3, r3, #22
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	3301      	adds	r3, #1
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072e2:	4b47      	ldr	r3, [pc, #284]	@ (8007400 <HAL_RCC_GetSysClockFreq+0x16c>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d021      	beq.n	8007332 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80072ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f0:	2200      	movs	r2, #0
 80072f2:	61bb      	str	r3, [r7, #24]
 80072f4:	61fa      	str	r2, [r7, #28]
 80072f6:	4b44      	ldr	r3, [pc, #272]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x174>)
 80072f8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80072fc:	464a      	mov	r2, r9
 80072fe:	fb03 f202 	mul.w	r2, r3, r2
 8007302:	2300      	movs	r3, #0
 8007304:	4644      	mov	r4, r8
 8007306:	fb04 f303 	mul.w	r3, r4, r3
 800730a:	4413      	add	r3, r2
 800730c:	4a3e      	ldr	r2, [pc, #248]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x174>)
 800730e:	4644      	mov	r4, r8
 8007310:	fba4 0102 	umull	r0, r1, r4, r2
 8007314:	440b      	add	r3, r1
 8007316:	4619      	mov	r1, r3
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	2200      	movs	r2, #0
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	617a      	str	r2, [r7, #20]
 8007320:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007324:	f7f9 ff32 	bl	800118c <__aeabi_uldivmod>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4613      	mov	r3, r2
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007330:	e04e      	b.n	80073d0 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007334:	2200      	movs	r2, #0
 8007336:	469a      	mov	sl, r3
 8007338:	4693      	mov	fp, r2
 800733a:	4652      	mov	r2, sl
 800733c:	465b      	mov	r3, fp
 800733e:	f04f 0000 	mov.w	r0, #0
 8007342:	f04f 0100 	mov.w	r1, #0
 8007346:	0159      	lsls	r1, r3, #5
 8007348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800734c:	0150      	lsls	r0, r2, #5
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	ebb2 080a 	subs.w	r8, r2, sl
 8007356:	eb63 090b 	sbc.w	r9, r3, fp
 800735a:	f04f 0200 	mov.w	r2, #0
 800735e:	f04f 0300 	mov.w	r3, #0
 8007362:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007366:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800736a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800736e:	ebb2 0408 	subs.w	r4, r2, r8
 8007372:	eb63 0509 	sbc.w	r5, r3, r9
 8007376:	f04f 0200 	mov.w	r2, #0
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	00eb      	lsls	r3, r5, #3
 8007380:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007384:	00e2      	lsls	r2, r4, #3
 8007386:	4614      	mov	r4, r2
 8007388:	461d      	mov	r5, r3
 800738a:	eb14 030a 	adds.w	r3, r4, sl
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	eb45 030b 	adc.w	r3, r5, fp
 8007394:	607b      	str	r3, [r7, #4]
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073a2:	4629      	mov	r1, r5
 80073a4:	028b      	lsls	r3, r1, #10
 80073a6:	4620      	mov	r0, r4
 80073a8:	4629      	mov	r1, r5
 80073aa:	4604      	mov	r4, r0
 80073ac:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80073b0:	4601      	mov	r1, r0
 80073b2:	028a      	lsls	r2, r1, #10
 80073b4:	4610      	mov	r0, r2
 80073b6:	4619      	mov	r1, r3
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	2200      	movs	r2, #0
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	60fa      	str	r2, [r7, #12]
 80073c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073c4:	f7f9 fee2 	bl	800118c <__aeabi_uldivmod>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4613      	mov	r3, r2
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 80073d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80073d4:	e00d      	b.n	80073f2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80073d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007400 <HAL_RCC_GetSysClockFreq+0x16c>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	0b5b      	lsrs	r3, r3, #13
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	3301      	adds	r3, #1
 80073e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80073ea:	fa02 f303 	lsl.w	r3, r2, r3
 80073ee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80073f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3738      	adds	r7, #56	@ 0x38
 80073f8:	46bd      	mov	sp, r7
 80073fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073fe:	bf00      	nop
 8007400:	40023800 	.word	0x40023800
 8007404:	00f42400 	.word	0x00f42400
 8007408:	016e3600 	.word	0x016e3600
 800740c:	0800cc54 	.word	0x0800cc54

08007410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007414:	4b02      	ldr	r3, [pc, #8]	@ (8007420 <HAL_RCC_GetHCLKFreq+0x10>)
 8007416:	681b      	ldr	r3, [r3, #0]
}
 8007418:	4618      	mov	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr
 8007420:	20000178 	.word	0x20000178

08007424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007428:	f7ff fff2 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 800742c:	4602      	mov	r2, r0
 800742e:	4b05      	ldr	r3, [pc, #20]	@ (8007444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	4903      	ldr	r1, [pc, #12]	@ (8007448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800743a:	5ccb      	ldrb	r3, [r1, r3]
 800743c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007440:	4618      	mov	r0, r3
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40023800 	.word	0x40023800
 8007448:	0800cc70 	.word	0x0800cc70

0800744c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007450:	f7ff ffde 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007454:	4602      	mov	r2, r0
 8007456:	4b05      	ldr	r3, [pc, #20]	@ (800746c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	0adb      	lsrs	r3, r3, #11
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	4903      	ldr	r1, [pc, #12]	@ (8007470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007462:	5ccb      	ldrb	r3, [r1, r3]
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007468:	4618      	mov	r0, r3
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40023800 	.word	0x40023800
 8007470:	0800cc70 	.word	0x0800cc70

08007474 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800747c:	2300      	movs	r3, #0
 800747e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007480:	4b29      	ldr	r3, [pc, #164]	@ (8007528 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d12c      	bne.n	80074e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800748c:	4b26      	ldr	r3, [pc, #152]	@ (8007528 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007498:	4b24      	ldr	r3, [pc, #144]	@ (800752c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	e016      	b.n	80074d2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074a4:	4b20      	ldr	r3, [pc, #128]	@ (8007528 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80074a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007528 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80074aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074ae:	6253      	str	r3, [r2, #36]	@ 0x24
 80074b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80074bc:	4b1b      	ldr	r3, [pc, #108]	@ (800752c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80074c4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c6:	4b18      	ldr	r3, [pc, #96]	@ (8007528 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80074c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ca:	4a17      	ldr	r2, [pc, #92]	@ (8007528 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80074cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074d0:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80074d8:	d105      	bne.n	80074e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80074e0:	d101      	bne.n	80074e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80074e2:	2301      	movs	r3, #1
 80074e4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d105      	bne.n	80074f8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80074ec:	4b10      	ldr	r3, [pc, #64]	@ (8007530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a0f      	ldr	r2, [pc, #60]	@ (8007530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074f2:	f043 0304 	orr.w	r3, r3, #4
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f023 0201 	bic.w	r2, r3, #1
 8007500:	490b      	ldr	r1, [pc, #44]	@ (8007530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007508:	4b09      	ldr	r3, [pc, #36]	@ (8007530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	429a      	cmp	r2, r3
 8007514:	d001      	beq.n	800751a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e000      	b.n	800751c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40023800 	.word	0x40023800
 800752c:	40007000 	.word	0x40007000
 8007530:	40023c00 	.word	0x40023c00

08007534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e031      	b.n	80075aa <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fb fbc8 	bl	8002cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	4619      	mov	r1, r3
 8007572:	4610      	mov	r0, r2
 8007574:	f000 fa38 	bl	80079e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d001      	beq.n	80075cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e03a      	b.n	8007642 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0201 	orr.w	r2, r2, #1
 80075e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ec:	d00e      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x58>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a16      	ldr	r2, [pc, #88]	@ (800764c <HAL_TIM_Base_Start_IT+0x98>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d009      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x58>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a14      	ldr	r2, [pc, #80]	@ (8007650 <HAL_TIM_Base_Start_IT+0x9c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x58>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a13      	ldr	r2, [pc, #76]	@ (8007654 <HAL_TIM_Base_Start_IT+0xa0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d111      	bne.n	8007630 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b06      	cmp	r3, #6
 800761c:	d010      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0201 	orr.w	r2, r2, #1
 800762c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800762e:	e007      	b.n	8007640 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0201 	orr.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800
 8007654:	40010800 	.word	0x40010800

08007658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b02      	cmp	r3, #2
 800766c:	d122      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d11b      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0202 	mvn.w	r2, #2
 8007684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f988 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 80076a0:	e005      	b.n	80076ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f97b 	bl	800799e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f98a 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d122      	bne.n	8007708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d11b      	bne.n	8007708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0204 	mvn.w	r2, #4
 80076d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2202      	movs	r2, #2
 80076de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f95e 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 80076f4:	e005      	b.n	8007702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f951 	bl	800799e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f960 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b08      	cmp	r3, #8
 8007714:	d122      	bne.n	800775c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b08      	cmp	r3, #8
 8007722:	d11b      	bne.n	800775c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f06f 0208 	mvn.w	r2, #8
 800772c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2204      	movs	r2, #4
 8007732:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f934 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 8007748:	e005      	b.n	8007756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f927 	bl	800799e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f936 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b10      	cmp	r3, #16
 8007768:	d122      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b10      	cmp	r3, #16
 8007776:	d11b      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0210 	mvn.w	r2, #16
 8007780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2208      	movs	r2, #8
 8007786:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f90a 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 800779c:	e005      	b.n	80077aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f8fd 	bl	800799e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f90c 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d10e      	bne.n	80077dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d107      	bne.n	80077dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0201 	mvn.w	r2, #1
 80077d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fa ff0c 	bl	80025f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e6:	2b40      	cmp	r3, #64	@ 0x40
 80077e8:	d10e      	bne.n	8007808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f4:	2b40      	cmp	r3, #64	@ 0x40
 80077f6:	d107      	bne.n	8007808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f8e6 	bl	80079d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_TIM_ConfigClockSource+0x1c>
 8007828:	2302      	movs	r3, #2
 800782a:	e0b4      	b.n	8007996 <HAL_TIM_ConfigClockSource+0x186>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800784a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007864:	d03e      	beq.n	80078e4 <HAL_TIM_ConfigClockSource+0xd4>
 8007866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800786a:	f200 8087 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x16c>
 800786e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007872:	f000 8086 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x172>
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800787a:	d87f      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x16c>
 800787c:	2b70      	cmp	r3, #112	@ 0x70
 800787e:	d01a      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0xa6>
 8007880:	2b70      	cmp	r3, #112	@ 0x70
 8007882:	d87b      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x16c>
 8007884:	2b60      	cmp	r3, #96	@ 0x60
 8007886:	d050      	beq.n	800792a <HAL_TIM_ConfigClockSource+0x11a>
 8007888:	2b60      	cmp	r3, #96	@ 0x60
 800788a:	d877      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x16c>
 800788c:	2b50      	cmp	r3, #80	@ 0x50
 800788e:	d03c      	beq.n	800790a <HAL_TIM_ConfigClockSource+0xfa>
 8007890:	2b50      	cmp	r3, #80	@ 0x50
 8007892:	d873      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x16c>
 8007894:	2b40      	cmp	r3, #64	@ 0x40
 8007896:	d058      	beq.n	800794a <HAL_TIM_ConfigClockSource+0x13a>
 8007898:	2b40      	cmp	r3, #64	@ 0x40
 800789a:	d86f      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x16c>
 800789c:	2b30      	cmp	r3, #48	@ 0x30
 800789e:	d064      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x15a>
 80078a0:	2b30      	cmp	r3, #48	@ 0x30
 80078a2:	d86b      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x16c>
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	d060      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x15a>
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	d867      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x16c>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d05c      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x15a>
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d05a      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x15a>
 80078b4:	e062      	b.n	800797c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078c6:	f000 f968 	bl	8007b9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	609a      	str	r2, [r3, #8]
      break;
 80078e2:	e04f      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078f4:	f000 f951 	bl	8007b9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007906:	609a      	str	r2, [r3, #8]
      break;
 8007908:	e03c      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007916:	461a      	mov	r2, r3
 8007918:	f000 f8c8 	bl	8007aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2150      	movs	r1, #80	@ 0x50
 8007922:	4618      	mov	r0, r3
 8007924:	f000 f91f 	bl	8007b66 <TIM_ITRx_SetConfig>
      break;
 8007928:	e02c      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007936:	461a      	mov	r2, r3
 8007938:	f000 f8e6 	bl	8007b08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2160      	movs	r1, #96	@ 0x60
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f90f 	bl	8007b66 <TIM_ITRx_SetConfig>
      break;
 8007948:	e01c      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007956:	461a      	mov	r2, r3
 8007958:	f000 f8a8 	bl	8007aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2140      	movs	r1, #64	@ 0x40
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f8ff 	bl	8007b66 <TIM_ITRx_SetConfig>
      break;
 8007968:	e00c      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f000 f8f6 	bl	8007b66 <TIM_ITRx_SetConfig>
      break;
 800797a:	e003      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
      break;
 8007980:	e000      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr

080079b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
	...

080079e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079fe:	d007      	beq.n	8007a10 <TIM_Base_SetConfig+0x28>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a25      	ldr	r2, [pc, #148]	@ (8007a98 <TIM_Base_SetConfig+0xb0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d003      	beq.n	8007a10 <TIM_Base_SetConfig+0x28>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a24      	ldr	r2, [pc, #144]	@ (8007a9c <TIM_Base_SetConfig+0xb4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d108      	bne.n	8007a22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a28:	d013      	beq.n	8007a52 <TIM_Base_SetConfig+0x6a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8007a98 <TIM_Base_SetConfig+0xb0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00f      	beq.n	8007a52 <TIM_Base_SetConfig+0x6a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a19      	ldr	r2, [pc, #100]	@ (8007a9c <TIM_Base_SetConfig+0xb4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00b      	beq.n	8007a52 <TIM_Base_SetConfig+0x6a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a18      	ldr	r2, [pc, #96]	@ (8007aa0 <TIM_Base_SetConfig+0xb8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d007      	beq.n	8007a52 <TIM_Base_SetConfig+0x6a>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a17      	ldr	r2, [pc, #92]	@ (8007aa4 <TIM_Base_SetConfig+0xbc>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d003      	beq.n	8007a52 <TIM_Base_SetConfig+0x6a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a16      	ldr	r2, [pc, #88]	@ (8007aa8 <TIM_Base_SetConfig+0xc0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d108      	bne.n	8007a64 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	615a      	str	r2, [r3, #20]
}
 8007a8e:	bf00      	nop
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr
 8007a98:	40000400 	.word	0x40000400
 8007a9c:	40000800 	.word	0x40000800
 8007aa0:	40010800 	.word	0x40010800
 8007aa4:	40010c00 	.word	0x40010c00
 8007aa8:	40011000 	.word	0x40011000

08007aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f023 0201 	bic.w	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f023 030a 	bic.w	r3, r3, #10
 8007ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	621a      	str	r2, [r3, #32]
}
 8007afe:	bf00      	nop
 8007b00:	371c      	adds	r7, #28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr

08007b08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	f023 0210 	bic.w	r2, r3, #16
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	031b      	lsls	r3, r3, #12
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	621a      	str	r2, [r3, #32]
}
 8007b5c:	bf00      	nop
 8007b5e:	371c      	adds	r7, #28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bc80      	pop	{r7}
 8007b64:	4770      	bx	lr

08007b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f043 0307 	orr.w	r3, r3, #7
 8007b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	609a      	str	r2, [r3, #8]
}
 8007b90:	bf00      	nop
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr

08007b9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b087      	sub	sp, #28
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	607a      	str	r2, [r7, #4]
 8007ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	021a      	lsls	r2, r3, #8
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	609a      	str	r2, [r3, #8]
}
 8007bce:	bf00      	nop
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bc80      	pop	{r7}
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e046      	b.n	8007c7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c32:	d00e      	beq.n	8007c52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a13      	ldr	r2, [pc, #76]	@ (8007c88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d009      	beq.n	8007c52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a12      	ldr	r2, [pc, #72]	@ (8007c8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d004      	beq.n	8007c52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a10      	ldr	r2, [pc, #64]	@ (8007c90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d10c      	bne.n	8007c6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bc80      	pop	{r7}
 8007c86:	4770      	bx	lr
 8007c88:	40000400 	.word	0x40000400
 8007c8c:	40000800 	.word	0x40000800
 8007c90:	40010800 	.word	0x40010800

08007c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e042      	b.n	8007d2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7fb f83c 	bl	8002d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2224      	movs	r2, #36	@ 0x24
 8007cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fd09 	bl	80086f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	695a      	ldr	r2, [r3, #20]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d121      	bne.n	8007d92 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <HAL_UART_Transmit_IT+0x26>
 8007d54:	88fb      	ldrh	r3, [r7, #6]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e01a      	b.n	8007d94 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	88fa      	ldrh	r2, [r7, #6]
 8007d68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	88fa      	ldrh	r2, [r7, #6]
 8007d6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2221      	movs	r2, #33	@ 0x21
 8007d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d8c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e000      	b.n	8007d94 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007d92:	2302      	movs	r3, #2
  }
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bc80      	pop	{r7}
 8007d9c:	4770      	bx	lr

08007d9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d112      	bne.n	8007dde <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <HAL_UART_Receive_IT+0x26>
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e00b      	b.n	8007de0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 fab6 	bl	8008346 <UART_Start_Receive_IT>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	e000      	b.n	8007de0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007dde:	2302      	movs	r3, #2
  }
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b0ba      	sub	sp, #232	@ 0xe8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10f      	bne.n	8007e4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d009      	beq.n	8007e4e <HAL_UART_IRQHandler+0x66>
 8007e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fb93 	bl	8008572 <UART_Receive_IT>
      return;
 8007e4c:	e25b      	b.n	8008306 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80de 	beq.w	8008014 <HAL_UART_IRQHandler+0x22c>
 8007e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 80d1 	beq.w	8008014 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <HAL_UART_IRQHandler+0xae>
 8007e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d005      	beq.n	8007e96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8e:	f043 0201 	orr.w	r2, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <HAL_UART_IRQHandler+0xd2>
 8007ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb2:	f043 0202 	orr.w	r2, r3, #2
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00b      	beq.n	8007ede <HAL_UART_IRQHandler+0xf6>
 8007ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d005      	beq.n	8007ede <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed6:	f043 0204 	orr.w	r2, r3, #4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee2:	f003 0308 	and.w	r3, r3, #8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d011      	beq.n	8007f0e <HAL_UART_IRQHandler+0x126>
 8007eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d105      	bne.n	8007f02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d005      	beq.n	8007f0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f06:	f043 0208 	orr.w	r2, r3, #8
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 81f2 	beq.w	80082fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <HAL_UART_IRQHandler+0x14e>
 8007f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fb1e 	bl	8008572 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f40:	2b40      	cmp	r3, #64	@ 0x40
 8007f42:	bf0c      	ite	eq
 8007f44:	2301      	moveq	r3, #1
 8007f46:	2300      	movne	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f52:	f003 0308 	and.w	r3, r3, #8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <HAL_UART_IRQHandler+0x17a>
 8007f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d04f      	beq.n	8008002 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa28 	bl	80083b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f72:	2b40      	cmp	r3, #64	@ 0x40
 8007f74:	d141      	bne.n	8007ffa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3314      	adds	r3, #20
 8007f7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3314      	adds	r3, #20
 8007f9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007fa2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007fae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1d9      	bne.n	8007f76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d013      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fce:	4a7e      	ldr	r2, [pc, #504]	@ (80081c8 <HAL_UART_IRQHandler+0x3e0>)
 8007fd0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fb fe20 	bl	8003c1c <HAL_DMA_Abort_IT>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d016      	beq.n	8008010 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fec:	4610      	mov	r0, r2
 8007fee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff0:	e00e      	b.n	8008010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f993 	bl	800831e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff8:	e00a      	b.n	8008010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f98f 	bl	800831e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008000:	e006      	b.n	8008010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f98b 	bl	800831e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800800e:	e175      	b.n	80082fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	bf00      	nop
    return;
 8008012:	e173      	b.n	80082fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	2b01      	cmp	r3, #1
 800801a:	f040 814f 	bne.w	80082bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800801e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008022:	f003 0310 	and.w	r3, r3, #16
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 8148 	beq.w	80082bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8141 	beq.w	80082bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800803a:	2300      	movs	r3, #0
 800803c:	60bb      	str	r3, [r7, #8]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60bb      	str	r3, [r7, #8]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	60bb      	str	r3, [r7, #8]
 800804e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805a:	2b40      	cmp	r3, #64	@ 0x40
 800805c:	f040 80b6 	bne.w	80081cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800806c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 8145 	beq.w	8008300 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800807a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800807e:	429a      	cmp	r2, r3
 8008080:	f080 813e 	bcs.w	8008300 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800808a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	2b20      	cmp	r3, #32
 8008094:	f000 8088 	beq.w	80081a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	330c      	adds	r3, #12
 800809e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080a6:	e853 3f00 	ldrex	r3, [r3]
 80080aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	330c      	adds	r3, #12
 80080c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80080c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1d9      	bne.n	8008098 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3314      	adds	r3, #20
 80080ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080f6:	f023 0301 	bic.w	r3, r3, #1
 80080fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3314      	adds	r3, #20
 8008104:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008108:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800810c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008110:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800811a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e1      	bne.n	80080e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3314      	adds	r3, #20
 8008126:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800812a:	e853 3f00 	ldrex	r3, [r3]
 800812e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008136:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3314      	adds	r3, #20
 8008140:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008144:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008146:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800814a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e3      	bne.n	8008120 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	330c      	adds	r3, #12
 800816c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008178:	f023 0310 	bic.w	r3, r3, #16
 800817c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	330c      	adds	r3, #12
 8008186:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800818a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800818c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008190:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e3      	bne.n	8008166 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fb fcfd 	bl	8003ba2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f8b6 	bl	8008330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081c4:	e09c      	b.n	8008300 <HAL_UART_IRQHandler+0x518>
 80081c6:	bf00      	nop
 80081c8:	0800847d 	.word	0x0800847d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 808e 	beq.w	8008304 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80081e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8089 	beq.w	8008304 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	330c      	adds	r3, #12
 80081f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008208:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	330c      	adds	r3, #12
 8008212:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008216:	647a      	str	r2, [r7, #68]	@ 0x44
 8008218:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800821c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e3      	bne.n	80081f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3314      	adds	r3, #20
 8008230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	623b      	str	r3, [r7, #32]
   return(result);
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	f023 0301 	bic.w	r3, r3, #1
 8008240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3314      	adds	r3, #20
 800824a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800824e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008250:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800825c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e3      	bne.n	800822a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0310 	bic.w	r3, r3, #16
 8008286:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	330c      	adds	r3, #12
 8008290:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008294:	61fa      	str	r2, [r7, #28]
 8008296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	69b9      	ldr	r1, [r7, #24]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	617b      	str	r3, [r7, #20]
   return(result);
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e3      	bne.n	8008270 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f83b 	bl	8008330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082ba:	e023      	b.n	8008304 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d009      	beq.n	80082dc <HAL_UART_IRQHandler+0x4f4>
 80082c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f8e5 	bl	80084a4 <UART_Transmit_IT>
    return;
 80082da:	e014      	b.n	8008306 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00e      	beq.n	8008306 <HAL_UART_IRQHandler+0x51e>
 80082e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d008      	beq.n	8008306 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f924 	bl	8008542 <UART_EndTransmit_IT>
    return;
 80082fa:	e004      	b.n	8008306 <HAL_UART_IRQHandler+0x51e>
    return;
 80082fc:	bf00      	nop
 80082fe:	e002      	b.n	8008306 <HAL_UART_IRQHandler+0x51e>
      return;
 8008300:	bf00      	nop
 8008302:	e000      	b.n	8008306 <HAL_UART_IRQHandler+0x51e>
      return;
 8008304:	bf00      	nop
  }
}
 8008306:	37e8      	adds	r7, #232	@ 0xe8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	bc80      	pop	{r7}
 800831c:	4770      	bx	lr

0800831e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr

08008330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	bc80      	pop	{r7}
 8008344:	4770      	bx	lr

08008346 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	4613      	mov	r3, r2
 8008352:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2222      	movs	r2, #34	@ 0x22
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800838a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695a      	ldr	r2, [r3, #20]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f042 0201 	orr.w	r2, r2, #1
 800839a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0220 	orr.w	r2, r2, #32
 80083aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr

080083b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b095      	sub	sp, #84	@ 0x54
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	330c      	adds	r3, #12
 80083c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	330c      	adds	r3, #12
 80083de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80083e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e5      	bne.n	80083c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3314      	adds	r3, #20
 80083fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	61fb      	str	r3, [r7, #28]
   return(result);
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f023 0301 	bic.w	r3, r3, #1
 800840a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3314      	adds	r3, #20
 8008412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800841a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800841c:	e841 2300 	strex	r3, r2, [r1]
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e5      	bne.n	80083f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842c:	2b01      	cmp	r3, #1
 800842e:	d119      	bne.n	8008464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f023 0310 	bic.w	r3, r3, #16
 8008446:	647b      	str	r3, [r7, #68]	@ 0x44
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	330c      	adds	r3, #12
 800844e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008450:	61ba      	str	r2, [r7, #24]
 8008452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6979      	ldr	r1, [r7, #20]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	613b      	str	r3, [r7, #16]
   return(result);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e5      	bne.n	8008430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008472:	bf00      	nop
 8008474:	3754      	adds	r7, #84	@ 0x54
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f7ff ff41 	bl	800831e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b21      	cmp	r3, #33	@ 0x21
 80084b6:	d13e      	bne.n	8008536 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c0:	d114      	bne.n	80084ec <UART_Transmit_IT+0x48>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d110      	bne.n	80084ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	1c9a      	adds	r2, r3, #2
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	621a      	str	r2, [r3, #32]
 80084ea:	e008      	b.n	80084fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	1c59      	adds	r1, r3, #1
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6211      	str	r1, [r2, #32]
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008502:	b29b      	uxth	r3, r3
 8008504:	3b01      	subs	r3, #1
 8008506:	b29b      	uxth	r3, r3
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	4619      	mov	r1, r3
 800850c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10f      	bne.n	8008532 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008520:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008530:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	e000      	b.n	8008538 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008536:	2302      	movs	r3, #2
  }
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr

08008542 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008558:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fed2 	bl	800830c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b08c      	sub	sp, #48	@ 0x30
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b22      	cmp	r3, #34	@ 0x22
 8008584:	f040 80ae 	bne.w	80086e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008590:	d117      	bne.n	80085c2 <UART_Receive_IT+0x50>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d113      	bne.n	80085c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	1c9a      	adds	r2, r3, #2
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	629a      	str	r2, [r3, #40]	@ 0x28
 80085c0:	e026      	b.n	8008610 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085d4:	d007      	beq.n	80085e6 <UART_Receive_IT+0x74>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10a      	bne.n	80085f4 <UART_Receive_IT+0x82>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d106      	bne.n	80085f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	e008      	b.n	8008606 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008600:	b2da      	uxtb	r2, r3
 8008602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008604:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008614:	b29b      	uxth	r3, r3
 8008616:	3b01      	subs	r3, #1
 8008618:	b29b      	uxth	r3, r3
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	4619      	mov	r1, r3
 800861e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008620:	2b00      	cmp	r3, #0
 8008622:	d15d      	bne.n	80086e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0220 	bic.w	r2, r2, #32
 8008632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695a      	ldr	r2, [r3, #20]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0201 	bic.w	r2, r2, #1
 8008652:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008666:	2b01      	cmp	r3, #1
 8008668:	d135      	bne.n	80086d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	330c      	adds	r3, #12
 8008676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	e853 3f00 	ldrex	r3, [r3]
 800867e:	613b      	str	r3, [r7, #16]
   return(result);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f023 0310 	bic.w	r3, r3, #16
 8008686:	627b      	str	r3, [r7, #36]	@ 0x24
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008690:	623a      	str	r2, [r7, #32]
 8008692:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	69f9      	ldr	r1, [r7, #28]
 8008696:	6a3a      	ldr	r2, [r7, #32]
 8008698:	e841 2300 	strex	r3, r2, [r1]
 800869c:	61bb      	str	r3, [r7, #24]
   return(result);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e5      	bne.n	8008670 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	d10a      	bne.n	80086c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff fe2e 	bl	8008330 <HAL_UARTEx_RxEventCallback>
 80086d4:	e002      	b.n	80086dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7f9 fc68 	bl	8001fac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	e002      	b.n	80086e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e000      	b.n	80086e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086e4:	2302      	movs	r3, #2
  }
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3730      	adds	r7, #48	@ 0x30
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	689a      	ldr	r2, [r3, #8]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	431a      	orrs	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	4313      	orrs	r3, r2
 8008724:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008730:	f023 030c 	bic.w	r3, r3, #12
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	6812      	ldr	r2, [r2, #0]
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	430b      	orrs	r3, r1
 800873c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	699a      	ldr	r2, [r3, #24]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a55      	ldr	r2, [pc, #340]	@ (80088b0 <UART_SetConfig+0x1c0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d103      	bne.n	8008766 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800875e:	f7fe fe75 	bl	800744c <HAL_RCC_GetPCLK2Freq>
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	e002      	b.n	800876c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008766:	f7fe fe5d 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
 800876a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008774:	d14c      	bne.n	8008810 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	009a      	lsls	r2, r3, #2
 8008780:	441a      	add	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	fbb2 f3f3 	udiv	r3, r2, r3
 800878c:	4a49      	ldr	r2, [pc, #292]	@ (80088b4 <UART_SetConfig+0x1c4>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	0119      	lsls	r1, r3, #4
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	009a      	lsls	r2, r3, #2
 80087a0:	441a      	add	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80087ac:	4b41      	ldr	r3, [pc, #260]	@ (80088b4 <UART_SetConfig+0x1c4>)
 80087ae:	fba3 0302 	umull	r0, r3, r3, r2
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	2064      	movs	r0, #100	@ 0x64
 80087b6:	fb00 f303 	mul.w	r3, r0, r3
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	3332      	adds	r3, #50	@ 0x32
 80087c0:	4a3c      	ldr	r2, [pc, #240]	@ (80088b4 <UART_SetConfig+0x1c4>)
 80087c2:	fba2 2303 	umull	r2, r3, r2, r3
 80087c6:	095b      	lsrs	r3, r3, #5
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80087ce:	4419      	add	r1, r3
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009a      	lsls	r2, r3, #2
 80087da:	441a      	add	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80087e6:	4b33      	ldr	r3, [pc, #204]	@ (80088b4 <UART_SetConfig+0x1c4>)
 80087e8:	fba3 0302 	umull	r0, r3, r3, r2
 80087ec:	095b      	lsrs	r3, r3, #5
 80087ee:	2064      	movs	r0, #100	@ 0x64
 80087f0:	fb00 f303 	mul.w	r3, r0, r3
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	3332      	adds	r3, #50	@ 0x32
 80087fa:	4a2e      	ldr	r2, [pc, #184]	@ (80088b4 <UART_SetConfig+0x1c4>)
 80087fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	f003 0207 	and.w	r2, r3, #7
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	440a      	add	r2, r1
 800880c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800880e:	e04a      	b.n	80088a6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009a      	lsls	r2, r3, #2
 800881a:	441a      	add	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	fbb2 f3f3 	udiv	r3, r2, r3
 8008826:	4a23      	ldr	r2, [pc, #140]	@ (80088b4 <UART_SetConfig+0x1c4>)
 8008828:	fba2 2303 	umull	r2, r3, r2, r3
 800882c:	095b      	lsrs	r3, r3, #5
 800882e:	0119      	lsls	r1, r3, #4
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009a      	lsls	r2, r3, #2
 800883a:	441a      	add	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	fbb2 f2f3 	udiv	r2, r2, r3
 8008846:	4b1b      	ldr	r3, [pc, #108]	@ (80088b4 <UART_SetConfig+0x1c4>)
 8008848:	fba3 0302 	umull	r0, r3, r3, r2
 800884c:	095b      	lsrs	r3, r3, #5
 800884e:	2064      	movs	r0, #100	@ 0x64
 8008850:	fb00 f303 	mul.w	r3, r0, r3
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	3332      	adds	r3, #50	@ 0x32
 800885a:	4a16      	ldr	r2, [pc, #88]	@ (80088b4 <UART_SetConfig+0x1c4>)
 800885c:	fba2 2303 	umull	r2, r3, r2, r3
 8008860:	095b      	lsrs	r3, r3, #5
 8008862:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008866:	4419      	add	r1, r3
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009a      	lsls	r2, r3, #2
 8008872:	441a      	add	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	fbb2 f2f3 	udiv	r2, r2, r3
 800887e:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <UART_SetConfig+0x1c4>)
 8008880:	fba3 0302 	umull	r0, r3, r3, r2
 8008884:	095b      	lsrs	r3, r3, #5
 8008886:	2064      	movs	r0, #100	@ 0x64
 8008888:	fb00 f303 	mul.w	r3, r0, r3
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	3332      	adds	r3, #50	@ 0x32
 8008892:	4a08      	ldr	r2, [pc, #32]	@ (80088b4 <UART_SetConfig+0x1c4>)
 8008894:	fba2 2303 	umull	r2, r3, r2, r3
 8008898:	095b      	lsrs	r3, r3, #5
 800889a:	f003 020f 	and.w	r2, r3, #15
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	440a      	add	r2, r1
 80088a4:	609a      	str	r2, [r3, #8]
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40013800 	.word	0x40013800
 80088b4:	51eb851f 	.word	0x51eb851f

080088b8 <atof>:
 80088b8:	2100      	movs	r1, #0
 80088ba:	f000 bdf9 	b.w	80094b0 <strtod>

080088be <sulp>:
 80088be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c2:	460f      	mov	r7, r1
 80088c4:	4690      	mov	r8, r2
 80088c6:	f003 faf7 	bl	800beb8 <__ulp>
 80088ca:	4604      	mov	r4, r0
 80088cc:	460d      	mov	r5, r1
 80088ce:	f1b8 0f00 	cmp.w	r8, #0
 80088d2:	d011      	beq.n	80088f8 <sulp+0x3a>
 80088d4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80088d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dd0b      	ble.n	80088f8 <sulp+0x3a>
 80088e0:	2400      	movs	r4, #0
 80088e2:	051b      	lsls	r3, r3, #20
 80088e4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80088e8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80088ec:	4622      	mov	r2, r4
 80088ee:	462b      	mov	r3, r5
 80088f0:	f7f7 fe0a 	bl	8000508 <__aeabi_dmul>
 80088f4:	4604      	mov	r4, r0
 80088f6:	460d      	mov	r5, r1
 80088f8:	4620      	mov	r0, r4
 80088fa:	4629      	mov	r1, r5
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008900 <_strtod_l>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	b09f      	sub	sp, #124	@ 0x7c
 8008906:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008908:	2200      	movs	r2, #0
 800890a:	460c      	mov	r4, r1
 800890c:	921a      	str	r2, [sp, #104]	@ 0x68
 800890e:	f04f 0a00 	mov.w	sl, #0
 8008912:	f04f 0b00 	mov.w	fp, #0
 8008916:	460a      	mov	r2, r1
 8008918:	9005      	str	r0, [sp, #20]
 800891a:	9219      	str	r2, [sp, #100]	@ 0x64
 800891c:	7811      	ldrb	r1, [r2, #0]
 800891e:	292b      	cmp	r1, #43	@ 0x2b
 8008920:	d048      	beq.n	80089b4 <_strtod_l+0xb4>
 8008922:	d836      	bhi.n	8008992 <_strtod_l+0x92>
 8008924:	290d      	cmp	r1, #13
 8008926:	d830      	bhi.n	800898a <_strtod_l+0x8a>
 8008928:	2908      	cmp	r1, #8
 800892a:	d830      	bhi.n	800898e <_strtod_l+0x8e>
 800892c:	2900      	cmp	r1, #0
 800892e:	d039      	beq.n	80089a4 <_strtod_l+0xa4>
 8008930:	2200      	movs	r2, #0
 8008932:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008934:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008936:	782a      	ldrb	r2, [r5, #0]
 8008938:	2a30      	cmp	r2, #48	@ 0x30
 800893a:	f040 80b1 	bne.w	8008aa0 <_strtod_l+0x1a0>
 800893e:	786a      	ldrb	r2, [r5, #1]
 8008940:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008944:	2a58      	cmp	r2, #88	@ 0x58
 8008946:	d16c      	bne.n	8008a22 <_strtod_l+0x122>
 8008948:	9302      	str	r3, [sp, #8]
 800894a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800894c:	4a8e      	ldr	r2, [pc, #568]	@ (8008b88 <_strtod_l+0x288>)
 800894e:	9301      	str	r3, [sp, #4]
 8008950:	ab1a      	add	r3, sp, #104	@ 0x68
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	9805      	ldr	r0, [sp, #20]
 8008956:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008958:	a919      	add	r1, sp, #100	@ 0x64
 800895a:	f002 fba1 	bl	800b0a0 <__gethex>
 800895e:	f010 060f 	ands.w	r6, r0, #15
 8008962:	4604      	mov	r4, r0
 8008964:	d005      	beq.n	8008972 <_strtod_l+0x72>
 8008966:	2e06      	cmp	r6, #6
 8008968:	d126      	bne.n	80089b8 <_strtod_l+0xb8>
 800896a:	2300      	movs	r3, #0
 800896c:	3501      	adds	r5, #1
 800896e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008972:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008974:	2b00      	cmp	r3, #0
 8008976:	f040 8584 	bne.w	8009482 <_strtod_l+0xb82>
 800897a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800897c:	b1bb      	cbz	r3, 80089ae <_strtod_l+0xae>
 800897e:	4650      	mov	r0, sl
 8008980:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008984:	b01f      	add	sp, #124	@ 0x7c
 8008986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898a:	2920      	cmp	r1, #32
 800898c:	d1d0      	bne.n	8008930 <_strtod_l+0x30>
 800898e:	3201      	adds	r2, #1
 8008990:	e7c3      	b.n	800891a <_strtod_l+0x1a>
 8008992:	292d      	cmp	r1, #45	@ 0x2d
 8008994:	d1cc      	bne.n	8008930 <_strtod_l+0x30>
 8008996:	2101      	movs	r1, #1
 8008998:	910b      	str	r1, [sp, #44]	@ 0x2c
 800899a:	1c51      	adds	r1, r2, #1
 800899c:	9119      	str	r1, [sp, #100]	@ 0x64
 800899e:	7852      	ldrb	r2, [r2, #1]
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	d1c7      	bne.n	8008934 <_strtod_l+0x34>
 80089a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089a6:	9419      	str	r4, [sp, #100]	@ 0x64
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f040 8568 	bne.w	800947e <_strtod_l+0xb7e>
 80089ae:	4650      	mov	r0, sl
 80089b0:	4659      	mov	r1, fp
 80089b2:	e7e7      	b.n	8008984 <_strtod_l+0x84>
 80089b4:	2100      	movs	r1, #0
 80089b6:	e7ef      	b.n	8008998 <_strtod_l+0x98>
 80089b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089ba:	b13a      	cbz	r2, 80089cc <_strtod_l+0xcc>
 80089bc:	2135      	movs	r1, #53	@ 0x35
 80089be:	a81c      	add	r0, sp, #112	@ 0x70
 80089c0:	f003 fb6a 	bl	800c098 <__copybits>
 80089c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089c6:	9805      	ldr	r0, [sp, #20]
 80089c8:	f002 ff44 	bl	800b854 <_Bfree>
 80089cc:	3e01      	subs	r6, #1
 80089ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80089d0:	2e04      	cmp	r6, #4
 80089d2:	d806      	bhi.n	80089e2 <_strtod_l+0xe2>
 80089d4:	e8df f006 	tbb	[pc, r6]
 80089d8:	201d0314 	.word	0x201d0314
 80089dc:	14          	.byte	0x14
 80089dd:	00          	.byte	0x00
 80089de:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80089e2:	05e1      	lsls	r1, r4, #23
 80089e4:	bf48      	it	mi
 80089e6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80089ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089ee:	0d1b      	lsrs	r3, r3, #20
 80089f0:	051b      	lsls	r3, r3, #20
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1bd      	bne.n	8008972 <_strtod_l+0x72>
 80089f6:	f001 fbe5 	bl	800a1c4 <__errno>
 80089fa:	2322      	movs	r3, #34	@ 0x22
 80089fc:	6003      	str	r3, [r0, #0]
 80089fe:	e7b8      	b.n	8008972 <_strtod_l+0x72>
 8008a00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a08:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a0c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a10:	e7e7      	b.n	80089e2 <_strtod_l+0xe2>
 8008a12:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008b8c <_strtod_l+0x28c>
 8008a16:	e7e4      	b.n	80089e2 <_strtod_l+0xe2>
 8008a18:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a1c:	f04f 3aff 	mov.w	sl, #4294967295
 8008a20:	e7df      	b.n	80089e2 <_strtod_l+0xe2>
 8008a22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	2b30      	cmp	r3, #48	@ 0x30
 8008a2c:	d0f9      	beq.n	8008a22 <_strtod_l+0x122>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d09f      	beq.n	8008972 <_strtod_l+0x72>
 8008a32:	2301      	movs	r3, #1
 8008a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a38:	220a      	movs	r2, #10
 8008a3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	461f      	mov	r7, r3
 8008a40:	9308      	str	r3, [sp, #32]
 8008a42:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a44:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a46:	7805      	ldrb	r5, [r0, #0]
 8008a48:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008a4c:	b2d9      	uxtb	r1, r3
 8008a4e:	2909      	cmp	r1, #9
 8008a50:	d928      	bls.n	8008aa4 <_strtod_l+0x1a4>
 8008a52:	2201      	movs	r2, #1
 8008a54:	494e      	ldr	r1, [pc, #312]	@ (8008b90 <_strtod_l+0x290>)
 8008a56:	f001 fad4 	bl	800a002 <strncmp>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d032      	beq.n	8008ac4 <_strtod_l+0x1c4>
 8008a5e:	2000      	movs	r0, #0
 8008a60:	462a      	mov	r2, r5
 8008a62:	4681      	mov	r9, r0
 8008a64:	463d      	mov	r5, r7
 8008a66:	4603      	mov	r3, r0
 8008a68:	2a65      	cmp	r2, #101	@ 0x65
 8008a6a:	d001      	beq.n	8008a70 <_strtod_l+0x170>
 8008a6c:	2a45      	cmp	r2, #69	@ 0x45
 8008a6e:	d114      	bne.n	8008a9a <_strtod_l+0x19a>
 8008a70:	b91d      	cbnz	r5, 8008a7a <_strtod_l+0x17a>
 8008a72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a74:	4302      	orrs	r2, r0
 8008a76:	d095      	beq.n	80089a4 <_strtod_l+0xa4>
 8008a78:	2500      	movs	r5, #0
 8008a7a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008a7c:	1c62      	adds	r2, r4, #1
 8008a7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a80:	7862      	ldrb	r2, [r4, #1]
 8008a82:	2a2b      	cmp	r2, #43	@ 0x2b
 8008a84:	d077      	beq.n	8008b76 <_strtod_l+0x276>
 8008a86:	2a2d      	cmp	r2, #45	@ 0x2d
 8008a88:	d07b      	beq.n	8008b82 <_strtod_l+0x282>
 8008a8a:	f04f 0c00 	mov.w	ip, #0
 8008a8e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008a92:	2909      	cmp	r1, #9
 8008a94:	f240 8082 	bls.w	8008b9c <_strtod_l+0x29c>
 8008a98:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a9a:	f04f 0800 	mov.w	r8, #0
 8008a9e:	e0a2      	b.n	8008be6 <_strtod_l+0x2e6>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e7c7      	b.n	8008a34 <_strtod_l+0x134>
 8008aa4:	2f08      	cmp	r7, #8
 8008aa6:	bfd5      	itete	le
 8008aa8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008aaa:	9908      	ldrgt	r1, [sp, #32]
 8008aac:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ab0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ab4:	f100 0001 	add.w	r0, r0, #1
 8008ab8:	bfd4      	ite	le
 8008aba:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008abc:	9308      	strgt	r3, [sp, #32]
 8008abe:	3701      	adds	r7, #1
 8008ac0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ac2:	e7bf      	b.n	8008a44 <_strtod_l+0x144>
 8008ac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aca:	785a      	ldrb	r2, [r3, #1]
 8008acc:	b37f      	cbz	r7, 8008b2e <_strtod_l+0x22e>
 8008ace:	4681      	mov	r9, r0
 8008ad0:	463d      	mov	r5, r7
 8008ad2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008ad6:	2b09      	cmp	r3, #9
 8008ad8:	d912      	bls.n	8008b00 <_strtod_l+0x200>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e7c4      	b.n	8008a68 <_strtod_l+0x168>
 8008ade:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ae6:	785a      	ldrb	r2, [r3, #1]
 8008ae8:	2a30      	cmp	r2, #48	@ 0x30
 8008aea:	d0f8      	beq.n	8008ade <_strtod_l+0x1de>
 8008aec:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	f200 84cb 	bhi.w	800948c <_strtod_l+0xb8c>
 8008af6:	4681      	mov	r9, r0
 8008af8:	2000      	movs	r0, #0
 8008afa:	4605      	mov	r5, r0
 8008afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008afe:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b00:	3a30      	subs	r2, #48	@ 0x30
 8008b02:	f100 0301 	add.w	r3, r0, #1
 8008b06:	d02a      	beq.n	8008b5e <_strtod_l+0x25e>
 8008b08:	4499      	add	r9, r3
 8008b0a:	210a      	movs	r1, #10
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	eb00 0c05 	add.w	ip, r0, r5
 8008b12:	4563      	cmp	r3, ip
 8008b14:	d10d      	bne.n	8008b32 <_strtod_l+0x232>
 8008b16:	1c69      	adds	r1, r5, #1
 8008b18:	4401      	add	r1, r0
 8008b1a:	4428      	add	r0, r5
 8008b1c:	2808      	cmp	r0, #8
 8008b1e:	dc16      	bgt.n	8008b4e <_strtod_l+0x24e>
 8008b20:	230a      	movs	r3, #10
 8008b22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b24:	fb03 2300 	mla	r3, r3, r0, r2
 8008b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e018      	b.n	8008b60 <_strtod_l+0x260>
 8008b2e:	4638      	mov	r0, r7
 8008b30:	e7da      	b.n	8008ae8 <_strtod_l+0x1e8>
 8008b32:	2b08      	cmp	r3, #8
 8008b34:	f103 0301 	add.w	r3, r3, #1
 8008b38:	dc03      	bgt.n	8008b42 <_strtod_l+0x242>
 8008b3a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008b3c:	434e      	muls	r6, r1
 8008b3e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008b40:	e7e7      	b.n	8008b12 <_strtod_l+0x212>
 8008b42:	2b10      	cmp	r3, #16
 8008b44:	bfde      	ittt	le
 8008b46:	9e08      	ldrle	r6, [sp, #32]
 8008b48:	434e      	mulle	r6, r1
 8008b4a:	9608      	strle	r6, [sp, #32]
 8008b4c:	e7e1      	b.n	8008b12 <_strtod_l+0x212>
 8008b4e:	280f      	cmp	r0, #15
 8008b50:	dceb      	bgt.n	8008b2a <_strtod_l+0x22a>
 8008b52:	230a      	movs	r3, #10
 8008b54:	9808      	ldr	r0, [sp, #32]
 8008b56:	fb03 2300 	mla	r3, r3, r0, r2
 8008b5a:	9308      	str	r3, [sp, #32]
 8008b5c:	e7e5      	b.n	8008b2a <_strtod_l+0x22a>
 8008b5e:	4629      	mov	r1, r5
 8008b60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b62:	460d      	mov	r5, r1
 8008b64:	1c50      	adds	r0, r2, #1
 8008b66:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b68:	7852      	ldrb	r2, [r2, #1]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	e7b1      	b.n	8008ad2 <_strtod_l+0x1d2>
 8008b6e:	f04f 0900 	mov.w	r9, #0
 8008b72:	2301      	movs	r3, #1
 8008b74:	e77d      	b.n	8008a72 <_strtod_l+0x172>
 8008b76:	f04f 0c00 	mov.w	ip, #0
 8008b7a:	1ca2      	adds	r2, r4, #2
 8008b7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b7e:	78a2      	ldrb	r2, [r4, #2]
 8008b80:	e785      	b.n	8008a8e <_strtod_l+0x18e>
 8008b82:	f04f 0c01 	mov.w	ip, #1
 8008b86:	e7f8      	b.n	8008b7a <_strtod_l+0x27a>
 8008b88:	0800cc90 	.word	0x0800cc90
 8008b8c:	7ff00000 	.word	0x7ff00000
 8008b90:	0800cc78 	.word	0x0800cc78
 8008b94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b96:	1c51      	adds	r1, r2, #1
 8008b98:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b9a:	7852      	ldrb	r2, [r2, #1]
 8008b9c:	2a30      	cmp	r2, #48	@ 0x30
 8008b9e:	d0f9      	beq.n	8008b94 <_strtod_l+0x294>
 8008ba0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ba4:	2908      	cmp	r1, #8
 8008ba6:	f63f af78 	bhi.w	8008a9a <_strtod_l+0x19a>
 8008baa:	f04f 080a 	mov.w	r8, #10
 8008bae:	3a30      	subs	r2, #48	@ 0x30
 8008bb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008bb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bb8:	1c56      	adds	r6, r2, #1
 8008bba:	9619      	str	r6, [sp, #100]	@ 0x64
 8008bbc:	7852      	ldrb	r2, [r2, #1]
 8008bbe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008bc2:	f1be 0f09 	cmp.w	lr, #9
 8008bc6:	d939      	bls.n	8008c3c <_strtod_l+0x33c>
 8008bc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008bca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008bce:	1a76      	subs	r6, r6, r1
 8008bd0:	2e08      	cmp	r6, #8
 8008bd2:	dc03      	bgt.n	8008bdc <_strtod_l+0x2dc>
 8008bd4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008bd6:	4588      	cmp	r8, r1
 8008bd8:	bfa8      	it	ge
 8008bda:	4688      	movge	r8, r1
 8008bdc:	f1bc 0f00 	cmp.w	ip, #0
 8008be0:	d001      	beq.n	8008be6 <_strtod_l+0x2e6>
 8008be2:	f1c8 0800 	rsb	r8, r8, #0
 8008be6:	2d00      	cmp	r5, #0
 8008be8:	d14e      	bne.n	8008c88 <_strtod_l+0x388>
 8008bea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bec:	4308      	orrs	r0, r1
 8008bee:	f47f aec0 	bne.w	8008972 <_strtod_l+0x72>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f47f aed6 	bne.w	80089a4 <_strtod_l+0xa4>
 8008bf8:	2a69      	cmp	r2, #105	@ 0x69
 8008bfa:	d028      	beq.n	8008c4e <_strtod_l+0x34e>
 8008bfc:	dc25      	bgt.n	8008c4a <_strtod_l+0x34a>
 8008bfe:	2a49      	cmp	r2, #73	@ 0x49
 8008c00:	d025      	beq.n	8008c4e <_strtod_l+0x34e>
 8008c02:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c04:	f47f aece 	bne.w	80089a4 <_strtod_l+0xa4>
 8008c08:	499a      	ldr	r1, [pc, #616]	@ (8008e74 <_strtod_l+0x574>)
 8008c0a:	a819      	add	r0, sp, #100	@ 0x64
 8008c0c:	f002 fc6a 	bl	800b4e4 <__match>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	f43f aec7 	beq.w	80089a4 <_strtod_l+0xa4>
 8008c16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b28      	cmp	r3, #40	@ 0x28
 8008c1c:	d12e      	bne.n	8008c7c <_strtod_l+0x37c>
 8008c1e:	4996      	ldr	r1, [pc, #600]	@ (8008e78 <_strtod_l+0x578>)
 8008c20:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c22:	a819      	add	r0, sp, #100	@ 0x64
 8008c24:	f002 fc72 	bl	800b50c <__hexnan>
 8008c28:	2805      	cmp	r0, #5
 8008c2a:	d127      	bne.n	8008c7c <_strtod_l+0x37c>
 8008c2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008c32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008c36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008c3a:	e69a      	b.n	8008972 <_strtod_l+0x72>
 8008c3c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c3e:	fb08 2101 	mla	r1, r8, r1, r2
 8008c42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008c46:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c48:	e7b5      	b.n	8008bb6 <_strtod_l+0x2b6>
 8008c4a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008c4c:	e7da      	b.n	8008c04 <_strtod_l+0x304>
 8008c4e:	498b      	ldr	r1, [pc, #556]	@ (8008e7c <_strtod_l+0x57c>)
 8008c50:	a819      	add	r0, sp, #100	@ 0x64
 8008c52:	f002 fc47 	bl	800b4e4 <__match>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f43f aea4 	beq.w	80089a4 <_strtod_l+0xa4>
 8008c5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c5e:	4988      	ldr	r1, [pc, #544]	@ (8008e80 <_strtod_l+0x580>)
 8008c60:	3b01      	subs	r3, #1
 8008c62:	a819      	add	r0, sp, #100	@ 0x64
 8008c64:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c66:	f002 fc3d 	bl	800b4e4 <__match>
 8008c6a:	b910      	cbnz	r0, 8008c72 <_strtod_l+0x372>
 8008c6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c6e:	3301      	adds	r3, #1
 8008c70:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c72:	f04f 0a00 	mov.w	sl, #0
 8008c76:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008e84 <_strtod_l+0x584>
 8008c7a:	e67a      	b.n	8008972 <_strtod_l+0x72>
 8008c7c:	4882      	ldr	r0, [pc, #520]	@ (8008e88 <_strtod_l+0x588>)
 8008c7e:	f001 faeb 	bl	800a258 <nan>
 8008c82:	4682      	mov	sl, r0
 8008c84:	468b      	mov	fp, r1
 8008c86:	e674      	b.n	8008972 <_strtod_l+0x72>
 8008c88:	eba8 0309 	sub.w	r3, r8, r9
 8008c8c:	2f00      	cmp	r7, #0
 8008c8e:	bf08      	it	eq
 8008c90:	462f      	moveq	r7, r5
 8008c92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c94:	2d10      	cmp	r5, #16
 8008c96:	462c      	mov	r4, r5
 8008c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c9a:	bfa8      	it	ge
 8008c9c:	2410      	movge	r4, #16
 8008c9e:	f7f7 fbb9 	bl	8000414 <__aeabi_ui2d>
 8008ca2:	2d09      	cmp	r5, #9
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	468b      	mov	fp, r1
 8008ca8:	dc11      	bgt.n	8008cce <_strtod_l+0x3ce>
 8008caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f43f ae60 	beq.w	8008972 <_strtod_l+0x72>
 8008cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb4:	dd76      	ble.n	8008da4 <_strtod_l+0x4a4>
 8008cb6:	2b16      	cmp	r3, #22
 8008cb8:	dc5d      	bgt.n	8008d76 <_strtod_l+0x476>
 8008cba:	4974      	ldr	r1, [pc, #464]	@ (8008e8c <_strtod_l+0x58c>)
 8008cbc:	4652      	mov	r2, sl
 8008cbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cc2:	465b      	mov	r3, fp
 8008cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cc8:	f7f7 fc1e 	bl	8000508 <__aeabi_dmul>
 8008ccc:	e7d9      	b.n	8008c82 <_strtod_l+0x382>
 8008cce:	4b6f      	ldr	r3, [pc, #444]	@ (8008e8c <_strtod_l+0x58c>)
 8008cd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cd4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008cd8:	f7f7 fc16 	bl	8000508 <__aeabi_dmul>
 8008cdc:	4682      	mov	sl, r0
 8008cde:	9808      	ldr	r0, [sp, #32]
 8008ce0:	468b      	mov	fp, r1
 8008ce2:	f7f7 fb97 	bl	8000414 <__aeabi_ui2d>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4650      	mov	r0, sl
 8008cec:	4659      	mov	r1, fp
 8008cee:	f7f7 fa55 	bl	800019c <__adddf3>
 8008cf2:	2d0f      	cmp	r5, #15
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	468b      	mov	fp, r1
 8008cf8:	ddd7      	ble.n	8008caa <_strtod_l+0x3aa>
 8008cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cfc:	1b2c      	subs	r4, r5, r4
 8008cfe:	441c      	add	r4, r3
 8008d00:	2c00      	cmp	r4, #0
 8008d02:	f340 8096 	ble.w	8008e32 <_strtod_l+0x532>
 8008d06:	f014 030f 	ands.w	r3, r4, #15
 8008d0a:	d00a      	beq.n	8008d22 <_strtod_l+0x422>
 8008d0c:	495f      	ldr	r1, [pc, #380]	@ (8008e8c <_strtod_l+0x58c>)
 8008d0e:	4652      	mov	r2, sl
 8008d10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d18:	465b      	mov	r3, fp
 8008d1a:	f7f7 fbf5 	bl	8000508 <__aeabi_dmul>
 8008d1e:	4682      	mov	sl, r0
 8008d20:	468b      	mov	fp, r1
 8008d22:	f034 040f 	bics.w	r4, r4, #15
 8008d26:	d073      	beq.n	8008e10 <_strtod_l+0x510>
 8008d28:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008d2c:	dd48      	ble.n	8008dc0 <_strtod_l+0x4c0>
 8008d2e:	2400      	movs	r4, #0
 8008d30:	46a0      	mov	r8, r4
 8008d32:	46a1      	mov	r9, r4
 8008d34:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d36:	2322      	movs	r3, #34	@ 0x22
 8008d38:	f04f 0a00 	mov.w	sl, #0
 8008d3c:	9a05      	ldr	r2, [sp, #20]
 8008d3e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008e84 <_strtod_l+0x584>
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f43f ae13 	beq.w	8008972 <_strtod_l+0x72>
 8008d4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d4e:	9805      	ldr	r0, [sp, #20]
 8008d50:	f002 fd80 	bl	800b854 <_Bfree>
 8008d54:	4649      	mov	r1, r9
 8008d56:	9805      	ldr	r0, [sp, #20]
 8008d58:	f002 fd7c 	bl	800b854 <_Bfree>
 8008d5c:	4641      	mov	r1, r8
 8008d5e:	9805      	ldr	r0, [sp, #20]
 8008d60:	f002 fd78 	bl	800b854 <_Bfree>
 8008d64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d66:	9805      	ldr	r0, [sp, #20]
 8008d68:	f002 fd74 	bl	800b854 <_Bfree>
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	9805      	ldr	r0, [sp, #20]
 8008d70:	f002 fd70 	bl	800b854 <_Bfree>
 8008d74:	e5fd      	b.n	8008972 <_strtod_l+0x72>
 8008d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d78:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	dbbc      	blt.n	8008cfa <_strtod_l+0x3fa>
 8008d80:	4c42      	ldr	r4, [pc, #264]	@ (8008e8c <_strtod_l+0x58c>)
 8008d82:	f1c5 050f 	rsb	r5, r5, #15
 8008d86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d8a:	4652      	mov	r2, sl
 8008d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d90:	465b      	mov	r3, fp
 8008d92:	f7f7 fbb9 	bl	8000508 <__aeabi_dmul>
 8008d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d98:	1b5d      	subs	r5, r3, r5
 8008d9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008da2:	e791      	b.n	8008cc8 <_strtod_l+0x3c8>
 8008da4:	3316      	adds	r3, #22
 8008da6:	dba8      	blt.n	8008cfa <_strtod_l+0x3fa>
 8008da8:	4b38      	ldr	r3, [pc, #224]	@ (8008e8c <_strtod_l+0x58c>)
 8008daa:	eba9 0808 	sub.w	r8, r9, r8
 8008dae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008db2:	4650      	mov	r0, sl
 8008db4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008db8:	4659      	mov	r1, fp
 8008dba:	f7f7 fccf 	bl	800075c <__aeabi_ddiv>
 8008dbe:	e760      	b.n	8008c82 <_strtod_l+0x382>
 8008dc0:	4b33      	ldr	r3, [pc, #204]	@ (8008e90 <_strtod_l+0x590>)
 8008dc2:	4650      	mov	r0, sl
 8008dc4:	9308      	str	r3, [sp, #32]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	4659      	mov	r1, fp
 8008dca:	461e      	mov	r6, r3
 8008dcc:	1124      	asrs	r4, r4, #4
 8008dce:	2c01      	cmp	r4, #1
 8008dd0:	dc21      	bgt.n	8008e16 <_strtod_l+0x516>
 8008dd2:	b10b      	cbz	r3, 8008dd8 <_strtod_l+0x4d8>
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	468b      	mov	fp, r1
 8008dd8:	492d      	ldr	r1, [pc, #180]	@ (8008e90 <_strtod_l+0x590>)
 8008dda:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008dde:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008de2:	4652      	mov	r2, sl
 8008de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de8:	465b      	mov	r3, fp
 8008dea:	f7f7 fb8d 	bl	8000508 <__aeabi_dmul>
 8008dee:	4b25      	ldr	r3, [pc, #148]	@ (8008e84 <_strtod_l+0x584>)
 8008df0:	460a      	mov	r2, r1
 8008df2:	400b      	ands	r3, r1
 8008df4:	4927      	ldr	r1, [pc, #156]	@ (8008e94 <_strtod_l+0x594>)
 8008df6:	4682      	mov	sl, r0
 8008df8:	428b      	cmp	r3, r1
 8008dfa:	d898      	bhi.n	8008d2e <_strtod_l+0x42e>
 8008dfc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e00:	428b      	cmp	r3, r1
 8008e02:	bf86      	itte	hi
 8008e04:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e08:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008e98 <_strtod_l+0x598>
 8008e0c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e10:	2300      	movs	r3, #0
 8008e12:	9308      	str	r3, [sp, #32]
 8008e14:	e07a      	b.n	8008f0c <_strtod_l+0x60c>
 8008e16:	07e2      	lsls	r2, r4, #31
 8008e18:	d505      	bpl.n	8008e26 <_strtod_l+0x526>
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f7f7 fb72 	bl	8000508 <__aeabi_dmul>
 8008e24:	2301      	movs	r3, #1
 8008e26:	9a08      	ldr	r2, [sp, #32]
 8008e28:	3601      	adds	r6, #1
 8008e2a:	3208      	adds	r2, #8
 8008e2c:	1064      	asrs	r4, r4, #1
 8008e2e:	9208      	str	r2, [sp, #32]
 8008e30:	e7cd      	b.n	8008dce <_strtod_l+0x4ce>
 8008e32:	d0ed      	beq.n	8008e10 <_strtod_l+0x510>
 8008e34:	4264      	negs	r4, r4
 8008e36:	f014 020f 	ands.w	r2, r4, #15
 8008e3a:	d00a      	beq.n	8008e52 <_strtod_l+0x552>
 8008e3c:	4b13      	ldr	r3, [pc, #76]	@ (8008e8c <_strtod_l+0x58c>)
 8008e3e:	4650      	mov	r0, sl
 8008e40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e44:	4659      	mov	r1, fp
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f7f7 fc87 	bl	800075c <__aeabi_ddiv>
 8008e4e:	4682      	mov	sl, r0
 8008e50:	468b      	mov	fp, r1
 8008e52:	1124      	asrs	r4, r4, #4
 8008e54:	d0dc      	beq.n	8008e10 <_strtod_l+0x510>
 8008e56:	2c1f      	cmp	r4, #31
 8008e58:	dd20      	ble.n	8008e9c <_strtod_l+0x59c>
 8008e5a:	2400      	movs	r4, #0
 8008e5c:	46a0      	mov	r8, r4
 8008e5e:	46a1      	mov	r9, r4
 8008e60:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e62:	2322      	movs	r3, #34	@ 0x22
 8008e64:	9a05      	ldr	r2, [sp, #20]
 8008e66:	f04f 0a00 	mov.w	sl, #0
 8008e6a:	f04f 0b00 	mov.w	fp, #0
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	e768      	b.n	8008d44 <_strtod_l+0x444>
 8008e72:	bf00      	nop
 8008e74:	0800ccdd 	.word	0x0800ccdd
 8008e78:	0800cc7c 	.word	0x0800cc7c
 8008e7c:	0800ccd5 	.word	0x0800ccd5
 8008e80:	0800cdbc 	.word	0x0800cdbc
 8008e84:	7ff00000 	.word	0x7ff00000
 8008e88:	0800cdb8 	.word	0x0800cdb8
 8008e8c:	0800cf20 	.word	0x0800cf20
 8008e90:	0800cef8 	.word	0x0800cef8
 8008e94:	7ca00000 	.word	0x7ca00000
 8008e98:	7fefffff 	.word	0x7fefffff
 8008e9c:	f014 0310 	ands.w	r3, r4, #16
 8008ea0:	bf18      	it	ne
 8008ea2:	236a      	movne	r3, #106	@ 0x6a
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	9308      	str	r3, [sp, #32]
 8008ea8:	4659      	mov	r1, fp
 8008eaa:	2300      	movs	r3, #0
 8008eac:	4ea9      	ldr	r6, [pc, #676]	@ (8009154 <_strtod_l+0x854>)
 8008eae:	07e2      	lsls	r2, r4, #31
 8008eb0:	d504      	bpl.n	8008ebc <_strtod_l+0x5bc>
 8008eb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008eb6:	f7f7 fb27 	bl	8000508 <__aeabi_dmul>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	1064      	asrs	r4, r4, #1
 8008ebe:	f106 0608 	add.w	r6, r6, #8
 8008ec2:	d1f4      	bne.n	8008eae <_strtod_l+0x5ae>
 8008ec4:	b10b      	cbz	r3, 8008eca <_strtod_l+0x5ca>
 8008ec6:	4682      	mov	sl, r0
 8008ec8:	468b      	mov	fp, r1
 8008eca:	9b08      	ldr	r3, [sp, #32]
 8008ecc:	b1b3      	cbz	r3, 8008efc <_strtod_l+0x5fc>
 8008ece:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008ed2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	4659      	mov	r1, fp
 8008eda:	dd0f      	ble.n	8008efc <_strtod_l+0x5fc>
 8008edc:	2b1f      	cmp	r3, #31
 8008ede:	dd57      	ble.n	8008f90 <_strtod_l+0x690>
 8008ee0:	2b34      	cmp	r3, #52	@ 0x34
 8008ee2:	bfd8      	it	le
 8008ee4:	f04f 33ff 	movle.w	r3, #4294967295
 8008ee8:	f04f 0a00 	mov.w	sl, #0
 8008eec:	bfcf      	iteee	gt
 8008eee:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008ef2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008ef6:	4093      	lslle	r3, r2
 8008ef8:	ea03 0b01 	andle.w	fp, r3, r1
 8008efc:	2200      	movs	r2, #0
 8008efe:	2300      	movs	r3, #0
 8008f00:	4650      	mov	r0, sl
 8008f02:	4659      	mov	r1, fp
 8008f04:	f7f7 fd68 	bl	80009d8 <__aeabi_dcmpeq>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d1a6      	bne.n	8008e5a <_strtod_l+0x55a>
 8008f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f0e:	463a      	mov	r2, r7
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f14:	462b      	mov	r3, r5
 8008f16:	9805      	ldr	r0, [sp, #20]
 8008f18:	f002 fd04 	bl	800b924 <__s2b>
 8008f1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f43f af05 	beq.w	8008d2e <_strtod_l+0x42e>
 8008f24:	2400      	movs	r4, #0
 8008f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f28:	eba9 0308 	sub.w	r3, r9, r8
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	bfa8      	it	ge
 8008f30:	2300      	movge	r3, #0
 8008f32:	46a0      	mov	r8, r4
 8008f34:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f3a:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f3e:	9805      	ldr	r0, [sp, #20]
 8008f40:	6859      	ldr	r1, [r3, #4]
 8008f42:	f002 fc47 	bl	800b7d4 <_Balloc>
 8008f46:	4681      	mov	r9, r0
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	f43f aef4 	beq.w	8008d36 <_strtod_l+0x436>
 8008f4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f50:	300c      	adds	r0, #12
 8008f52:	691a      	ldr	r2, [r3, #16]
 8008f54:	f103 010c 	add.w	r1, r3, #12
 8008f58:	3202      	adds	r2, #2
 8008f5a:	0092      	lsls	r2, r2, #2
 8008f5c:	f001 f96d 	bl	800a23a <memcpy>
 8008f60:	ab1c      	add	r3, sp, #112	@ 0x70
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	4652      	mov	r2, sl
 8008f6a:	465b      	mov	r3, fp
 8008f6c:	9805      	ldr	r0, [sp, #20]
 8008f6e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008f72:	f003 f809 	bl	800bf88 <__d2b>
 8008f76:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	f43f aedc 	beq.w	8008d36 <_strtod_l+0x436>
 8008f7e:	2101      	movs	r1, #1
 8008f80:	9805      	ldr	r0, [sp, #20]
 8008f82:	f002 fd65 	bl	800ba50 <__i2b>
 8008f86:	4680      	mov	r8, r0
 8008f88:	b948      	cbnz	r0, 8008f9e <_strtod_l+0x69e>
 8008f8a:	f04f 0800 	mov.w	r8, #0
 8008f8e:	e6d2      	b.n	8008d36 <_strtod_l+0x436>
 8008f90:	f04f 32ff 	mov.w	r2, #4294967295
 8008f94:	fa02 f303 	lsl.w	r3, r2, r3
 8008f98:	ea03 0a0a 	and.w	sl, r3, sl
 8008f9c:	e7ae      	b.n	8008efc <_strtod_l+0x5fc>
 8008f9e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008fa0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008fa2:	2d00      	cmp	r5, #0
 8008fa4:	bfab      	itete	ge
 8008fa6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008fa8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008faa:	18ef      	addge	r7, r5, r3
 8008fac:	1b5e      	sublt	r6, r3, r5
 8008fae:	9b08      	ldr	r3, [sp, #32]
 8008fb0:	bfa8      	it	ge
 8008fb2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008fb4:	eba5 0503 	sub.w	r5, r5, r3
 8008fb8:	4415      	add	r5, r2
 8008fba:	4b67      	ldr	r3, [pc, #412]	@ (8009158 <_strtod_l+0x858>)
 8008fbc:	f105 35ff 	add.w	r5, r5, #4294967295
 8008fc0:	bfb8      	it	lt
 8008fc2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008fc4:	429d      	cmp	r5, r3
 8008fc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008fca:	da50      	bge.n	800906e <_strtod_l+0x76e>
 8008fcc:	1b5b      	subs	r3, r3, r5
 8008fce:	2b1f      	cmp	r3, #31
 8008fd0:	f04f 0101 	mov.w	r1, #1
 8008fd4:	eba2 0203 	sub.w	r2, r2, r3
 8008fd8:	dc3d      	bgt.n	8009056 <_strtod_l+0x756>
 8008fda:	fa01 f303 	lsl.w	r3, r1, r3
 8008fde:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fe4:	18bd      	adds	r5, r7, r2
 8008fe6:	9b08      	ldr	r3, [sp, #32]
 8008fe8:	42af      	cmp	r7, r5
 8008fea:	4416      	add	r6, r2
 8008fec:	441e      	add	r6, r3
 8008fee:	463b      	mov	r3, r7
 8008ff0:	bfa8      	it	ge
 8008ff2:	462b      	movge	r3, r5
 8008ff4:	42b3      	cmp	r3, r6
 8008ff6:	bfa8      	it	ge
 8008ff8:	4633      	movge	r3, r6
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	bfc2      	ittt	gt
 8008ffe:	1aed      	subgt	r5, r5, r3
 8009000:	1af6      	subgt	r6, r6, r3
 8009002:	1aff      	subgt	r7, r7, r3
 8009004:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009006:	2b00      	cmp	r3, #0
 8009008:	dd16      	ble.n	8009038 <_strtod_l+0x738>
 800900a:	4641      	mov	r1, r8
 800900c:	461a      	mov	r2, r3
 800900e:	9805      	ldr	r0, [sp, #20]
 8009010:	f002 fddc 	bl	800bbcc <__pow5mult>
 8009014:	4680      	mov	r8, r0
 8009016:	2800      	cmp	r0, #0
 8009018:	d0b7      	beq.n	8008f8a <_strtod_l+0x68a>
 800901a:	4601      	mov	r1, r0
 800901c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800901e:	9805      	ldr	r0, [sp, #20]
 8009020:	f002 fd2c 	bl	800ba7c <__multiply>
 8009024:	900e      	str	r0, [sp, #56]	@ 0x38
 8009026:	2800      	cmp	r0, #0
 8009028:	f43f ae85 	beq.w	8008d36 <_strtod_l+0x436>
 800902c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800902e:	9805      	ldr	r0, [sp, #20]
 8009030:	f002 fc10 	bl	800b854 <_Bfree>
 8009034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009036:	931a      	str	r3, [sp, #104]	@ 0x68
 8009038:	2d00      	cmp	r5, #0
 800903a:	dc1d      	bgt.n	8009078 <_strtod_l+0x778>
 800903c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800903e:	2b00      	cmp	r3, #0
 8009040:	dd23      	ble.n	800908a <_strtod_l+0x78a>
 8009042:	4649      	mov	r1, r9
 8009044:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009046:	9805      	ldr	r0, [sp, #20]
 8009048:	f002 fdc0 	bl	800bbcc <__pow5mult>
 800904c:	4681      	mov	r9, r0
 800904e:	b9e0      	cbnz	r0, 800908a <_strtod_l+0x78a>
 8009050:	f04f 0900 	mov.w	r9, #0
 8009054:	e66f      	b.n	8008d36 <_strtod_l+0x436>
 8009056:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800905a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800905e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009062:	35e2      	adds	r5, #226	@ 0xe2
 8009064:	fa01 f305 	lsl.w	r3, r1, r5
 8009068:	9310      	str	r3, [sp, #64]	@ 0x40
 800906a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800906c:	e7ba      	b.n	8008fe4 <_strtod_l+0x6e4>
 800906e:	2300      	movs	r3, #0
 8009070:	9310      	str	r3, [sp, #64]	@ 0x40
 8009072:	2301      	movs	r3, #1
 8009074:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009076:	e7b5      	b.n	8008fe4 <_strtod_l+0x6e4>
 8009078:	462a      	mov	r2, r5
 800907a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800907c:	9805      	ldr	r0, [sp, #20]
 800907e:	f002 fdff 	bl	800bc80 <__lshift>
 8009082:	901a      	str	r0, [sp, #104]	@ 0x68
 8009084:	2800      	cmp	r0, #0
 8009086:	d1d9      	bne.n	800903c <_strtod_l+0x73c>
 8009088:	e655      	b.n	8008d36 <_strtod_l+0x436>
 800908a:	2e00      	cmp	r6, #0
 800908c:	dd07      	ble.n	800909e <_strtod_l+0x79e>
 800908e:	4649      	mov	r1, r9
 8009090:	4632      	mov	r2, r6
 8009092:	9805      	ldr	r0, [sp, #20]
 8009094:	f002 fdf4 	bl	800bc80 <__lshift>
 8009098:	4681      	mov	r9, r0
 800909a:	2800      	cmp	r0, #0
 800909c:	d0d8      	beq.n	8009050 <_strtod_l+0x750>
 800909e:	2f00      	cmp	r7, #0
 80090a0:	dd08      	ble.n	80090b4 <_strtod_l+0x7b4>
 80090a2:	4641      	mov	r1, r8
 80090a4:	463a      	mov	r2, r7
 80090a6:	9805      	ldr	r0, [sp, #20]
 80090a8:	f002 fdea 	bl	800bc80 <__lshift>
 80090ac:	4680      	mov	r8, r0
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f43f ae41 	beq.w	8008d36 <_strtod_l+0x436>
 80090b4:	464a      	mov	r2, r9
 80090b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090b8:	9805      	ldr	r0, [sp, #20]
 80090ba:	f002 fe69 	bl	800bd90 <__mdiff>
 80090be:	4604      	mov	r4, r0
 80090c0:	2800      	cmp	r0, #0
 80090c2:	f43f ae38 	beq.w	8008d36 <_strtod_l+0x436>
 80090c6:	68c3      	ldr	r3, [r0, #12]
 80090c8:	4641      	mov	r1, r8
 80090ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090cc:	2300      	movs	r3, #0
 80090ce:	60c3      	str	r3, [r0, #12]
 80090d0:	f002 fe42 	bl	800bd58 <__mcmp>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	da45      	bge.n	8009164 <_strtod_l+0x864>
 80090d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090da:	ea53 030a 	orrs.w	r3, r3, sl
 80090de:	d16b      	bne.n	80091b8 <_strtod_l+0x8b8>
 80090e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d167      	bne.n	80091b8 <_strtod_l+0x8b8>
 80090e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090ec:	0d1b      	lsrs	r3, r3, #20
 80090ee:	051b      	lsls	r3, r3, #20
 80090f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090f4:	d960      	bls.n	80091b8 <_strtod_l+0x8b8>
 80090f6:	6963      	ldr	r3, [r4, #20]
 80090f8:	b913      	cbnz	r3, 8009100 <_strtod_l+0x800>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	dd5b      	ble.n	80091b8 <_strtod_l+0x8b8>
 8009100:	4621      	mov	r1, r4
 8009102:	2201      	movs	r2, #1
 8009104:	9805      	ldr	r0, [sp, #20]
 8009106:	f002 fdbb 	bl	800bc80 <__lshift>
 800910a:	4641      	mov	r1, r8
 800910c:	4604      	mov	r4, r0
 800910e:	f002 fe23 	bl	800bd58 <__mcmp>
 8009112:	2800      	cmp	r0, #0
 8009114:	dd50      	ble.n	80091b8 <_strtod_l+0x8b8>
 8009116:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800911a:	9a08      	ldr	r2, [sp, #32]
 800911c:	0d1b      	lsrs	r3, r3, #20
 800911e:	051b      	lsls	r3, r3, #20
 8009120:	2a00      	cmp	r2, #0
 8009122:	d06a      	beq.n	80091fa <_strtod_l+0x8fa>
 8009124:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009128:	d867      	bhi.n	80091fa <_strtod_l+0x8fa>
 800912a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800912e:	f67f ae98 	bls.w	8008e62 <_strtod_l+0x562>
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	4b09      	ldr	r3, [pc, #36]	@ (800915c <_strtod_l+0x85c>)
 8009138:	2200      	movs	r2, #0
 800913a:	f7f7 f9e5 	bl	8000508 <__aeabi_dmul>
 800913e:	4b08      	ldr	r3, [pc, #32]	@ (8009160 <_strtod_l+0x860>)
 8009140:	4682      	mov	sl, r0
 8009142:	400b      	ands	r3, r1
 8009144:	468b      	mov	fp, r1
 8009146:	2b00      	cmp	r3, #0
 8009148:	f47f ae00 	bne.w	8008d4c <_strtod_l+0x44c>
 800914c:	2322      	movs	r3, #34	@ 0x22
 800914e:	9a05      	ldr	r2, [sp, #20]
 8009150:	6013      	str	r3, [r2, #0]
 8009152:	e5fb      	b.n	8008d4c <_strtod_l+0x44c>
 8009154:	0800cca8 	.word	0x0800cca8
 8009158:	fffffc02 	.word	0xfffffc02
 800915c:	39500000 	.word	0x39500000
 8009160:	7ff00000 	.word	0x7ff00000
 8009164:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009168:	d165      	bne.n	8009236 <_strtod_l+0x936>
 800916a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800916c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009170:	b35a      	cbz	r2, 80091ca <_strtod_l+0x8ca>
 8009172:	4a99      	ldr	r2, [pc, #612]	@ (80093d8 <_strtod_l+0xad8>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d12b      	bne.n	80091d0 <_strtod_l+0x8d0>
 8009178:	9b08      	ldr	r3, [sp, #32]
 800917a:	4651      	mov	r1, sl
 800917c:	b303      	cbz	r3, 80091c0 <_strtod_l+0x8c0>
 800917e:	465a      	mov	r2, fp
 8009180:	4b96      	ldr	r3, [pc, #600]	@ (80093dc <_strtod_l+0xadc>)
 8009182:	4013      	ands	r3, r2
 8009184:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009188:	f04f 32ff 	mov.w	r2, #4294967295
 800918c:	d81b      	bhi.n	80091c6 <_strtod_l+0x8c6>
 800918e:	0d1b      	lsrs	r3, r3, #20
 8009190:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009194:	fa02 f303 	lsl.w	r3, r2, r3
 8009198:	4299      	cmp	r1, r3
 800919a:	d119      	bne.n	80091d0 <_strtod_l+0x8d0>
 800919c:	4b90      	ldr	r3, [pc, #576]	@ (80093e0 <_strtod_l+0xae0>)
 800919e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d102      	bne.n	80091aa <_strtod_l+0x8aa>
 80091a4:	3101      	adds	r1, #1
 80091a6:	f43f adc6 	beq.w	8008d36 <_strtod_l+0x436>
 80091aa:	f04f 0a00 	mov.w	sl, #0
 80091ae:	4b8b      	ldr	r3, [pc, #556]	@ (80093dc <_strtod_l+0xadc>)
 80091b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091b2:	401a      	ands	r2, r3
 80091b4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80091b8:	9b08      	ldr	r3, [sp, #32]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1b9      	bne.n	8009132 <_strtod_l+0x832>
 80091be:	e5c5      	b.n	8008d4c <_strtod_l+0x44c>
 80091c0:	f04f 33ff 	mov.w	r3, #4294967295
 80091c4:	e7e8      	b.n	8009198 <_strtod_l+0x898>
 80091c6:	4613      	mov	r3, r2
 80091c8:	e7e6      	b.n	8009198 <_strtod_l+0x898>
 80091ca:	ea53 030a 	orrs.w	r3, r3, sl
 80091ce:	d0a2      	beq.n	8009116 <_strtod_l+0x816>
 80091d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091d2:	b1db      	cbz	r3, 800920c <_strtod_l+0x90c>
 80091d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091d6:	4213      	tst	r3, r2
 80091d8:	d0ee      	beq.n	80091b8 <_strtod_l+0x8b8>
 80091da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091dc:	4650      	mov	r0, sl
 80091de:	4659      	mov	r1, fp
 80091e0:	9a08      	ldr	r2, [sp, #32]
 80091e2:	b1bb      	cbz	r3, 8009214 <_strtod_l+0x914>
 80091e4:	f7ff fb6b 	bl	80088be <sulp>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091f0:	f7f6 ffd4 	bl	800019c <__adddf3>
 80091f4:	4682      	mov	sl, r0
 80091f6:	468b      	mov	fp, r1
 80091f8:	e7de      	b.n	80091b8 <_strtod_l+0x8b8>
 80091fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80091fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009202:	f04f 3aff 	mov.w	sl, #4294967295
 8009206:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800920a:	e7d5      	b.n	80091b8 <_strtod_l+0x8b8>
 800920c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800920e:	ea13 0f0a 	tst.w	r3, sl
 8009212:	e7e1      	b.n	80091d8 <_strtod_l+0x8d8>
 8009214:	f7ff fb53 	bl	80088be <sulp>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009220:	f7f6 ffba 	bl	8000198 <__aeabi_dsub>
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	4682      	mov	sl, r0
 800922a:	468b      	mov	fp, r1
 800922c:	f7f7 fbd4 	bl	80009d8 <__aeabi_dcmpeq>
 8009230:	2800      	cmp	r0, #0
 8009232:	d0c1      	beq.n	80091b8 <_strtod_l+0x8b8>
 8009234:	e615      	b.n	8008e62 <_strtod_l+0x562>
 8009236:	4641      	mov	r1, r8
 8009238:	4620      	mov	r0, r4
 800923a:	f002 fefd 	bl	800c038 <__ratio>
 800923e:	2200      	movs	r2, #0
 8009240:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009244:	4606      	mov	r6, r0
 8009246:	460f      	mov	r7, r1
 8009248:	f7f7 fbda 	bl	8000a00 <__aeabi_dcmple>
 800924c:	2800      	cmp	r0, #0
 800924e:	d06d      	beq.n	800932c <_strtod_l+0xa2c>
 8009250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009252:	2b00      	cmp	r3, #0
 8009254:	d178      	bne.n	8009348 <_strtod_l+0xa48>
 8009256:	f1ba 0f00 	cmp.w	sl, #0
 800925a:	d156      	bne.n	800930a <_strtod_l+0xa0a>
 800925c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800925e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009262:	2b00      	cmp	r3, #0
 8009264:	d158      	bne.n	8009318 <_strtod_l+0xa18>
 8009266:	2200      	movs	r2, #0
 8009268:	4630      	mov	r0, r6
 800926a:	4639      	mov	r1, r7
 800926c:	4b5d      	ldr	r3, [pc, #372]	@ (80093e4 <_strtod_l+0xae4>)
 800926e:	f7f7 fbbd 	bl	80009ec <__aeabi_dcmplt>
 8009272:	2800      	cmp	r0, #0
 8009274:	d157      	bne.n	8009326 <_strtod_l+0xa26>
 8009276:	4630      	mov	r0, r6
 8009278:	4639      	mov	r1, r7
 800927a:	2200      	movs	r2, #0
 800927c:	4b5a      	ldr	r3, [pc, #360]	@ (80093e8 <_strtod_l+0xae8>)
 800927e:	f7f7 f943 	bl	8000508 <__aeabi_dmul>
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800928a:	9606      	str	r6, [sp, #24]
 800928c:	9307      	str	r3, [sp, #28]
 800928e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009292:	4d52      	ldr	r5, [pc, #328]	@ (80093dc <_strtod_l+0xadc>)
 8009294:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800929a:	401d      	ands	r5, r3
 800929c:	4b53      	ldr	r3, [pc, #332]	@ (80093ec <_strtod_l+0xaec>)
 800929e:	429d      	cmp	r5, r3
 80092a0:	f040 80aa 	bne.w	80093f8 <_strtod_l+0xaf8>
 80092a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092a6:	4650      	mov	r0, sl
 80092a8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80092ac:	4659      	mov	r1, fp
 80092ae:	f002 fe03 	bl	800beb8 <__ulp>
 80092b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092b6:	f7f7 f927 	bl	8000508 <__aeabi_dmul>
 80092ba:	4652      	mov	r2, sl
 80092bc:	465b      	mov	r3, fp
 80092be:	f7f6 ff6d 	bl	800019c <__adddf3>
 80092c2:	460b      	mov	r3, r1
 80092c4:	4945      	ldr	r1, [pc, #276]	@ (80093dc <_strtod_l+0xadc>)
 80092c6:	4a4a      	ldr	r2, [pc, #296]	@ (80093f0 <_strtod_l+0xaf0>)
 80092c8:	4019      	ands	r1, r3
 80092ca:	4291      	cmp	r1, r2
 80092cc:	4682      	mov	sl, r0
 80092ce:	d942      	bls.n	8009356 <_strtod_l+0xa56>
 80092d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092d2:	4b43      	ldr	r3, [pc, #268]	@ (80093e0 <_strtod_l+0xae0>)
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d103      	bne.n	80092e0 <_strtod_l+0x9e0>
 80092d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092da:	3301      	adds	r3, #1
 80092dc:	f43f ad2b 	beq.w	8008d36 <_strtod_l+0x436>
 80092e0:	f04f 3aff 	mov.w	sl, #4294967295
 80092e4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80093e0 <_strtod_l+0xae0>
 80092e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092ea:	9805      	ldr	r0, [sp, #20]
 80092ec:	f002 fab2 	bl	800b854 <_Bfree>
 80092f0:	4649      	mov	r1, r9
 80092f2:	9805      	ldr	r0, [sp, #20]
 80092f4:	f002 faae 	bl	800b854 <_Bfree>
 80092f8:	4641      	mov	r1, r8
 80092fa:	9805      	ldr	r0, [sp, #20]
 80092fc:	f002 faaa 	bl	800b854 <_Bfree>
 8009300:	4621      	mov	r1, r4
 8009302:	9805      	ldr	r0, [sp, #20]
 8009304:	f002 faa6 	bl	800b854 <_Bfree>
 8009308:	e618      	b.n	8008f3c <_strtod_l+0x63c>
 800930a:	f1ba 0f01 	cmp.w	sl, #1
 800930e:	d103      	bne.n	8009318 <_strtod_l+0xa18>
 8009310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009312:	2b00      	cmp	r3, #0
 8009314:	f43f ada5 	beq.w	8008e62 <_strtod_l+0x562>
 8009318:	2200      	movs	r2, #0
 800931a:	4b36      	ldr	r3, [pc, #216]	@ (80093f4 <_strtod_l+0xaf4>)
 800931c:	2600      	movs	r6, #0
 800931e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009322:	4f30      	ldr	r7, [pc, #192]	@ (80093e4 <_strtod_l+0xae4>)
 8009324:	e7b3      	b.n	800928e <_strtod_l+0x98e>
 8009326:	2600      	movs	r6, #0
 8009328:	4f2f      	ldr	r7, [pc, #188]	@ (80093e8 <_strtod_l+0xae8>)
 800932a:	e7ac      	b.n	8009286 <_strtod_l+0x986>
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	4b2d      	ldr	r3, [pc, #180]	@ (80093e8 <_strtod_l+0xae8>)
 8009332:	2200      	movs	r2, #0
 8009334:	f7f7 f8e8 	bl	8000508 <__aeabi_dmul>
 8009338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0a1      	beq.n	8009286 <_strtod_l+0x986>
 8009342:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009346:	e7a2      	b.n	800928e <_strtod_l+0x98e>
 8009348:	2200      	movs	r2, #0
 800934a:	4b26      	ldr	r3, [pc, #152]	@ (80093e4 <_strtod_l+0xae4>)
 800934c:	4616      	mov	r6, r2
 800934e:	461f      	mov	r7, r3
 8009350:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009354:	e79b      	b.n	800928e <_strtod_l+0x98e>
 8009356:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1c1      	bne.n	80092e8 <_strtod_l+0x9e8>
 8009364:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009368:	0d1b      	lsrs	r3, r3, #20
 800936a:	051b      	lsls	r3, r3, #20
 800936c:	429d      	cmp	r5, r3
 800936e:	d1bb      	bne.n	80092e8 <_strtod_l+0x9e8>
 8009370:	4630      	mov	r0, r6
 8009372:	4639      	mov	r1, r7
 8009374:	f7f7 ff22 	bl	80011bc <__aeabi_d2lz>
 8009378:	f7f7 f898 	bl	80004ac <__aeabi_l2d>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4630      	mov	r0, r6
 8009382:	4639      	mov	r1, r7
 8009384:	f7f6 ff08 	bl	8000198 <__aeabi_dsub>
 8009388:	460b      	mov	r3, r1
 800938a:	4602      	mov	r2, r0
 800938c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009390:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009396:	ea46 060a 	orr.w	r6, r6, sl
 800939a:	431e      	orrs	r6, r3
 800939c:	d069      	beq.n	8009472 <_strtod_l+0xb72>
 800939e:	a30a      	add	r3, pc, #40	@ (adr r3, 80093c8 <_strtod_l+0xac8>)
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f7f7 fb22 	bl	80009ec <__aeabi_dcmplt>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	f47f accf 	bne.w	8008d4c <_strtod_l+0x44c>
 80093ae:	a308      	add	r3, pc, #32	@ (adr r3, 80093d0 <_strtod_l+0xad0>)
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093b8:	f7f7 fb36 	bl	8000a28 <__aeabi_dcmpgt>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d093      	beq.n	80092e8 <_strtod_l+0x9e8>
 80093c0:	e4c4      	b.n	8008d4c <_strtod_l+0x44c>
 80093c2:	bf00      	nop
 80093c4:	f3af 8000 	nop.w
 80093c8:	94a03595 	.word	0x94a03595
 80093cc:	3fdfffff 	.word	0x3fdfffff
 80093d0:	35afe535 	.word	0x35afe535
 80093d4:	3fe00000 	.word	0x3fe00000
 80093d8:	000fffff 	.word	0x000fffff
 80093dc:	7ff00000 	.word	0x7ff00000
 80093e0:	7fefffff 	.word	0x7fefffff
 80093e4:	3ff00000 	.word	0x3ff00000
 80093e8:	3fe00000 	.word	0x3fe00000
 80093ec:	7fe00000 	.word	0x7fe00000
 80093f0:	7c9fffff 	.word	0x7c9fffff
 80093f4:	bff00000 	.word	0xbff00000
 80093f8:	9b08      	ldr	r3, [sp, #32]
 80093fa:	b323      	cbz	r3, 8009446 <_strtod_l+0xb46>
 80093fc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009400:	d821      	bhi.n	8009446 <_strtod_l+0xb46>
 8009402:	a327      	add	r3, pc, #156	@ (adr r3, 80094a0 <_strtod_l+0xba0>)
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	4630      	mov	r0, r6
 800940a:	4639      	mov	r1, r7
 800940c:	f7f7 faf8 	bl	8000a00 <__aeabi_dcmple>
 8009410:	b1a0      	cbz	r0, 800943c <_strtod_l+0xb3c>
 8009412:	4639      	mov	r1, r7
 8009414:	4630      	mov	r0, r6
 8009416:	f7f7 fb4f 	bl	8000ab8 <__aeabi_d2uiz>
 800941a:	2801      	cmp	r0, #1
 800941c:	bf38      	it	cc
 800941e:	2001      	movcc	r0, #1
 8009420:	f7f6 fff8 	bl	8000414 <__aeabi_ui2d>
 8009424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009426:	4606      	mov	r6, r0
 8009428:	460f      	mov	r7, r1
 800942a:	b9fb      	cbnz	r3, 800946c <_strtod_l+0xb6c>
 800942c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009430:	9014      	str	r0, [sp, #80]	@ 0x50
 8009432:	9315      	str	r3, [sp, #84]	@ 0x54
 8009434:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009438:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800943c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800943e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009442:	1b5b      	subs	r3, r3, r5
 8009444:	9311      	str	r3, [sp, #68]	@ 0x44
 8009446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800944a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800944e:	f002 fd33 	bl	800beb8 <__ulp>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4650      	mov	r0, sl
 8009458:	4659      	mov	r1, fp
 800945a:	f7f7 f855 	bl	8000508 <__aeabi_dmul>
 800945e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009462:	f7f6 fe9b 	bl	800019c <__adddf3>
 8009466:	4682      	mov	sl, r0
 8009468:	468b      	mov	fp, r1
 800946a:	e776      	b.n	800935a <_strtod_l+0xa5a>
 800946c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009470:	e7e0      	b.n	8009434 <_strtod_l+0xb34>
 8009472:	a30d      	add	r3, pc, #52	@ (adr r3, 80094a8 <_strtod_l+0xba8>)
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f7f7 fab8 	bl	80009ec <__aeabi_dcmplt>
 800947c:	e79e      	b.n	80093bc <_strtod_l+0xabc>
 800947e:	2300      	movs	r3, #0
 8009480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009484:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	f7ff ba77 	b.w	800897a <_strtod_l+0x7a>
 800948c:	2a65      	cmp	r2, #101	@ 0x65
 800948e:	f43f ab6e 	beq.w	8008b6e <_strtod_l+0x26e>
 8009492:	2a45      	cmp	r2, #69	@ 0x45
 8009494:	f43f ab6b 	beq.w	8008b6e <_strtod_l+0x26e>
 8009498:	2301      	movs	r3, #1
 800949a:	f7ff bba6 	b.w	8008bea <_strtod_l+0x2ea>
 800949e:	bf00      	nop
 80094a0:	ffc00000 	.word	0xffc00000
 80094a4:	41dfffff 	.word	0x41dfffff
 80094a8:	94a03595 	.word	0x94a03595
 80094ac:	3fcfffff 	.word	0x3fcfffff

080094b0 <strtod>:
 80094b0:	460a      	mov	r2, r1
 80094b2:	4601      	mov	r1, r0
 80094b4:	4802      	ldr	r0, [pc, #8]	@ (80094c0 <strtod+0x10>)
 80094b6:	4b03      	ldr	r3, [pc, #12]	@ (80094c4 <strtod+0x14>)
 80094b8:	6800      	ldr	r0, [r0, #0]
 80094ba:	f7ff ba21 	b.w	8008900 <_strtod_l>
 80094be:	bf00      	nop
 80094c0:	200002fc 	.word	0x200002fc
 80094c4:	20000190 	.word	0x20000190

080094c8 <__cvt>:
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ce:	461d      	mov	r5, r3
 80094d0:	bfbb      	ittet	lt
 80094d2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80094d6:	461d      	movlt	r5, r3
 80094d8:	2300      	movge	r3, #0
 80094da:	232d      	movlt	r3, #45	@ 0x2d
 80094dc:	b088      	sub	sp, #32
 80094de:	4614      	mov	r4, r2
 80094e0:	bfb8      	it	lt
 80094e2:	4614      	movlt	r4, r2
 80094e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80094e6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80094e8:	7013      	strb	r3, [r2, #0]
 80094ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80094f0:	f023 0820 	bic.w	r8, r3, #32
 80094f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80094f8:	d005      	beq.n	8009506 <__cvt+0x3e>
 80094fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80094fe:	d100      	bne.n	8009502 <__cvt+0x3a>
 8009500:	3601      	adds	r6, #1
 8009502:	2302      	movs	r3, #2
 8009504:	e000      	b.n	8009508 <__cvt+0x40>
 8009506:	2303      	movs	r3, #3
 8009508:	aa07      	add	r2, sp, #28
 800950a:	9204      	str	r2, [sp, #16]
 800950c:	aa06      	add	r2, sp, #24
 800950e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009512:	e9cd 3600 	strd	r3, r6, [sp]
 8009516:	4622      	mov	r2, r4
 8009518:	462b      	mov	r3, r5
 800951a:	f000 ff49 	bl	800a3b0 <_dtoa_r>
 800951e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009522:	4607      	mov	r7, r0
 8009524:	d119      	bne.n	800955a <__cvt+0x92>
 8009526:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009528:	07db      	lsls	r3, r3, #31
 800952a:	d50e      	bpl.n	800954a <__cvt+0x82>
 800952c:	eb00 0906 	add.w	r9, r0, r6
 8009530:	2200      	movs	r2, #0
 8009532:	2300      	movs	r3, #0
 8009534:	4620      	mov	r0, r4
 8009536:	4629      	mov	r1, r5
 8009538:	f7f7 fa4e 	bl	80009d8 <__aeabi_dcmpeq>
 800953c:	b108      	cbz	r0, 8009542 <__cvt+0x7a>
 800953e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009542:	2230      	movs	r2, #48	@ 0x30
 8009544:	9b07      	ldr	r3, [sp, #28]
 8009546:	454b      	cmp	r3, r9
 8009548:	d31e      	bcc.n	8009588 <__cvt+0xc0>
 800954a:	4638      	mov	r0, r7
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009550:	1bdb      	subs	r3, r3, r7
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	b008      	add	sp, #32
 8009556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800955e:	eb00 0906 	add.w	r9, r0, r6
 8009562:	d1e5      	bne.n	8009530 <__cvt+0x68>
 8009564:	7803      	ldrb	r3, [r0, #0]
 8009566:	2b30      	cmp	r3, #48	@ 0x30
 8009568:	d10a      	bne.n	8009580 <__cvt+0xb8>
 800956a:	2200      	movs	r2, #0
 800956c:	2300      	movs	r3, #0
 800956e:	4620      	mov	r0, r4
 8009570:	4629      	mov	r1, r5
 8009572:	f7f7 fa31 	bl	80009d8 <__aeabi_dcmpeq>
 8009576:	b918      	cbnz	r0, 8009580 <__cvt+0xb8>
 8009578:	f1c6 0601 	rsb	r6, r6, #1
 800957c:	f8ca 6000 	str.w	r6, [sl]
 8009580:	f8da 3000 	ldr.w	r3, [sl]
 8009584:	4499      	add	r9, r3
 8009586:	e7d3      	b.n	8009530 <__cvt+0x68>
 8009588:	1c59      	adds	r1, r3, #1
 800958a:	9107      	str	r1, [sp, #28]
 800958c:	701a      	strb	r2, [r3, #0]
 800958e:	e7d9      	b.n	8009544 <__cvt+0x7c>

08009590 <__exponent>:
 8009590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009592:	2900      	cmp	r1, #0
 8009594:	bfb6      	itet	lt
 8009596:	232d      	movlt	r3, #45	@ 0x2d
 8009598:	232b      	movge	r3, #43	@ 0x2b
 800959a:	4249      	neglt	r1, r1
 800959c:	2909      	cmp	r1, #9
 800959e:	7002      	strb	r2, [r0, #0]
 80095a0:	7043      	strb	r3, [r0, #1]
 80095a2:	dd29      	ble.n	80095f8 <__exponent+0x68>
 80095a4:	f10d 0307 	add.w	r3, sp, #7
 80095a8:	461d      	mov	r5, r3
 80095aa:	270a      	movs	r7, #10
 80095ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80095b0:	461a      	mov	r2, r3
 80095b2:	fb07 1416 	mls	r4, r7, r6, r1
 80095b6:	3430      	adds	r4, #48	@ 0x30
 80095b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80095bc:	460c      	mov	r4, r1
 80095be:	2c63      	cmp	r4, #99	@ 0x63
 80095c0:	4631      	mov	r1, r6
 80095c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80095c6:	dcf1      	bgt.n	80095ac <__exponent+0x1c>
 80095c8:	3130      	adds	r1, #48	@ 0x30
 80095ca:	1e94      	subs	r4, r2, #2
 80095cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80095d0:	4623      	mov	r3, r4
 80095d2:	1c41      	adds	r1, r0, #1
 80095d4:	42ab      	cmp	r3, r5
 80095d6:	d30a      	bcc.n	80095ee <__exponent+0x5e>
 80095d8:	f10d 0309 	add.w	r3, sp, #9
 80095dc:	1a9b      	subs	r3, r3, r2
 80095de:	42ac      	cmp	r4, r5
 80095e0:	bf88      	it	hi
 80095e2:	2300      	movhi	r3, #0
 80095e4:	3302      	adds	r3, #2
 80095e6:	4403      	add	r3, r0
 80095e8:	1a18      	subs	r0, r3, r0
 80095ea:	b003      	add	sp, #12
 80095ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80095f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80095f6:	e7ed      	b.n	80095d4 <__exponent+0x44>
 80095f8:	2330      	movs	r3, #48	@ 0x30
 80095fa:	3130      	adds	r1, #48	@ 0x30
 80095fc:	7083      	strb	r3, [r0, #2]
 80095fe:	70c1      	strb	r1, [r0, #3]
 8009600:	1d03      	adds	r3, r0, #4
 8009602:	e7f1      	b.n	80095e8 <__exponent+0x58>

08009604 <_printf_float>:
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	b091      	sub	sp, #68	@ 0x44
 800960a:	460c      	mov	r4, r1
 800960c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009610:	4616      	mov	r6, r2
 8009612:	461f      	mov	r7, r3
 8009614:	4605      	mov	r5, r0
 8009616:	f000 fd8b 	bl	800a130 <_localeconv_r>
 800961a:	6803      	ldr	r3, [r0, #0]
 800961c:	4618      	mov	r0, r3
 800961e:	9308      	str	r3, [sp, #32]
 8009620:	f7f6 fdae 	bl	8000180 <strlen>
 8009624:	2300      	movs	r3, #0
 8009626:	930e      	str	r3, [sp, #56]	@ 0x38
 8009628:	f8d8 3000 	ldr.w	r3, [r8]
 800962c:	9009      	str	r0, [sp, #36]	@ 0x24
 800962e:	3307      	adds	r3, #7
 8009630:	f023 0307 	bic.w	r3, r3, #7
 8009634:	f103 0208 	add.w	r2, r3, #8
 8009638:	f894 a018 	ldrb.w	sl, [r4, #24]
 800963c:	f8d4 b000 	ldr.w	fp, [r4]
 8009640:	f8c8 2000 	str.w	r2, [r8]
 8009644:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009648:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800964c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800964e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009652:	f04f 32ff 	mov.w	r2, #4294967295
 8009656:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800965a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800965e:	4b9c      	ldr	r3, [pc, #624]	@ (80098d0 <_printf_float+0x2cc>)
 8009660:	f7f7 f9ec 	bl	8000a3c <__aeabi_dcmpun>
 8009664:	bb70      	cbnz	r0, 80096c4 <_printf_float+0xc0>
 8009666:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800966a:	f04f 32ff 	mov.w	r2, #4294967295
 800966e:	4b98      	ldr	r3, [pc, #608]	@ (80098d0 <_printf_float+0x2cc>)
 8009670:	f7f7 f9c6 	bl	8000a00 <__aeabi_dcmple>
 8009674:	bb30      	cbnz	r0, 80096c4 <_printf_float+0xc0>
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	4640      	mov	r0, r8
 800967c:	4649      	mov	r1, r9
 800967e:	f7f7 f9b5 	bl	80009ec <__aeabi_dcmplt>
 8009682:	b110      	cbz	r0, 800968a <_printf_float+0x86>
 8009684:	232d      	movs	r3, #45	@ 0x2d
 8009686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800968a:	4a92      	ldr	r2, [pc, #584]	@ (80098d4 <_printf_float+0x2d0>)
 800968c:	4b92      	ldr	r3, [pc, #584]	@ (80098d8 <_printf_float+0x2d4>)
 800968e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009692:	bf94      	ite	ls
 8009694:	4690      	movls	r8, r2
 8009696:	4698      	movhi	r8, r3
 8009698:	2303      	movs	r3, #3
 800969a:	f04f 0900 	mov.w	r9, #0
 800969e:	6123      	str	r3, [r4, #16]
 80096a0:	f02b 0304 	bic.w	r3, fp, #4
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	4633      	mov	r3, r6
 80096a8:	4621      	mov	r1, r4
 80096aa:	4628      	mov	r0, r5
 80096ac:	9700      	str	r7, [sp, #0]
 80096ae:	aa0f      	add	r2, sp, #60	@ 0x3c
 80096b0:	f000 f9d4 	bl	8009a5c <_printf_common>
 80096b4:	3001      	adds	r0, #1
 80096b6:	f040 8090 	bne.w	80097da <_printf_float+0x1d6>
 80096ba:	f04f 30ff 	mov.w	r0, #4294967295
 80096be:	b011      	add	sp, #68	@ 0x44
 80096c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c4:	4642      	mov	r2, r8
 80096c6:	464b      	mov	r3, r9
 80096c8:	4640      	mov	r0, r8
 80096ca:	4649      	mov	r1, r9
 80096cc:	f7f7 f9b6 	bl	8000a3c <__aeabi_dcmpun>
 80096d0:	b148      	cbz	r0, 80096e6 <_printf_float+0xe2>
 80096d2:	464b      	mov	r3, r9
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bfb8      	it	lt
 80096d8:	232d      	movlt	r3, #45	@ 0x2d
 80096da:	4a80      	ldr	r2, [pc, #512]	@ (80098dc <_printf_float+0x2d8>)
 80096dc:	bfb8      	it	lt
 80096de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80096e2:	4b7f      	ldr	r3, [pc, #508]	@ (80098e0 <_printf_float+0x2dc>)
 80096e4:	e7d3      	b.n	800968e <_printf_float+0x8a>
 80096e6:	6863      	ldr	r3, [r4, #4]
 80096e8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	d13f      	bne.n	8009770 <_printf_float+0x16c>
 80096f0:	2306      	movs	r3, #6
 80096f2:	6063      	str	r3, [r4, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80096fa:	6023      	str	r3, [r4, #0]
 80096fc:	9206      	str	r2, [sp, #24]
 80096fe:	aa0e      	add	r2, sp, #56	@ 0x38
 8009700:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009704:	aa0d      	add	r2, sp, #52	@ 0x34
 8009706:	9203      	str	r2, [sp, #12]
 8009708:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800970c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009710:	6863      	ldr	r3, [r4, #4]
 8009712:	4642      	mov	r2, r8
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	4628      	mov	r0, r5
 8009718:	464b      	mov	r3, r9
 800971a:	910a      	str	r1, [sp, #40]	@ 0x28
 800971c:	f7ff fed4 	bl	80094c8 <__cvt>
 8009720:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009722:	4680      	mov	r8, r0
 8009724:	2947      	cmp	r1, #71	@ 0x47
 8009726:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009728:	d128      	bne.n	800977c <_printf_float+0x178>
 800972a:	1cc8      	adds	r0, r1, #3
 800972c:	db02      	blt.n	8009734 <_printf_float+0x130>
 800972e:	6863      	ldr	r3, [r4, #4]
 8009730:	4299      	cmp	r1, r3
 8009732:	dd40      	ble.n	80097b6 <_printf_float+0x1b2>
 8009734:	f1aa 0a02 	sub.w	sl, sl, #2
 8009738:	fa5f fa8a 	uxtb.w	sl, sl
 800973c:	4652      	mov	r2, sl
 800973e:	3901      	subs	r1, #1
 8009740:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009744:	910d      	str	r1, [sp, #52]	@ 0x34
 8009746:	f7ff ff23 	bl	8009590 <__exponent>
 800974a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800974c:	4681      	mov	r9, r0
 800974e:	1813      	adds	r3, r2, r0
 8009750:	2a01      	cmp	r2, #1
 8009752:	6123      	str	r3, [r4, #16]
 8009754:	dc02      	bgt.n	800975c <_printf_float+0x158>
 8009756:	6822      	ldr	r2, [r4, #0]
 8009758:	07d2      	lsls	r2, r2, #31
 800975a:	d501      	bpl.n	8009760 <_printf_float+0x15c>
 800975c:	3301      	adds	r3, #1
 800975e:	6123      	str	r3, [r4, #16]
 8009760:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009764:	2b00      	cmp	r3, #0
 8009766:	d09e      	beq.n	80096a6 <_printf_float+0xa2>
 8009768:	232d      	movs	r3, #45	@ 0x2d
 800976a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800976e:	e79a      	b.n	80096a6 <_printf_float+0xa2>
 8009770:	2947      	cmp	r1, #71	@ 0x47
 8009772:	d1bf      	bne.n	80096f4 <_printf_float+0xf0>
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1bd      	bne.n	80096f4 <_printf_float+0xf0>
 8009778:	2301      	movs	r3, #1
 800977a:	e7ba      	b.n	80096f2 <_printf_float+0xee>
 800977c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009780:	d9dc      	bls.n	800973c <_printf_float+0x138>
 8009782:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009786:	d118      	bne.n	80097ba <_printf_float+0x1b6>
 8009788:	2900      	cmp	r1, #0
 800978a:	6863      	ldr	r3, [r4, #4]
 800978c:	dd0b      	ble.n	80097a6 <_printf_float+0x1a2>
 800978e:	6121      	str	r1, [r4, #16]
 8009790:	b913      	cbnz	r3, 8009798 <_printf_float+0x194>
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	07d0      	lsls	r0, r2, #31
 8009796:	d502      	bpl.n	800979e <_printf_float+0x19a>
 8009798:	3301      	adds	r3, #1
 800979a:	440b      	add	r3, r1
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	f04f 0900 	mov.w	r9, #0
 80097a2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80097a4:	e7dc      	b.n	8009760 <_printf_float+0x15c>
 80097a6:	b913      	cbnz	r3, 80097ae <_printf_float+0x1aa>
 80097a8:	6822      	ldr	r2, [r4, #0]
 80097aa:	07d2      	lsls	r2, r2, #31
 80097ac:	d501      	bpl.n	80097b2 <_printf_float+0x1ae>
 80097ae:	3302      	adds	r3, #2
 80097b0:	e7f4      	b.n	800979c <_printf_float+0x198>
 80097b2:	2301      	movs	r3, #1
 80097b4:	e7f2      	b.n	800979c <_printf_float+0x198>
 80097b6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80097ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097bc:	4299      	cmp	r1, r3
 80097be:	db05      	blt.n	80097cc <_printf_float+0x1c8>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	6121      	str	r1, [r4, #16]
 80097c4:	07d8      	lsls	r0, r3, #31
 80097c6:	d5ea      	bpl.n	800979e <_printf_float+0x19a>
 80097c8:	1c4b      	adds	r3, r1, #1
 80097ca:	e7e7      	b.n	800979c <_printf_float+0x198>
 80097cc:	2900      	cmp	r1, #0
 80097ce:	bfcc      	ite	gt
 80097d0:	2201      	movgt	r2, #1
 80097d2:	f1c1 0202 	rsble	r2, r1, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	e7e0      	b.n	800979c <_printf_float+0x198>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	055a      	lsls	r2, r3, #21
 80097de:	d407      	bmi.n	80097f0 <_printf_float+0x1ec>
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	4642      	mov	r2, r8
 80097e4:	4631      	mov	r1, r6
 80097e6:	4628      	mov	r0, r5
 80097e8:	47b8      	blx	r7
 80097ea:	3001      	adds	r0, #1
 80097ec:	d12b      	bne.n	8009846 <_printf_float+0x242>
 80097ee:	e764      	b.n	80096ba <_printf_float+0xb6>
 80097f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80097f4:	f240 80dc 	bls.w	80099b0 <_printf_float+0x3ac>
 80097f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80097fc:	2200      	movs	r2, #0
 80097fe:	2300      	movs	r3, #0
 8009800:	f7f7 f8ea 	bl	80009d8 <__aeabi_dcmpeq>
 8009804:	2800      	cmp	r0, #0
 8009806:	d033      	beq.n	8009870 <_printf_float+0x26c>
 8009808:	2301      	movs	r3, #1
 800980a:	4631      	mov	r1, r6
 800980c:	4628      	mov	r0, r5
 800980e:	4a35      	ldr	r2, [pc, #212]	@ (80098e4 <_printf_float+0x2e0>)
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f af51 	beq.w	80096ba <_printf_float+0xb6>
 8009818:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800981c:	4543      	cmp	r3, r8
 800981e:	db02      	blt.n	8009826 <_printf_float+0x222>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	07d8      	lsls	r0, r3, #31
 8009824:	d50f      	bpl.n	8009846 <_printf_float+0x242>
 8009826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800982a:	4631      	mov	r1, r6
 800982c:	4628      	mov	r0, r5
 800982e:	47b8      	blx	r7
 8009830:	3001      	adds	r0, #1
 8009832:	f43f af42 	beq.w	80096ba <_printf_float+0xb6>
 8009836:	f04f 0900 	mov.w	r9, #0
 800983a:	f108 38ff 	add.w	r8, r8, #4294967295
 800983e:	f104 0a1a 	add.w	sl, r4, #26
 8009842:	45c8      	cmp	r8, r9
 8009844:	dc09      	bgt.n	800985a <_printf_float+0x256>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	079b      	lsls	r3, r3, #30
 800984a:	f100 8102 	bmi.w	8009a52 <_printf_float+0x44e>
 800984e:	68e0      	ldr	r0, [r4, #12]
 8009850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009852:	4298      	cmp	r0, r3
 8009854:	bfb8      	it	lt
 8009856:	4618      	movlt	r0, r3
 8009858:	e731      	b.n	80096be <_printf_float+0xba>
 800985a:	2301      	movs	r3, #1
 800985c:	4652      	mov	r2, sl
 800985e:	4631      	mov	r1, r6
 8009860:	4628      	mov	r0, r5
 8009862:	47b8      	blx	r7
 8009864:	3001      	adds	r0, #1
 8009866:	f43f af28 	beq.w	80096ba <_printf_float+0xb6>
 800986a:	f109 0901 	add.w	r9, r9, #1
 800986e:	e7e8      	b.n	8009842 <_printf_float+0x23e>
 8009870:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009872:	2b00      	cmp	r3, #0
 8009874:	dc38      	bgt.n	80098e8 <_printf_float+0x2e4>
 8009876:	2301      	movs	r3, #1
 8009878:	4631      	mov	r1, r6
 800987a:	4628      	mov	r0, r5
 800987c:	4a19      	ldr	r2, [pc, #100]	@ (80098e4 <_printf_float+0x2e0>)
 800987e:	47b8      	blx	r7
 8009880:	3001      	adds	r0, #1
 8009882:	f43f af1a 	beq.w	80096ba <_printf_float+0xb6>
 8009886:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800988a:	ea59 0303 	orrs.w	r3, r9, r3
 800988e:	d102      	bne.n	8009896 <_printf_float+0x292>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	07d9      	lsls	r1, r3, #31
 8009894:	d5d7      	bpl.n	8009846 <_printf_float+0x242>
 8009896:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800989a:	4631      	mov	r1, r6
 800989c:	4628      	mov	r0, r5
 800989e:	47b8      	blx	r7
 80098a0:	3001      	adds	r0, #1
 80098a2:	f43f af0a 	beq.w	80096ba <_printf_float+0xb6>
 80098a6:	f04f 0a00 	mov.w	sl, #0
 80098aa:	f104 0b1a 	add.w	fp, r4, #26
 80098ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098b0:	425b      	negs	r3, r3
 80098b2:	4553      	cmp	r3, sl
 80098b4:	dc01      	bgt.n	80098ba <_printf_float+0x2b6>
 80098b6:	464b      	mov	r3, r9
 80098b8:	e793      	b.n	80097e2 <_printf_float+0x1de>
 80098ba:	2301      	movs	r3, #1
 80098bc:	465a      	mov	r2, fp
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	f43f aef8 	beq.w	80096ba <_printf_float+0xb6>
 80098ca:	f10a 0a01 	add.w	sl, sl, #1
 80098ce:	e7ee      	b.n	80098ae <_printf_float+0x2aa>
 80098d0:	7fefffff 	.word	0x7fefffff
 80098d4:	0800ccd0 	.word	0x0800ccd0
 80098d8:	0800ccd4 	.word	0x0800ccd4
 80098dc:	0800ccd8 	.word	0x0800ccd8
 80098e0:	0800ccdc 	.word	0x0800ccdc
 80098e4:	0800cce0 	.word	0x0800cce0
 80098e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80098ea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80098ee:	4553      	cmp	r3, sl
 80098f0:	bfa8      	it	ge
 80098f2:	4653      	movge	r3, sl
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	4699      	mov	r9, r3
 80098f8:	dc36      	bgt.n	8009968 <_printf_float+0x364>
 80098fa:	f04f 0b00 	mov.w	fp, #0
 80098fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009902:	f104 021a 	add.w	r2, r4, #26
 8009906:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009908:	930a      	str	r3, [sp, #40]	@ 0x28
 800990a:	eba3 0309 	sub.w	r3, r3, r9
 800990e:	455b      	cmp	r3, fp
 8009910:	dc31      	bgt.n	8009976 <_printf_float+0x372>
 8009912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009914:	459a      	cmp	sl, r3
 8009916:	dc3a      	bgt.n	800998e <_printf_float+0x38a>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	07da      	lsls	r2, r3, #31
 800991c:	d437      	bmi.n	800998e <_printf_float+0x38a>
 800991e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009920:	ebaa 0903 	sub.w	r9, sl, r3
 8009924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009926:	ebaa 0303 	sub.w	r3, sl, r3
 800992a:	4599      	cmp	r9, r3
 800992c:	bfa8      	it	ge
 800992e:	4699      	movge	r9, r3
 8009930:	f1b9 0f00 	cmp.w	r9, #0
 8009934:	dc33      	bgt.n	800999e <_printf_float+0x39a>
 8009936:	f04f 0800 	mov.w	r8, #0
 800993a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800993e:	f104 0b1a 	add.w	fp, r4, #26
 8009942:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009944:	ebaa 0303 	sub.w	r3, sl, r3
 8009948:	eba3 0309 	sub.w	r3, r3, r9
 800994c:	4543      	cmp	r3, r8
 800994e:	f77f af7a 	ble.w	8009846 <_printf_float+0x242>
 8009952:	2301      	movs	r3, #1
 8009954:	465a      	mov	r2, fp
 8009956:	4631      	mov	r1, r6
 8009958:	4628      	mov	r0, r5
 800995a:	47b8      	blx	r7
 800995c:	3001      	adds	r0, #1
 800995e:	f43f aeac 	beq.w	80096ba <_printf_float+0xb6>
 8009962:	f108 0801 	add.w	r8, r8, #1
 8009966:	e7ec      	b.n	8009942 <_printf_float+0x33e>
 8009968:	4642      	mov	r2, r8
 800996a:	4631      	mov	r1, r6
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	d1c2      	bne.n	80098fa <_printf_float+0x2f6>
 8009974:	e6a1      	b.n	80096ba <_printf_float+0xb6>
 8009976:	2301      	movs	r3, #1
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	920a      	str	r2, [sp, #40]	@ 0x28
 800997e:	47b8      	blx	r7
 8009980:	3001      	adds	r0, #1
 8009982:	f43f ae9a 	beq.w	80096ba <_printf_float+0xb6>
 8009986:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009988:	f10b 0b01 	add.w	fp, fp, #1
 800998c:	e7bb      	b.n	8009906 <_printf_float+0x302>
 800998e:	4631      	mov	r1, r6
 8009990:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009994:	4628      	mov	r0, r5
 8009996:	47b8      	blx	r7
 8009998:	3001      	adds	r0, #1
 800999a:	d1c0      	bne.n	800991e <_printf_float+0x31a>
 800999c:	e68d      	b.n	80096ba <_printf_float+0xb6>
 800999e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099a0:	464b      	mov	r3, r9
 80099a2:	4631      	mov	r1, r6
 80099a4:	4628      	mov	r0, r5
 80099a6:	4442      	add	r2, r8
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	d1c3      	bne.n	8009936 <_printf_float+0x332>
 80099ae:	e684      	b.n	80096ba <_printf_float+0xb6>
 80099b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80099b4:	f1ba 0f01 	cmp.w	sl, #1
 80099b8:	dc01      	bgt.n	80099be <_printf_float+0x3ba>
 80099ba:	07db      	lsls	r3, r3, #31
 80099bc:	d536      	bpl.n	8009a2c <_printf_float+0x428>
 80099be:	2301      	movs	r3, #1
 80099c0:	4642      	mov	r2, r8
 80099c2:	4631      	mov	r1, r6
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b8      	blx	r7
 80099c8:	3001      	adds	r0, #1
 80099ca:	f43f ae76 	beq.w	80096ba <_printf_float+0xb6>
 80099ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f ae6e 	beq.w	80096ba <_printf_float+0xb6>
 80099de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099e2:	2200      	movs	r2, #0
 80099e4:	2300      	movs	r3, #0
 80099e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099ea:	f7f6 fff5 	bl	80009d8 <__aeabi_dcmpeq>
 80099ee:	b9c0      	cbnz	r0, 8009a22 <_printf_float+0x41e>
 80099f0:	4653      	mov	r3, sl
 80099f2:	f108 0201 	add.w	r2, r8, #1
 80099f6:	4631      	mov	r1, r6
 80099f8:	4628      	mov	r0, r5
 80099fa:	47b8      	blx	r7
 80099fc:	3001      	adds	r0, #1
 80099fe:	d10c      	bne.n	8009a1a <_printf_float+0x416>
 8009a00:	e65b      	b.n	80096ba <_printf_float+0xb6>
 8009a02:	2301      	movs	r3, #1
 8009a04:	465a      	mov	r2, fp
 8009a06:	4631      	mov	r1, r6
 8009a08:	4628      	mov	r0, r5
 8009a0a:	47b8      	blx	r7
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	f43f ae54 	beq.w	80096ba <_printf_float+0xb6>
 8009a12:	f108 0801 	add.w	r8, r8, #1
 8009a16:	45d0      	cmp	r8, sl
 8009a18:	dbf3      	blt.n	8009a02 <_printf_float+0x3fe>
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009a20:	e6e0      	b.n	80097e4 <_printf_float+0x1e0>
 8009a22:	f04f 0800 	mov.w	r8, #0
 8009a26:	f104 0b1a 	add.w	fp, r4, #26
 8009a2a:	e7f4      	b.n	8009a16 <_printf_float+0x412>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4642      	mov	r2, r8
 8009a30:	e7e1      	b.n	80099f6 <_printf_float+0x3f2>
 8009a32:	2301      	movs	r3, #1
 8009a34:	464a      	mov	r2, r9
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b8      	blx	r7
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	f43f ae3c 	beq.w	80096ba <_printf_float+0xb6>
 8009a42:	f108 0801 	add.w	r8, r8, #1
 8009a46:	68e3      	ldr	r3, [r4, #12]
 8009a48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a4a:	1a5b      	subs	r3, r3, r1
 8009a4c:	4543      	cmp	r3, r8
 8009a4e:	dcf0      	bgt.n	8009a32 <_printf_float+0x42e>
 8009a50:	e6fd      	b.n	800984e <_printf_float+0x24a>
 8009a52:	f04f 0800 	mov.w	r8, #0
 8009a56:	f104 0919 	add.w	r9, r4, #25
 8009a5a:	e7f4      	b.n	8009a46 <_printf_float+0x442>

08009a5c <_printf_common>:
 8009a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a60:	4616      	mov	r6, r2
 8009a62:	4698      	mov	r8, r3
 8009a64:	688a      	ldr	r2, [r1, #8]
 8009a66:	690b      	ldr	r3, [r1, #16]
 8009a68:	4607      	mov	r7, r0
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	bfb8      	it	lt
 8009a6e:	4613      	movlt	r3, r2
 8009a70:	6033      	str	r3, [r6, #0]
 8009a72:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a76:	460c      	mov	r4, r1
 8009a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a7c:	b10a      	cbz	r2, 8009a82 <_printf_common+0x26>
 8009a7e:	3301      	adds	r3, #1
 8009a80:	6033      	str	r3, [r6, #0]
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	0699      	lsls	r1, r3, #26
 8009a86:	bf42      	ittt	mi
 8009a88:	6833      	ldrmi	r3, [r6, #0]
 8009a8a:	3302      	addmi	r3, #2
 8009a8c:	6033      	strmi	r3, [r6, #0]
 8009a8e:	6825      	ldr	r5, [r4, #0]
 8009a90:	f015 0506 	ands.w	r5, r5, #6
 8009a94:	d106      	bne.n	8009aa4 <_printf_common+0x48>
 8009a96:	f104 0a19 	add.w	sl, r4, #25
 8009a9a:	68e3      	ldr	r3, [r4, #12]
 8009a9c:	6832      	ldr	r2, [r6, #0]
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	42ab      	cmp	r3, r5
 8009aa2:	dc2b      	bgt.n	8009afc <_printf_common+0xa0>
 8009aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009aa8:	6822      	ldr	r2, [r4, #0]
 8009aaa:	3b00      	subs	r3, #0
 8009aac:	bf18      	it	ne
 8009aae:	2301      	movne	r3, #1
 8009ab0:	0692      	lsls	r2, r2, #26
 8009ab2:	d430      	bmi.n	8009b16 <_printf_common+0xba>
 8009ab4:	4641      	mov	r1, r8
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009abc:	47c8      	blx	r9
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d023      	beq.n	8009b0a <_printf_common+0xae>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	6922      	ldr	r2, [r4, #16]
 8009ac6:	f003 0306 	and.w	r3, r3, #6
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	bf14      	ite	ne
 8009ace:	2500      	movne	r5, #0
 8009ad0:	6833      	ldreq	r3, [r6, #0]
 8009ad2:	f04f 0600 	mov.w	r6, #0
 8009ad6:	bf08      	it	eq
 8009ad8:	68e5      	ldreq	r5, [r4, #12]
 8009ada:	f104 041a 	add.w	r4, r4, #26
 8009ade:	bf08      	it	eq
 8009ae0:	1aed      	subeq	r5, r5, r3
 8009ae2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009ae6:	bf08      	it	eq
 8009ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009aec:	4293      	cmp	r3, r2
 8009aee:	bfc4      	itt	gt
 8009af0:	1a9b      	subgt	r3, r3, r2
 8009af2:	18ed      	addgt	r5, r5, r3
 8009af4:	42b5      	cmp	r5, r6
 8009af6:	d11a      	bne.n	8009b2e <_printf_common+0xd2>
 8009af8:	2000      	movs	r0, #0
 8009afa:	e008      	b.n	8009b0e <_printf_common+0xb2>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4652      	mov	r2, sl
 8009b00:	4641      	mov	r1, r8
 8009b02:	4638      	mov	r0, r7
 8009b04:	47c8      	blx	r9
 8009b06:	3001      	adds	r0, #1
 8009b08:	d103      	bne.n	8009b12 <_printf_common+0xb6>
 8009b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b12:	3501      	adds	r5, #1
 8009b14:	e7c1      	b.n	8009a9a <_printf_common+0x3e>
 8009b16:	2030      	movs	r0, #48	@ 0x30
 8009b18:	18e1      	adds	r1, r4, r3
 8009b1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b24:	4422      	add	r2, r4
 8009b26:	3302      	adds	r3, #2
 8009b28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b2c:	e7c2      	b.n	8009ab4 <_printf_common+0x58>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	4622      	mov	r2, r4
 8009b32:	4641      	mov	r1, r8
 8009b34:	4638      	mov	r0, r7
 8009b36:	47c8      	blx	r9
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d0e6      	beq.n	8009b0a <_printf_common+0xae>
 8009b3c:	3601      	adds	r6, #1
 8009b3e:	e7d9      	b.n	8009af4 <_printf_common+0x98>

08009b40 <_printf_i>:
 8009b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	7e0f      	ldrb	r7, [r1, #24]
 8009b46:	4691      	mov	r9, r2
 8009b48:	2f78      	cmp	r7, #120	@ 0x78
 8009b4a:	4680      	mov	r8, r0
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	469a      	mov	sl, r3
 8009b50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b56:	d807      	bhi.n	8009b68 <_printf_i+0x28>
 8009b58:	2f62      	cmp	r7, #98	@ 0x62
 8009b5a:	d80a      	bhi.n	8009b72 <_printf_i+0x32>
 8009b5c:	2f00      	cmp	r7, #0
 8009b5e:	f000 80d3 	beq.w	8009d08 <_printf_i+0x1c8>
 8009b62:	2f58      	cmp	r7, #88	@ 0x58
 8009b64:	f000 80ba 	beq.w	8009cdc <_printf_i+0x19c>
 8009b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b70:	e03a      	b.n	8009be8 <_printf_i+0xa8>
 8009b72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b76:	2b15      	cmp	r3, #21
 8009b78:	d8f6      	bhi.n	8009b68 <_printf_i+0x28>
 8009b7a:	a101      	add	r1, pc, #4	@ (adr r1, 8009b80 <_printf_i+0x40>)
 8009b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b80:	08009bd9 	.word	0x08009bd9
 8009b84:	08009bed 	.word	0x08009bed
 8009b88:	08009b69 	.word	0x08009b69
 8009b8c:	08009b69 	.word	0x08009b69
 8009b90:	08009b69 	.word	0x08009b69
 8009b94:	08009b69 	.word	0x08009b69
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009b69 	.word	0x08009b69
 8009ba0:	08009b69 	.word	0x08009b69
 8009ba4:	08009b69 	.word	0x08009b69
 8009ba8:	08009b69 	.word	0x08009b69
 8009bac:	08009cef 	.word	0x08009cef
 8009bb0:	08009c17 	.word	0x08009c17
 8009bb4:	08009ca9 	.word	0x08009ca9
 8009bb8:	08009b69 	.word	0x08009b69
 8009bbc:	08009b69 	.word	0x08009b69
 8009bc0:	08009d11 	.word	0x08009d11
 8009bc4:	08009b69 	.word	0x08009b69
 8009bc8:	08009c17 	.word	0x08009c17
 8009bcc:	08009b69 	.word	0x08009b69
 8009bd0:	08009b69 	.word	0x08009b69
 8009bd4:	08009cb1 	.word	0x08009cb1
 8009bd8:	6833      	ldr	r3, [r6, #0]
 8009bda:	1d1a      	adds	r2, r3, #4
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6032      	str	r2, [r6, #0]
 8009be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009be4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009be8:	2301      	movs	r3, #1
 8009bea:	e09e      	b.n	8009d2a <_printf_i+0x1ea>
 8009bec:	6833      	ldr	r3, [r6, #0]
 8009bee:	6820      	ldr	r0, [r4, #0]
 8009bf0:	1d19      	adds	r1, r3, #4
 8009bf2:	6031      	str	r1, [r6, #0]
 8009bf4:	0606      	lsls	r6, r0, #24
 8009bf6:	d501      	bpl.n	8009bfc <_printf_i+0xbc>
 8009bf8:	681d      	ldr	r5, [r3, #0]
 8009bfa:	e003      	b.n	8009c04 <_printf_i+0xc4>
 8009bfc:	0645      	lsls	r5, r0, #25
 8009bfe:	d5fb      	bpl.n	8009bf8 <_printf_i+0xb8>
 8009c00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c04:	2d00      	cmp	r5, #0
 8009c06:	da03      	bge.n	8009c10 <_printf_i+0xd0>
 8009c08:	232d      	movs	r3, #45	@ 0x2d
 8009c0a:	426d      	negs	r5, r5
 8009c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c10:	230a      	movs	r3, #10
 8009c12:	4859      	ldr	r0, [pc, #356]	@ (8009d78 <_printf_i+0x238>)
 8009c14:	e011      	b.n	8009c3a <_printf_i+0xfa>
 8009c16:	6821      	ldr	r1, [r4, #0]
 8009c18:	6833      	ldr	r3, [r6, #0]
 8009c1a:	0608      	lsls	r0, r1, #24
 8009c1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c20:	d402      	bmi.n	8009c28 <_printf_i+0xe8>
 8009c22:	0649      	lsls	r1, r1, #25
 8009c24:	bf48      	it	mi
 8009c26:	b2ad      	uxthmi	r5, r5
 8009c28:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c2a:	6033      	str	r3, [r6, #0]
 8009c2c:	bf14      	ite	ne
 8009c2e:	230a      	movne	r3, #10
 8009c30:	2308      	moveq	r3, #8
 8009c32:	4851      	ldr	r0, [pc, #324]	@ (8009d78 <_printf_i+0x238>)
 8009c34:	2100      	movs	r1, #0
 8009c36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c3a:	6866      	ldr	r6, [r4, #4]
 8009c3c:	2e00      	cmp	r6, #0
 8009c3e:	bfa8      	it	ge
 8009c40:	6821      	ldrge	r1, [r4, #0]
 8009c42:	60a6      	str	r6, [r4, #8]
 8009c44:	bfa4      	itt	ge
 8009c46:	f021 0104 	bicge.w	r1, r1, #4
 8009c4a:	6021      	strge	r1, [r4, #0]
 8009c4c:	b90d      	cbnz	r5, 8009c52 <_printf_i+0x112>
 8009c4e:	2e00      	cmp	r6, #0
 8009c50:	d04b      	beq.n	8009cea <_printf_i+0x1aa>
 8009c52:	4616      	mov	r6, r2
 8009c54:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c58:	fb03 5711 	mls	r7, r3, r1, r5
 8009c5c:	5dc7      	ldrb	r7, [r0, r7]
 8009c5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c62:	462f      	mov	r7, r5
 8009c64:	42bb      	cmp	r3, r7
 8009c66:	460d      	mov	r5, r1
 8009c68:	d9f4      	bls.n	8009c54 <_printf_i+0x114>
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d10b      	bne.n	8009c86 <_printf_i+0x146>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	07df      	lsls	r7, r3, #31
 8009c72:	d508      	bpl.n	8009c86 <_printf_i+0x146>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	6861      	ldr	r1, [r4, #4]
 8009c78:	4299      	cmp	r1, r3
 8009c7a:	bfde      	ittt	le
 8009c7c:	2330      	movle	r3, #48	@ 0x30
 8009c7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c86:	1b92      	subs	r2, r2, r6
 8009c88:	6122      	str	r2, [r4, #16]
 8009c8a:	464b      	mov	r3, r9
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4640      	mov	r0, r8
 8009c90:	f8cd a000 	str.w	sl, [sp]
 8009c94:	aa03      	add	r2, sp, #12
 8009c96:	f7ff fee1 	bl	8009a5c <_printf_common>
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	d14a      	bne.n	8009d34 <_printf_i+0x1f4>
 8009c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca2:	b004      	add	sp, #16
 8009ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	f043 0320 	orr.w	r3, r3, #32
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	2778      	movs	r7, #120	@ 0x78
 8009cb2:	4832      	ldr	r0, [pc, #200]	@ (8009d7c <_printf_i+0x23c>)
 8009cb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	6831      	ldr	r1, [r6, #0]
 8009cbc:	061f      	lsls	r7, r3, #24
 8009cbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8009cc2:	d402      	bmi.n	8009cca <_printf_i+0x18a>
 8009cc4:	065f      	lsls	r7, r3, #25
 8009cc6:	bf48      	it	mi
 8009cc8:	b2ad      	uxthmi	r5, r5
 8009cca:	6031      	str	r1, [r6, #0]
 8009ccc:	07d9      	lsls	r1, r3, #31
 8009cce:	bf44      	itt	mi
 8009cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8009cd4:	6023      	strmi	r3, [r4, #0]
 8009cd6:	b11d      	cbz	r5, 8009ce0 <_printf_i+0x1a0>
 8009cd8:	2310      	movs	r3, #16
 8009cda:	e7ab      	b.n	8009c34 <_printf_i+0xf4>
 8009cdc:	4826      	ldr	r0, [pc, #152]	@ (8009d78 <_printf_i+0x238>)
 8009cde:	e7e9      	b.n	8009cb4 <_printf_i+0x174>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	f023 0320 	bic.w	r3, r3, #32
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	e7f6      	b.n	8009cd8 <_printf_i+0x198>
 8009cea:	4616      	mov	r6, r2
 8009cec:	e7bd      	b.n	8009c6a <_printf_i+0x12a>
 8009cee:	6833      	ldr	r3, [r6, #0]
 8009cf0:	6825      	ldr	r5, [r4, #0]
 8009cf2:	1d18      	adds	r0, r3, #4
 8009cf4:	6961      	ldr	r1, [r4, #20]
 8009cf6:	6030      	str	r0, [r6, #0]
 8009cf8:	062e      	lsls	r6, r5, #24
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	d501      	bpl.n	8009d02 <_printf_i+0x1c2>
 8009cfe:	6019      	str	r1, [r3, #0]
 8009d00:	e002      	b.n	8009d08 <_printf_i+0x1c8>
 8009d02:	0668      	lsls	r0, r5, #25
 8009d04:	d5fb      	bpl.n	8009cfe <_printf_i+0x1be>
 8009d06:	8019      	strh	r1, [r3, #0]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4616      	mov	r6, r2
 8009d0c:	6123      	str	r3, [r4, #16]
 8009d0e:	e7bc      	b.n	8009c8a <_printf_i+0x14a>
 8009d10:	6833      	ldr	r3, [r6, #0]
 8009d12:	2100      	movs	r1, #0
 8009d14:	1d1a      	adds	r2, r3, #4
 8009d16:	6032      	str	r2, [r6, #0]
 8009d18:	681e      	ldr	r6, [r3, #0]
 8009d1a:	6862      	ldr	r2, [r4, #4]
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f000 fa7e 	bl	800a21e <memchr>
 8009d22:	b108      	cbz	r0, 8009d28 <_printf_i+0x1e8>
 8009d24:	1b80      	subs	r0, r0, r6
 8009d26:	6060      	str	r0, [r4, #4]
 8009d28:	6863      	ldr	r3, [r4, #4]
 8009d2a:	6123      	str	r3, [r4, #16]
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d32:	e7aa      	b.n	8009c8a <_printf_i+0x14a>
 8009d34:	4632      	mov	r2, r6
 8009d36:	4649      	mov	r1, r9
 8009d38:	4640      	mov	r0, r8
 8009d3a:	6923      	ldr	r3, [r4, #16]
 8009d3c:	47d0      	blx	sl
 8009d3e:	3001      	adds	r0, #1
 8009d40:	d0ad      	beq.n	8009c9e <_printf_i+0x15e>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	079b      	lsls	r3, r3, #30
 8009d46:	d413      	bmi.n	8009d70 <_printf_i+0x230>
 8009d48:	68e0      	ldr	r0, [r4, #12]
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	4298      	cmp	r0, r3
 8009d4e:	bfb8      	it	lt
 8009d50:	4618      	movlt	r0, r3
 8009d52:	e7a6      	b.n	8009ca2 <_printf_i+0x162>
 8009d54:	2301      	movs	r3, #1
 8009d56:	4632      	mov	r2, r6
 8009d58:	4649      	mov	r1, r9
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	47d0      	blx	sl
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d09d      	beq.n	8009c9e <_printf_i+0x15e>
 8009d62:	3501      	adds	r5, #1
 8009d64:	68e3      	ldr	r3, [r4, #12]
 8009d66:	9903      	ldr	r1, [sp, #12]
 8009d68:	1a5b      	subs	r3, r3, r1
 8009d6a:	42ab      	cmp	r3, r5
 8009d6c:	dcf2      	bgt.n	8009d54 <_printf_i+0x214>
 8009d6e:	e7eb      	b.n	8009d48 <_printf_i+0x208>
 8009d70:	2500      	movs	r5, #0
 8009d72:	f104 0619 	add.w	r6, r4, #25
 8009d76:	e7f5      	b.n	8009d64 <_printf_i+0x224>
 8009d78:	0800cce2 	.word	0x0800cce2
 8009d7c:	0800ccf3 	.word	0x0800ccf3

08009d80 <std>:
 8009d80:	2300      	movs	r3, #0
 8009d82:	b510      	push	{r4, lr}
 8009d84:	4604      	mov	r4, r0
 8009d86:	e9c0 3300 	strd	r3, r3, [r0]
 8009d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d8e:	6083      	str	r3, [r0, #8]
 8009d90:	8181      	strh	r1, [r0, #12]
 8009d92:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d94:	81c2      	strh	r2, [r0, #14]
 8009d96:	6183      	str	r3, [r0, #24]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	2208      	movs	r2, #8
 8009d9c:	305c      	adds	r0, #92	@ 0x5c
 8009d9e:	f000 f928 	bl	8009ff2 <memset>
 8009da2:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd8 <std+0x58>)
 8009da4:	6224      	str	r4, [r4, #32]
 8009da6:	6263      	str	r3, [r4, #36]	@ 0x24
 8009da8:	4b0c      	ldr	r3, [pc, #48]	@ (8009ddc <std+0x5c>)
 8009daa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009dac:	4b0c      	ldr	r3, [pc, #48]	@ (8009de0 <std+0x60>)
 8009dae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009db0:	4b0c      	ldr	r3, [pc, #48]	@ (8009de4 <std+0x64>)
 8009db2:	6323      	str	r3, [r4, #48]	@ 0x30
 8009db4:	4b0c      	ldr	r3, [pc, #48]	@ (8009de8 <std+0x68>)
 8009db6:	429c      	cmp	r4, r3
 8009db8:	d006      	beq.n	8009dc8 <std+0x48>
 8009dba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009dbe:	4294      	cmp	r4, r2
 8009dc0:	d002      	beq.n	8009dc8 <std+0x48>
 8009dc2:	33d0      	adds	r3, #208	@ 0xd0
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	d105      	bne.n	8009dd4 <std+0x54>
 8009dc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dd0:	f000 ba22 	b.w	800a218 <__retarget_lock_init_recursive>
 8009dd4:	bd10      	pop	{r4, pc}
 8009dd6:	bf00      	nop
 8009dd8:	08009f6d 	.word	0x08009f6d
 8009ddc:	08009f8f 	.word	0x08009f8f
 8009de0:	08009fc7 	.word	0x08009fc7
 8009de4:	08009feb 	.word	0x08009feb
 8009de8:	20001030 	.word	0x20001030

08009dec <stdio_exit_handler>:
 8009dec:	4a02      	ldr	r2, [pc, #8]	@ (8009df8 <stdio_exit_handler+0xc>)
 8009dee:	4903      	ldr	r1, [pc, #12]	@ (8009dfc <stdio_exit_handler+0x10>)
 8009df0:	4803      	ldr	r0, [pc, #12]	@ (8009e00 <stdio_exit_handler+0x14>)
 8009df2:	f000 b869 	b.w	8009ec8 <_fwalk_sglue>
 8009df6:	bf00      	nop
 8009df8:	20000184 	.word	0x20000184
 8009dfc:	0800c4e9 	.word	0x0800c4e9
 8009e00:	20000300 	.word	0x20000300

08009e04 <cleanup_stdio>:
 8009e04:	6841      	ldr	r1, [r0, #4]
 8009e06:	4b0c      	ldr	r3, [pc, #48]	@ (8009e38 <cleanup_stdio+0x34>)
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	4299      	cmp	r1, r3
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	d001      	beq.n	8009e14 <cleanup_stdio+0x10>
 8009e10:	f002 fb6a 	bl	800c4e8 <_fflush_r>
 8009e14:	68a1      	ldr	r1, [r4, #8]
 8009e16:	4b09      	ldr	r3, [pc, #36]	@ (8009e3c <cleanup_stdio+0x38>)
 8009e18:	4299      	cmp	r1, r3
 8009e1a:	d002      	beq.n	8009e22 <cleanup_stdio+0x1e>
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f002 fb63 	bl	800c4e8 <_fflush_r>
 8009e22:	68e1      	ldr	r1, [r4, #12]
 8009e24:	4b06      	ldr	r3, [pc, #24]	@ (8009e40 <cleanup_stdio+0x3c>)
 8009e26:	4299      	cmp	r1, r3
 8009e28:	d004      	beq.n	8009e34 <cleanup_stdio+0x30>
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e30:	f002 bb5a 	b.w	800c4e8 <_fflush_r>
 8009e34:	bd10      	pop	{r4, pc}
 8009e36:	bf00      	nop
 8009e38:	20001030 	.word	0x20001030
 8009e3c:	20001098 	.word	0x20001098
 8009e40:	20001100 	.word	0x20001100

08009e44 <global_stdio_init.part.0>:
 8009e44:	b510      	push	{r4, lr}
 8009e46:	4b0b      	ldr	r3, [pc, #44]	@ (8009e74 <global_stdio_init.part.0+0x30>)
 8009e48:	4c0b      	ldr	r4, [pc, #44]	@ (8009e78 <global_stdio_init.part.0+0x34>)
 8009e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009e7c <global_stdio_init.part.0+0x38>)
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	2104      	movs	r1, #4
 8009e52:	2200      	movs	r2, #0
 8009e54:	f7ff ff94 	bl	8009d80 <std>
 8009e58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	2109      	movs	r1, #9
 8009e60:	f7ff ff8e 	bl	8009d80 <std>
 8009e64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e68:	2202      	movs	r2, #2
 8009e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e6e:	2112      	movs	r1, #18
 8009e70:	f7ff bf86 	b.w	8009d80 <std>
 8009e74:	20001168 	.word	0x20001168
 8009e78:	20001030 	.word	0x20001030
 8009e7c:	08009ded 	.word	0x08009ded

08009e80 <__sfp_lock_acquire>:
 8009e80:	4801      	ldr	r0, [pc, #4]	@ (8009e88 <__sfp_lock_acquire+0x8>)
 8009e82:	f000 b9ca 	b.w	800a21a <__retarget_lock_acquire_recursive>
 8009e86:	bf00      	nop
 8009e88:	20001171 	.word	0x20001171

08009e8c <__sfp_lock_release>:
 8009e8c:	4801      	ldr	r0, [pc, #4]	@ (8009e94 <__sfp_lock_release+0x8>)
 8009e8e:	f000 b9c5 	b.w	800a21c <__retarget_lock_release_recursive>
 8009e92:	bf00      	nop
 8009e94:	20001171 	.word	0x20001171

08009e98 <__sinit>:
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	f7ff fff0 	bl	8009e80 <__sfp_lock_acquire>
 8009ea0:	6a23      	ldr	r3, [r4, #32]
 8009ea2:	b11b      	cbz	r3, 8009eac <__sinit+0x14>
 8009ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea8:	f7ff bff0 	b.w	8009e8c <__sfp_lock_release>
 8009eac:	4b04      	ldr	r3, [pc, #16]	@ (8009ec0 <__sinit+0x28>)
 8009eae:	6223      	str	r3, [r4, #32]
 8009eb0:	4b04      	ldr	r3, [pc, #16]	@ (8009ec4 <__sinit+0x2c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1f5      	bne.n	8009ea4 <__sinit+0xc>
 8009eb8:	f7ff ffc4 	bl	8009e44 <global_stdio_init.part.0>
 8009ebc:	e7f2      	b.n	8009ea4 <__sinit+0xc>
 8009ebe:	bf00      	nop
 8009ec0:	08009e05 	.word	0x08009e05
 8009ec4:	20001168 	.word	0x20001168

08009ec8 <_fwalk_sglue>:
 8009ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	4607      	mov	r7, r0
 8009ece:	4688      	mov	r8, r1
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	2600      	movs	r6, #0
 8009ed4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ed8:	f1b9 0901 	subs.w	r9, r9, #1
 8009edc:	d505      	bpl.n	8009eea <_fwalk_sglue+0x22>
 8009ede:	6824      	ldr	r4, [r4, #0]
 8009ee0:	2c00      	cmp	r4, #0
 8009ee2:	d1f7      	bne.n	8009ed4 <_fwalk_sglue+0xc>
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d907      	bls.n	8009f00 <_fwalk_sglue+0x38>
 8009ef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	d003      	beq.n	8009f00 <_fwalk_sglue+0x38>
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4638      	mov	r0, r7
 8009efc:	47c0      	blx	r8
 8009efe:	4306      	orrs	r6, r0
 8009f00:	3568      	adds	r5, #104	@ 0x68
 8009f02:	e7e9      	b.n	8009ed8 <_fwalk_sglue+0x10>

08009f04 <sniprintf>:
 8009f04:	b40c      	push	{r2, r3}
 8009f06:	b530      	push	{r4, r5, lr}
 8009f08:	4b17      	ldr	r3, [pc, #92]	@ (8009f68 <sniprintf+0x64>)
 8009f0a:	1e0c      	subs	r4, r1, #0
 8009f0c:	681d      	ldr	r5, [r3, #0]
 8009f0e:	b09d      	sub	sp, #116	@ 0x74
 8009f10:	da08      	bge.n	8009f24 <sniprintf+0x20>
 8009f12:	238b      	movs	r3, #139	@ 0x8b
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	602b      	str	r3, [r5, #0]
 8009f1a:	b01d      	add	sp, #116	@ 0x74
 8009f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f20:	b002      	add	sp, #8
 8009f22:	4770      	bx	lr
 8009f24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009f28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f2c:	bf0c      	ite	eq
 8009f2e:	4623      	moveq	r3, r4
 8009f30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f34:	9304      	str	r3, [sp, #16]
 8009f36:	9307      	str	r3, [sp, #28]
 8009f38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f3c:	9002      	str	r0, [sp, #8]
 8009f3e:	9006      	str	r0, [sp, #24]
 8009f40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f44:	4628      	mov	r0, r5
 8009f46:	ab21      	add	r3, sp, #132	@ 0x84
 8009f48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009f4a:	a902      	add	r1, sp, #8
 8009f4c:	9301      	str	r3, [sp, #4]
 8009f4e:	f002 f94f 	bl	800c1f0 <_svfiprintf_r>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	bfbc      	itt	lt
 8009f56:	238b      	movlt	r3, #139	@ 0x8b
 8009f58:	602b      	strlt	r3, [r5, #0]
 8009f5a:	2c00      	cmp	r4, #0
 8009f5c:	d0dd      	beq.n	8009f1a <sniprintf+0x16>
 8009f5e:	2200      	movs	r2, #0
 8009f60:	9b02      	ldr	r3, [sp, #8]
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	e7d9      	b.n	8009f1a <sniprintf+0x16>
 8009f66:	bf00      	nop
 8009f68:	200002fc 	.word	0x200002fc

08009f6c <__sread>:
 8009f6c:	b510      	push	{r4, lr}
 8009f6e:	460c      	mov	r4, r1
 8009f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f74:	f000 f902 	bl	800a17c <_read_r>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	bfab      	itete	ge
 8009f7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009f80:	181b      	addge	r3, r3, r0
 8009f82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f86:	bfac      	ite	ge
 8009f88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f8a:	81a3      	strhlt	r3, [r4, #12]
 8009f8c:	bd10      	pop	{r4, pc}

08009f8e <__swrite>:
 8009f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f92:	461f      	mov	r7, r3
 8009f94:	898b      	ldrh	r3, [r1, #12]
 8009f96:	4605      	mov	r5, r0
 8009f98:	05db      	lsls	r3, r3, #23
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	4616      	mov	r6, r2
 8009f9e:	d505      	bpl.n	8009fac <__swrite+0x1e>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa8:	f000 f8d6 	bl	800a158 <_lseek_r>
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	4632      	mov	r2, r6
 8009fb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	463b      	mov	r3, r7
 8009fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc2:	f000 b8ed 	b.w	800a1a0 <_write_r>

08009fc6 <__sseek>:
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	460c      	mov	r4, r1
 8009fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fce:	f000 f8c3 	bl	800a158 <_lseek_r>
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	bf15      	itete	ne
 8009fd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009fda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009fde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009fe2:	81a3      	strheq	r3, [r4, #12]
 8009fe4:	bf18      	it	ne
 8009fe6:	81a3      	strhne	r3, [r4, #12]
 8009fe8:	bd10      	pop	{r4, pc}

08009fea <__sclose>:
 8009fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fee:	f000 b8a3 	b.w	800a138 <_close_r>

08009ff2 <memset>:
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	4402      	add	r2, r0
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d100      	bne.n	8009ffc <memset+0xa>
 8009ffa:	4770      	bx	lr
 8009ffc:	f803 1b01 	strb.w	r1, [r3], #1
 800a000:	e7f9      	b.n	8009ff6 <memset+0x4>

0800a002 <strncmp>:
 800a002:	b510      	push	{r4, lr}
 800a004:	b16a      	cbz	r2, 800a022 <strncmp+0x20>
 800a006:	3901      	subs	r1, #1
 800a008:	1884      	adds	r4, r0, r2
 800a00a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a00e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a012:	429a      	cmp	r2, r3
 800a014:	d103      	bne.n	800a01e <strncmp+0x1c>
 800a016:	42a0      	cmp	r0, r4
 800a018:	d001      	beq.n	800a01e <strncmp+0x1c>
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	d1f5      	bne.n	800a00a <strncmp+0x8>
 800a01e:	1ad0      	subs	r0, r2, r3
 800a020:	bd10      	pop	{r4, pc}
 800a022:	4610      	mov	r0, r2
 800a024:	e7fc      	b.n	800a020 <strncmp+0x1e>

0800a026 <strncpy>:
 800a026:	4603      	mov	r3, r0
 800a028:	b510      	push	{r4, lr}
 800a02a:	3901      	subs	r1, #1
 800a02c:	b132      	cbz	r2, 800a03c <strncpy+0x16>
 800a02e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a032:	3a01      	subs	r2, #1
 800a034:	f803 4b01 	strb.w	r4, [r3], #1
 800a038:	2c00      	cmp	r4, #0
 800a03a:	d1f7      	bne.n	800a02c <strncpy+0x6>
 800a03c:	2100      	movs	r1, #0
 800a03e:	441a      	add	r2, r3
 800a040:	4293      	cmp	r3, r2
 800a042:	d100      	bne.n	800a046 <strncpy+0x20>
 800a044:	bd10      	pop	{r4, pc}
 800a046:	f803 1b01 	strb.w	r1, [r3], #1
 800a04a:	e7f9      	b.n	800a040 <strncpy+0x1a>

0800a04c <strtok>:
 800a04c:	4b16      	ldr	r3, [pc, #88]	@ (800a0a8 <strtok+0x5c>)
 800a04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a052:	681f      	ldr	r7, [r3, #0]
 800a054:	4605      	mov	r5, r0
 800a056:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a058:	460e      	mov	r6, r1
 800a05a:	b9ec      	cbnz	r4, 800a098 <strtok+0x4c>
 800a05c:	2050      	movs	r0, #80	@ 0x50
 800a05e:	f001 faf1 	bl	800b644 <malloc>
 800a062:	4602      	mov	r2, r0
 800a064:	6478      	str	r0, [r7, #68]	@ 0x44
 800a066:	b920      	cbnz	r0, 800a072 <strtok+0x26>
 800a068:	215b      	movs	r1, #91	@ 0x5b
 800a06a:	4b10      	ldr	r3, [pc, #64]	@ (800a0ac <strtok+0x60>)
 800a06c:	4810      	ldr	r0, [pc, #64]	@ (800a0b0 <strtok+0x64>)
 800a06e:	f000 f8f9 	bl	800a264 <__assert_func>
 800a072:	e9c0 4400 	strd	r4, r4, [r0]
 800a076:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a07a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a07e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a082:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a086:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a08a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a08e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a092:	6184      	str	r4, [r0, #24]
 800a094:	7704      	strb	r4, [r0, #28]
 800a096:	6244      	str	r4, [r0, #36]	@ 0x24
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a4:	f000 b806 	b.w	800a0b4 <__strtok_r>
 800a0a8:	200002fc 	.word	0x200002fc
 800a0ac:	0800cd04 	.word	0x0800cd04
 800a0b0:	0800cd1b 	.word	0x0800cd1b

0800a0b4 <__strtok_r>:
 800a0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	b908      	cbnz	r0, 800a0be <__strtok_r+0xa>
 800a0ba:	6814      	ldr	r4, [r2, #0]
 800a0bc:	b144      	cbz	r4, 800a0d0 <__strtok_r+0x1c>
 800a0be:	460f      	mov	r7, r1
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a0c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a0ca:	b91e      	cbnz	r6, 800a0d4 <__strtok_r+0x20>
 800a0cc:	b965      	cbnz	r5, 800a0e8 <__strtok_r+0x34>
 800a0ce:	6015      	str	r5, [r2, #0]
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	e005      	b.n	800a0e0 <__strtok_r+0x2c>
 800a0d4:	42b5      	cmp	r5, r6
 800a0d6:	d1f6      	bne.n	800a0c6 <__strtok_r+0x12>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1f0      	bne.n	800a0be <__strtok_r+0xa>
 800a0dc:	6014      	str	r4, [r2, #0]
 800a0de:	7003      	strb	r3, [r0, #0]
 800a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e2:	461c      	mov	r4, r3
 800a0e4:	e00c      	b.n	800a100 <__strtok_r+0x4c>
 800a0e6:	b915      	cbnz	r5, 800a0ee <__strtok_r+0x3a>
 800a0e8:	460e      	mov	r6, r1
 800a0ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a0f2:	42ab      	cmp	r3, r5
 800a0f4:	d1f7      	bne.n	800a0e6 <__strtok_r+0x32>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0f3      	beq.n	800a0e2 <__strtok_r+0x2e>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a100:	6014      	str	r4, [r2, #0]
 800a102:	e7ed      	b.n	800a0e0 <__strtok_r+0x2c>

0800a104 <strstr>:
 800a104:	780a      	ldrb	r2, [r1, #0]
 800a106:	b570      	push	{r4, r5, r6, lr}
 800a108:	b96a      	cbnz	r2, 800a126 <strstr+0x22>
 800a10a:	bd70      	pop	{r4, r5, r6, pc}
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d109      	bne.n	800a124 <strstr+0x20>
 800a110:	460c      	mov	r4, r1
 800a112:	4605      	mov	r5, r0
 800a114:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0f6      	beq.n	800a10a <strstr+0x6>
 800a11c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a120:	429e      	cmp	r6, r3
 800a122:	d0f7      	beq.n	800a114 <strstr+0x10>
 800a124:	3001      	adds	r0, #1
 800a126:	7803      	ldrb	r3, [r0, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1ef      	bne.n	800a10c <strstr+0x8>
 800a12c:	4618      	mov	r0, r3
 800a12e:	e7ec      	b.n	800a10a <strstr+0x6>

0800a130 <_localeconv_r>:
 800a130:	4800      	ldr	r0, [pc, #0]	@ (800a134 <_localeconv_r+0x4>)
 800a132:	4770      	bx	lr
 800a134:	20000280 	.word	0x20000280

0800a138 <_close_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	2300      	movs	r3, #0
 800a13c:	4d05      	ldr	r5, [pc, #20]	@ (800a154 <_close_r+0x1c>)
 800a13e:	4604      	mov	r4, r0
 800a140:	4608      	mov	r0, r1
 800a142:	602b      	str	r3, [r5, #0]
 800a144:	f7f8 ff3f 	bl	8002fc6 <_close>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d102      	bne.n	800a152 <_close_r+0x1a>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	b103      	cbz	r3, 800a152 <_close_r+0x1a>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	2000116c 	.word	0x2000116c

0800a158 <_lseek_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	4604      	mov	r4, r0
 800a15c:	4608      	mov	r0, r1
 800a15e:	4611      	mov	r1, r2
 800a160:	2200      	movs	r2, #0
 800a162:	4d05      	ldr	r5, [pc, #20]	@ (800a178 <_lseek_r+0x20>)
 800a164:	602a      	str	r2, [r5, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	f7f8 ff51 	bl	800300e <_lseek>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_lseek_r+0x1e>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_lseek_r+0x1e>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	2000116c 	.word	0x2000116c

0800a17c <_read_r>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	4604      	mov	r4, r0
 800a180:	4608      	mov	r0, r1
 800a182:	4611      	mov	r1, r2
 800a184:	2200      	movs	r2, #0
 800a186:	4d05      	ldr	r5, [pc, #20]	@ (800a19c <_read_r+0x20>)
 800a188:	602a      	str	r2, [r5, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f7f8 fee2 	bl	8002f54 <_read>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_read_r+0x1e>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_read_r+0x1e>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	2000116c 	.word	0x2000116c

0800a1a0 <_write_r>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4d05      	ldr	r5, [pc, #20]	@ (800a1c0 <_write_r+0x20>)
 800a1ac:	602a      	str	r2, [r5, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f7f8 feed 	bl	8002f8e <_write>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_write_r+0x1e>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_write_r+0x1e>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	2000116c 	.word	0x2000116c

0800a1c4 <__errno>:
 800a1c4:	4b01      	ldr	r3, [pc, #4]	@ (800a1cc <__errno+0x8>)
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	200002fc 	.word	0x200002fc

0800a1d0 <__libc_init_array>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	2600      	movs	r6, #0
 800a1d4:	4d0c      	ldr	r5, [pc, #48]	@ (800a208 <__libc_init_array+0x38>)
 800a1d6:	4c0d      	ldr	r4, [pc, #52]	@ (800a20c <__libc_init_array+0x3c>)
 800a1d8:	1b64      	subs	r4, r4, r5
 800a1da:	10a4      	asrs	r4, r4, #2
 800a1dc:	42a6      	cmp	r6, r4
 800a1de:	d109      	bne.n	800a1f4 <__libc_init_array+0x24>
 800a1e0:	f002 fcd2 	bl	800cb88 <_init>
 800a1e4:	2600      	movs	r6, #0
 800a1e6:	4d0a      	ldr	r5, [pc, #40]	@ (800a210 <__libc_init_array+0x40>)
 800a1e8:	4c0a      	ldr	r4, [pc, #40]	@ (800a214 <__libc_init_array+0x44>)
 800a1ea:	1b64      	subs	r4, r4, r5
 800a1ec:	10a4      	asrs	r4, r4, #2
 800a1ee:	42a6      	cmp	r6, r4
 800a1f0:	d105      	bne.n	800a1fe <__libc_init_array+0x2e>
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1f8:	4798      	blx	r3
 800a1fa:	3601      	adds	r6, #1
 800a1fc:	e7ee      	b.n	800a1dc <__libc_init_array+0xc>
 800a1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a202:	4798      	blx	r3
 800a204:	3601      	adds	r6, #1
 800a206:	e7f2      	b.n	800a1ee <__libc_init_array+0x1e>
 800a208:	0800d104 	.word	0x0800d104
 800a20c:	0800d104 	.word	0x0800d104
 800a210:	0800d104 	.word	0x0800d104
 800a214:	0800d108 	.word	0x0800d108

0800a218 <__retarget_lock_init_recursive>:
 800a218:	4770      	bx	lr

0800a21a <__retarget_lock_acquire_recursive>:
 800a21a:	4770      	bx	lr

0800a21c <__retarget_lock_release_recursive>:
 800a21c:	4770      	bx	lr

0800a21e <memchr>:
 800a21e:	4603      	mov	r3, r0
 800a220:	b510      	push	{r4, lr}
 800a222:	b2c9      	uxtb	r1, r1
 800a224:	4402      	add	r2, r0
 800a226:	4293      	cmp	r3, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	d101      	bne.n	800a230 <memchr+0x12>
 800a22c:	2000      	movs	r0, #0
 800a22e:	e003      	b.n	800a238 <memchr+0x1a>
 800a230:	7804      	ldrb	r4, [r0, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	428c      	cmp	r4, r1
 800a236:	d1f6      	bne.n	800a226 <memchr+0x8>
 800a238:	bd10      	pop	{r4, pc}

0800a23a <memcpy>:
 800a23a:	440a      	add	r2, r1
 800a23c:	4291      	cmp	r1, r2
 800a23e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a242:	d100      	bne.n	800a246 <memcpy+0xc>
 800a244:	4770      	bx	lr
 800a246:	b510      	push	{r4, lr}
 800a248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a24c:	4291      	cmp	r1, r2
 800a24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a252:	d1f9      	bne.n	800a248 <memcpy+0xe>
 800a254:	bd10      	pop	{r4, pc}
	...

0800a258 <nan>:
 800a258:	2000      	movs	r0, #0
 800a25a:	4901      	ldr	r1, [pc, #4]	@ (800a260 <nan+0x8>)
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	7ff80000 	.word	0x7ff80000

0800a264 <__assert_func>:
 800a264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a266:	4614      	mov	r4, r2
 800a268:	461a      	mov	r2, r3
 800a26a:	4b09      	ldr	r3, [pc, #36]	@ (800a290 <__assert_func+0x2c>)
 800a26c:	4605      	mov	r5, r0
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68d8      	ldr	r0, [r3, #12]
 800a272:	b954      	cbnz	r4, 800a28a <__assert_func+0x26>
 800a274:	4b07      	ldr	r3, [pc, #28]	@ (800a294 <__assert_func+0x30>)
 800a276:	461c      	mov	r4, r3
 800a278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a27c:	9100      	str	r1, [sp, #0]
 800a27e:	462b      	mov	r3, r5
 800a280:	4905      	ldr	r1, [pc, #20]	@ (800a298 <__assert_func+0x34>)
 800a282:	f002 f959 	bl	800c538 <fiprintf>
 800a286:	f002 f993 	bl	800c5b0 <abort>
 800a28a:	4b04      	ldr	r3, [pc, #16]	@ (800a29c <__assert_func+0x38>)
 800a28c:	e7f4      	b.n	800a278 <__assert_func+0x14>
 800a28e:	bf00      	nop
 800a290:	200002fc 	.word	0x200002fc
 800a294:	0800cdb8 	.word	0x0800cdb8
 800a298:	0800cd8a 	.word	0x0800cd8a
 800a29c:	0800cd7d 	.word	0x0800cd7d

0800a2a0 <quorem>:
 800a2a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	6903      	ldr	r3, [r0, #16]
 800a2a6:	690c      	ldr	r4, [r1, #16]
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	db7e      	blt.n	800a3ac <quorem+0x10c>
 800a2ae:	3c01      	subs	r4, #1
 800a2b0:	00a3      	lsls	r3, r4, #2
 800a2b2:	f100 0514 	add.w	r5, r0, #20
 800a2b6:	f101 0814 	add.w	r8, r1, #20
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2d6:	d32e      	bcc.n	800a336 <quorem+0x96>
 800a2d8:	f04f 0a00 	mov.w	sl, #0
 800a2dc:	46c4      	mov	ip, r8
 800a2de:	46ae      	mov	lr, r5
 800a2e0:	46d3      	mov	fp, sl
 800a2e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2e6:	b298      	uxth	r0, r3
 800a2e8:	fb06 a000 	mla	r0, r6, r0, sl
 800a2ec:	0c1b      	lsrs	r3, r3, #16
 800a2ee:	0c02      	lsrs	r2, r0, #16
 800a2f0:	fb06 2303 	mla	r3, r6, r3, r2
 800a2f4:	f8de 2000 	ldr.w	r2, [lr]
 800a2f8:	b280      	uxth	r0, r0
 800a2fa:	b292      	uxth	r2, r2
 800a2fc:	1a12      	subs	r2, r2, r0
 800a2fe:	445a      	add	r2, fp
 800a300:	f8de 0000 	ldr.w	r0, [lr]
 800a304:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a308:	b29b      	uxth	r3, r3
 800a30a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a30e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a312:	b292      	uxth	r2, r2
 800a314:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a318:	45e1      	cmp	r9, ip
 800a31a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a31e:	f84e 2b04 	str.w	r2, [lr], #4
 800a322:	d2de      	bcs.n	800a2e2 <quorem+0x42>
 800a324:	9b00      	ldr	r3, [sp, #0]
 800a326:	58eb      	ldr	r3, [r5, r3]
 800a328:	b92b      	cbnz	r3, 800a336 <quorem+0x96>
 800a32a:	9b01      	ldr	r3, [sp, #4]
 800a32c:	3b04      	subs	r3, #4
 800a32e:	429d      	cmp	r5, r3
 800a330:	461a      	mov	r2, r3
 800a332:	d32f      	bcc.n	800a394 <quorem+0xf4>
 800a334:	613c      	str	r4, [r7, #16]
 800a336:	4638      	mov	r0, r7
 800a338:	f001 fd0e 	bl	800bd58 <__mcmp>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	db25      	blt.n	800a38c <quorem+0xec>
 800a340:	4629      	mov	r1, r5
 800a342:	2000      	movs	r0, #0
 800a344:	f858 2b04 	ldr.w	r2, [r8], #4
 800a348:	f8d1 c000 	ldr.w	ip, [r1]
 800a34c:	fa1f fe82 	uxth.w	lr, r2
 800a350:	fa1f f38c 	uxth.w	r3, ip
 800a354:	eba3 030e 	sub.w	r3, r3, lr
 800a358:	4403      	add	r3, r0
 800a35a:	0c12      	lsrs	r2, r2, #16
 800a35c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a360:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a364:	b29b      	uxth	r3, r3
 800a366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a36a:	45c1      	cmp	r9, r8
 800a36c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a370:	f841 3b04 	str.w	r3, [r1], #4
 800a374:	d2e6      	bcs.n	800a344 <quorem+0xa4>
 800a376:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a37a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a37e:	b922      	cbnz	r2, 800a38a <quorem+0xea>
 800a380:	3b04      	subs	r3, #4
 800a382:	429d      	cmp	r5, r3
 800a384:	461a      	mov	r2, r3
 800a386:	d30b      	bcc.n	800a3a0 <quorem+0x100>
 800a388:	613c      	str	r4, [r7, #16]
 800a38a:	3601      	adds	r6, #1
 800a38c:	4630      	mov	r0, r6
 800a38e:	b003      	add	sp, #12
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a394:	6812      	ldr	r2, [r2, #0]
 800a396:	3b04      	subs	r3, #4
 800a398:	2a00      	cmp	r2, #0
 800a39a:	d1cb      	bne.n	800a334 <quorem+0x94>
 800a39c:	3c01      	subs	r4, #1
 800a39e:	e7c6      	b.n	800a32e <quorem+0x8e>
 800a3a0:	6812      	ldr	r2, [r2, #0]
 800a3a2:	3b04      	subs	r3, #4
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	d1ef      	bne.n	800a388 <quorem+0xe8>
 800a3a8:	3c01      	subs	r4, #1
 800a3aa:	e7ea      	b.n	800a382 <quorem+0xe2>
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	e7ee      	b.n	800a38e <quorem+0xee>

0800a3b0 <_dtoa_r>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	461d      	mov	r5, r3
 800a3b8:	69c7      	ldr	r7, [r0, #28]
 800a3ba:	b097      	sub	sp, #92	@ 0x5c
 800a3bc:	4683      	mov	fp, r0
 800a3be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a3c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a3c4:	b97f      	cbnz	r7, 800a3e6 <_dtoa_r+0x36>
 800a3c6:	2010      	movs	r0, #16
 800a3c8:	f001 f93c 	bl	800b644 <malloc>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	f8cb 001c 	str.w	r0, [fp, #28]
 800a3d2:	b920      	cbnz	r0, 800a3de <_dtoa_r+0x2e>
 800a3d4:	21ef      	movs	r1, #239	@ 0xef
 800a3d6:	4ba8      	ldr	r3, [pc, #672]	@ (800a678 <_dtoa_r+0x2c8>)
 800a3d8:	48a8      	ldr	r0, [pc, #672]	@ (800a67c <_dtoa_r+0x2cc>)
 800a3da:	f7ff ff43 	bl	800a264 <__assert_func>
 800a3de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a3e2:	6007      	str	r7, [r0, #0]
 800a3e4:	60c7      	str	r7, [r0, #12]
 800a3e6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3ea:	6819      	ldr	r1, [r3, #0]
 800a3ec:	b159      	cbz	r1, 800a406 <_dtoa_r+0x56>
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	4093      	lsls	r3, r2
 800a3f4:	604a      	str	r2, [r1, #4]
 800a3f6:	608b      	str	r3, [r1, #8]
 800a3f8:	4658      	mov	r0, fp
 800a3fa:	f001 fa2b 	bl	800b854 <_Bfree>
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	1e2b      	subs	r3, r5, #0
 800a408:	bfaf      	iteee	ge
 800a40a:	2300      	movge	r3, #0
 800a40c:	2201      	movlt	r2, #1
 800a40e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a412:	9303      	strlt	r3, [sp, #12]
 800a414:	bfa8      	it	ge
 800a416:	6033      	strge	r3, [r6, #0]
 800a418:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a41c:	4b98      	ldr	r3, [pc, #608]	@ (800a680 <_dtoa_r+0x2d0>)
 800a41e:	bfb8      	it	lt
 800a420:	6032      	strlt	r2, [r6, #0]
 800a422:	ea33 0308 	bics.w	r3, r3, r8
 800a426:	d112      	bne.n	800a44e <_dtoa_r+0x9e>
 800a428:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a42c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a434:	4323      	orrs	r3, r4
 800a436:	f000 8550 	beq.w	800aeda <_dtoa_r+0xb2a>
 800a43a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a43c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a684 <_dtoa_r+0x2d4>
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 8552 	beq.w	800aeea <_dtoa_r+0xb3a>
 800a446:	f10a 0303 	add.w	r3, sl, #3
 800a44a:	f000 bd4c 	b.w	800aee6 <_dtoa_r+0xb36>
 800a44e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a452:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a45a:	2200      	movs	r2, #0
 800a45c:	2300      	movs	r3, #0
 800a45e:	f7f6 fabb 	bl	80009d8 <__aeabi_dcmpeq>
 800a462:	4607      	mov	r7, r0
 800a464:	b158      	cbz	r0, 800a47e <_dtoa_r+0xce>
 800a466:	2301      	movs	r3, #1
 800a468:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a46e:	b113      	cbz	r3, 800a476 <_dtoa_r+0xc6>
 800a470:	4b85      	ldr	r3, [pc, #532]	@ (800a688 <_dtoa_r+0x2d8>)
 800a472:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a68c <_dtoa_r+0x2dc>
 800a47a:	f000 bd36 	b.w	800aeea <_dtoa_r+0xb3a>
 800a47e:	ab14      	add	r3, sp, #80	@ 0x50
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	ab15      	add	r3, sp, #84	@ 0x54
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	4658      	mov	r0, fp
 800a488:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a48c:	f001 fd7c 	bl	800bf88 <__d2b>
 800a490:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a494:	4681      	mov	r9, r0
 800a496:	2e00      	cmp	r6, #0
 800a498:	d077      	beq.n	800a58a <_dtoa_r+0x1da>
 800a49a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a49e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a4a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a4ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a4b0:	9712      	str	r7, [sp, #72]	@ 0x48
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	4b76      	ldr	r3, [pc, #472]	@ (800a690 <_dtoa_r+0x2e0>)
 800a4b8:	f7f5 fe6e 	bl	8000198 <__aeabi_dsub>
 800a4bc:	a368      	add	r3, pc, #416	@ (adr r3, 800a660 <_dtoa_r+0x2b0>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	f7f6 f821 	bl	8000508 <__aeabi_dmul>
 800a4c6:	a368      	add	r3, pc, #416	@ (adr r3, 800a668 <_dtoa_r+0x2b8>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f7f5 fe66 	bl	800019c <__adddf3>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	460d      	mov	r5, r1
 800a4d6:	f7f5 ffad 	bl	8000434 <__aeabi_i2d>
 800a4da:	a365      	add	r3, pc, #404	@ (adr r3, 800a670 <_dtoa_r+0x2c0>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f7f6 f812 	bl	8000508 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f7f5 fe56 	bl	800019c <__adddf3>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	f7f6 fab8 	bl	8000a68 <__aeabi_d2iz>
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4620      	mov	r0, r4
 800a500:	4629      	mov	r1, r5
 800a502:	f7f6 fa73 	bl	80009ec <__aeabi_dcmplt>
 800a506:	b140      	cbz	r0, 800a51a <_dtoa_r+0x16a>
 800a508:	4638      	mov	r0, r7
 800a50a:	f7f5 ff93 	bl	8000434 <__aeabi_i2d>
 800a50e:	4622      	mov	r2, r4
 800a510:	462b      	mov	r3, r5
 800a512:	f7f6 fa61 	bl	80009d8 <__aeabi_dcmpeq>
 800a516:	b900      	cbnz	r0, 800a51a <_dtoa_r+0x16a>
 800a518:	3f01      	subs	r7, #1
 800a51a:	2f16      	cmp	r7, #22
 800a51c:	d853      	bhi.n	800a5c6 <_dtoa_r+0x216>
 800a51e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a522:	4b5c      	ldr	r3, [pc, #368]	@ (800a694 <_dtoa_r+0x2e4>)
 800a524:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f7f6 fa5e 	bl	80009ec <__aeabi_dcmplt>
 800a530:	2800      	cmp	r0, #0
 800a532:	d04a      	beq.n	800a5ca <_dtoa_r+0x21a>
 800a534:	2300      	movs	r3, #0
 800a536:	3f01      	subs	r7, #1
 800a538:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a53a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a53c:	1b9b      	subs	r3, r3, r6
 800a53e:	1e5a      	subs	r2, r3, #1
 800a540:	bf46      	itte	mi
 800a542:	f1c3 0801 	rsbmi	r8, r3, #1
 800a546:	2300      	movmi	r3, #0
 800a548:	f04f 0800 	movpl.w	r8, #0
 800a54c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a54e:	bf48      	it	mi
 800a550:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a552:	2f00      	cmp	r7, #0
 800a554:	db3b      	blt.n	800a5ce <_dtoa_r+0x21e>
 800a556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a558:	970e      	str	r7, [sp, #56]	@ 0x38
 800a55a:	443b      	add	r3, r7
 800a55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a55e:	2300      	movs	r3, #0
 800a560:	930a      	str	r3, [sp, #40]	@ 0x28
 800a562:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a564:	2b09      	cmp	r3, #9
 800a566:	d866      	bhi.n	800a636 <_dtoa_r+0x286>
 800a568:	2b05      	cmp	r3, #5
 800a56a:	bfc4      	itt	gt
 800a56c:	3b04      	subgt	r3, #4
 800a56e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a570:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a572:	bfc8      	it	gt
 800a574:	2400      	movgt	r4, #0
 800a576:	f1a3 0302 	sub.w	r3, r3, #2
 800a57a:	bfd8      	it	le
 800a57c:	2401      	movle	r4, #1
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d864      	bhi.n	800a64c <_dtoa_r+0x29c>
 800a582:	e8df f003 	tbb	[pc, r3]
 800a586:	382b      	.short	0x382b
 800a588:	5636      	.short	0x5636
 800a58a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a58e:	441e      	add	r6, r3
 800a590:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a594:	2b20      	cmp	r3, #32
 800a596:	bfc1      	itttt	gt
 800a598:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a59c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a5a0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a5a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a5a8:	bfd6      	itet	le
 800a5aa:	f1c3 0320 	rsble	r3, r3, #32
 800a5ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800a5b2:	fa04 f003 	lslle.w	r0, r4, r3
 800a5b6:	f7f5 ff2d 	bl	8000414 <__aeabi_ui2d>
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a5c0:	3e01      	subs	r6, #1
 800a5c2:	9212      	str	r2, [sp, #72]	@ 0x48
 800a5c4:	e775      	b.n	800a4b2 <_dtoa_r+0x102>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e7b6      	b.n	800a538 <_dtoa_r+0x188>
 800a5ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a5cc:	e7b5      	b.n	800a53a <_dtoa_r+0x18a>
 800a5ce:	427b      	negs	r3, r7
 800a5d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	eba8 0807 	sub.w	r8, r8, r7
 800a5d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a5da:	e7c2      	b.n	800a562 <_dtoa_r+0x1b2>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	dc35      	bgt.n	800a652 <_dtoa_r+0x2a2>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a5ee:	9221      	str	r2, [sp, #132]	@ 0x84
 800a5f0:	e00b      	b.n	800a60a <_dtoa_r+0x25a>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e7f3      	b.n	800a5de <_dtoa_r+0x22e>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a5fc:	18fb      	adds	r3, r7, r3
 800a5fe:	9308      	str	r3, [sp, #32]
 800a600:	3301      	adds	r3, #1
 800a602:	2b01      	cmp	r3, #1
 800a604:	9307      	str	r3, [sp, #28]
 800a606:	bfb8      	it	lt
 800a608:	2301      	movlt	r3, #1
 800a60a:	2100      	movs	r1, #0
 800a60c:	2204      	movs	r2, #4
 800a60e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a612:	f102 0514 	add.w	r5, r2, #20
 800a616:	429d      	cmp	r5, r3
 800a618:	d91f      	bls.n	800a65a <_dtoa_r+0x2aa>
 800a61a:	6041      	str	r1, [r0, #4]
 800a61c:	4658      	mov	r0, fp
 800a61e:	f001 f8d9 	bl	800b7d4 <_Balloc>
 800a622:	4682      	mov	sl, r0
 800a624:	2800      	cmp	r0, #0
 800a626:	d139      	bne.n	800a69c <_dtoa_r+0x2ec>
 800a628:	4602      	mov	r2, r0
 800a62a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a62e:	4b1a      	ldr	r3, [pc, #104]	@ (800a698 <_dtoa_r+0x2e8>)
 800a630:	e6d2      	b.n	800a3d8 <_dtoa_r+0x28>
 800a632:	2301      	movs	r3, #1
 800a634:	e7e0      	b.n	800a5f8 <_dtoa_r+0x248>
 800a636:	2401      	movs	r4, #1
 800a638:	2300      	movs	r3, #0
 800a63a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a63c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a63e:	f04f 33ff 	mov.w	r3, #4294967295
 800a642:	2200      	movs	r2, #0
 800a644:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a648:	2312      	movs	r3, #18
 800a64a:	e7d0      	b.n	800a5ee <_dtoa_r+0x23e>
 800a64c:	2301      	movs	r3, #1
 800a64e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a650:	e7f5      	b.n	800a63e <_dtoa_r+0x28e>
 800a652:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a654:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a658:	e7d7      	b.n	800a60a <_dtoa_r+0x25a>
 800a65a:	3101      	adds	r1, #1
 800a65c:	0052      	lsls	r2, r2, #1
 800a65e:	e7d8      	b.n	800a612 <_dtoa_r+0x262>
 800a660:	636f4361 	.word	0x636f4361
 800a664:	3fd287a7 	.word	0x3fd287a7
 800a668:	8b60c8b3 	.word	0x8b60c8b3
 800a66c:	3fc68a28 	.word	0x3fc68a28
 800a670:	509f79fb 	.word	0x509f79fb
 800a674:	3fd34413 	.word	0x3fd34413
 800a678:	0800cd04 	.word	0x0800cd04
 800a67c:	0800cdc6 	.word	0x0800cdc6
 800a680:	7ff00000 	.word	0x7ff00000
 800a684:	0800cdc2 	.word	0x0800cdc2
 800a688:	0800cce1 	.word	0x0800cce1
 800a68c:	0800cce0 	.word	0x0800cce0
 800a690:	3ff80000 	.word	0x3ff80000
 800a694:	0800cf20 	.word	0x0800cf20
 800a698:	0800ce1e 	.word	0x0800ce1e
 800a69c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6a0:	6018      	str	r0, [r3, #0]
 800a6a2:	9b07      	ldr	r3, [sp, #28]
 800a6a4:	2b0e      	cmp	r3, #14
 800a6a6:	f200 80a4 	bhi.w	800a7f2 <_dtoa_r+0x442>
 800a6aa:	2c00      	cmp	r4, #0
 800a6ac:	f000 80a1 	beq.w	800a7f2 <_dtoa_r+0x442>
 800a6b0:	2f00      	cmp	r7, #0
 800a6b2:	dd33      	ble.n	800a71c <_dtoa_r+0x36c>
 800a6b4:	4b86      	ldr	r3, [pc, #536]	@ (800a8d0 <_dtoa_r+0x520>)
 800a6b6:	f007 020f 	and.w	r2, r7, #15
 800a6ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6be:	05f8      	lsls	r0, r7, #23
 800a6c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a6cc:	d516      	bpl.n	800a6fc <_dtoa_r+0x34c>
 800a6ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6d2:	4b80      	ldr	r3, [pc, #512]	@ (800a8d4 <_dtoa_r+0x524>)
 800a6d4:	2603      	movs	r6, #3
 800a6d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6da:	f7f6 f83f 	bl	800075c <__aeabi_ddiv>
 800a6de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6e2:	f004 040f 	and.w	r4, r4, #15
 800a6e6:	4d7b      	ldr	r5, [pc, #492]	@ (800a8d4 <_dtoa_r+0x524>)
 800a6e8:	b954      	cbnz	r4, 800a700 <_dtoa_r+0x350>
 800a6ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f2:	f7f6 f833 	bl	800075c <__aeabi_ddiv>
 800a6f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6fa:	e028      	b.n	800a74e <_dtoa_r+0x39e>
 800a6fc:	2602      	movs	r6, #2
 800a6fe:	e7f2      	b.n	800a6e6 <_dtoa_r+0x336>
 800a700:	07e1      	lsls	r1, r4, #31
 800a702:	d508      	bpl.n	800a716 <_dtoa_r+0x366>
 800a704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a708:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a70c:	f7f5 fefc 	bl	8000508 <__aeabi_dmul>
 800a710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a714:	3601      	adds	r6, #1
 800a716:	1064      	asrs	r4, r4, #1
 800a718:	3508      	adds	r5, #8
 800a71a:	e7e5      	b.n	800a6e8 <_dtoa_r+0x338>
 800a71c:	f000 80d2 	beq.w	800a8c4 <_dtoa_r+0x514>
 800a720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a724:	427c      	negs	r4, r7
 800a726:	4b6a      	ldr	r3, [pc, #424]	@ (800a8d0 <_dtoa_r+0x520>)
 800a728:	f004 020f 	and.w	r2, r4, #15
 800a72c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	f7f5 fee8 	bl	8000508 <__aeabi_dmul>
 800a738:	2602      	movs	r6, #2
 800a73a:	2300      	movs	r3, #0
 800a73c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a740:	4d64      	ldr	r5, [pc, #400]	@ (800a8d4 <_dtoa_r+0x524>)
 800a742:	1124      	asrs	r4, r4, #4
 800a744:	2c00      	cmp	r4, #0
 800a746:	f040 80b2 	bne.w	800a8ae <_dtoa_r+0x4fe>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1d3      	bne.n	800a6f6 <_dtoa_r+0x346>
 800a74e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a752:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 80b7 	beq.w	800a8c8 <_dtoa_r+0x518>
 800a75a:	2200      	movs	r2, #0
 800a75c:	4620      	mov	r0, r4
 800a75e:	4629      	mov	r1, r5
 800a760:	4b5d      	ldr	r3, [pc, #372]	@ (800a8d8 <_dtoa_r+0x528>)
 800a762:	f7f6 f943 	bl	80009ec <__aeabi_dcmplt>
 800a766:	2800      	cmp	r0, #0
 800a768:	f000 80ae 	beq.w	800a8c8 <_dtoa_r+0x518>
 800a76c:	9b07      	ldr	r3, [sp, #28]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f000 80aa 	beq.w	800a8c8 <_dtoa_r+0x518>
 800a774:	9b08      	ldr	r3, [sp, #32]
 800a776:	2b00      	cmp	r3, #0
 800a778:	dd37      	ble.n	800a7ea <_dtoa_r+0x43a>
 800a77a:	1e7b      	subs	r3, r7, #1
 800a77c:	4620      	mov	r0, r4
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	2200      	movs	r2, #0
 800a782:	4629      	mov	r1, r5
 800a784:	4b55      	ldr	r3, [pc, #340]	@ (800a8dc <_dtoa_r+0x52c>)
 800a786:	f7f5 febf 	bl	8000508 <__aeabi_dmul>
 800a78a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a78e:	9c08      	ldr	r4, [sp, #32]
 800a790:	3601      	adds	r6, #1
 800a792:	4630      	mov	r0, r6
 800a794:	f7f5 fe4e 	bl	8000434 <__aeabi_i2d>
 800a798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a79c:	f7f5 feb4 	bl	8000508 <__aeabi_dmul>
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	4b4f      	ldr	r3, [pc, #316]	@ (800a8e0 <_dtoa_r+0x530>)
 800a7a4:	f7f5 fcfa 	bl	800019c <__adddf3>
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a7ae:	2c00      	cmp	r4, #0
 800a7b0:	f040 809a 	bne.w	800a8e8 <_dtoa_r+0x538>
 800a7b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	4b4a      	ldr	r3, [pc, #296]	@ (800a8e4 <_dtoa_r+0x534>)
 800a7bc:	f7f5 fcec 	bl	8000198 <__aeabi_dsub>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7c8:	462a      	mov	r2, r5
 800a7ca:	4633      	mov	r3, r6
 800a7cc:	f7f6 f92c 	bl	8000a28 <__aeabi_dcmpgt>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	f040 828e 	bne.w	800acf2 <_dtoa_r+0x942>
 800a7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7da:	462a      	mov	r2, r5
 800a7dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a7e0:	f7f6 f904 	bl	80009ec <__aeabi_dcmplt>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f040 8127 	bne.w	800aa38 <_dtoa_r+0x688>
 800a7ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a7ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a7f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f2c0 8163 	blt.w	800aac0 <_dtoa_r+0x710>
 800a7fa:	2f0e      	cmp	r7, #14
 800a7fc:	f300 8160 	bgt.w	800aac0 <_dtoa_r+0x710>
 800a800:	4b33      	ldr	r3, [pc, #204]	@ (800a8d0 <_dtoa_r+0x520>)
 800a802:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a806:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a80a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a80e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a810:	2b00      	cmp	r3, #0
 800a812:	da03      	bge.n	800a81c <_dtoa_r+0x46c>
 800a814:	9b07      	ldr	r3, [sp, #28]
 800a816:	2b00      	cmp	r3, #0
 800a818:	f340 8100 	ble.w	800aa1c <_dtoa_r+0x66c>
 800a81c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a820:	4656      	mov	r6, sl
 800a822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a826:	4620      	mov	r0, r4
 800a828:	4629      	mov	r1, r5
 800a82a:	f7f5 ff97 	bl	800075c <__aeabi_ddiv>
 800a82e:	f7f6 f91b 	bl	8000a68 <__aeabi_d2iz>
 800a832:	4680      	mov	r8, r0
 800a834:	f7f5 fdfe 	bl	8000434 <__aeabi_i2d>
 800a838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a83c:	f7f5 fe64 	bl	8000508 <__aeabi_dmul>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4620      	mov	r0, r4
 800a846:	4629      	mov	r1, r5
 800a848:	f7f5 fca6 	bl	8000198 <__aeabi_dsub>
 800a84c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a850:	9d07      	ldr	r5, [sp, #28]
 800a852:	f806 4b01 	strb.w	r4, [r6], #1
 800a856:	eba6 040a 	sub.w	r4, r6, sl
 800a85a:	42a5      	cmp	r5, r4
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	f040 8116 	bne.w	800aa90 <_dtoa_r+0x6e0>
 800a864:	f7f5 fc9a 	bl	800019c <__adddf3>
 800a868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a86c:	4604      	mov	r4, r0
 800a86e:	460d      	mov	r5, r1
 800a870:	f7f6 f8da 	bl	8000a28 <__aeabi_dcmpgt>
 800a874:	2800      	cmp	r0, #0
 800a876:	f040 80f8 	bne.w	800aa6a <_dtoa_r+0x6ba>
 800a87a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a87e:	4620      	mov	r0, r4
 800a880:	4629      	mov	r1, r5
 800a882:	f7f6 f8a9 	bl	80009d8 <__aeabi_dcmpeq>
 800a886:	b118      	cbz	r0, 800a890 <_dtoa_r+0x4e0>
 800a888:	f018 0f01 	tst.w	r8, #1
 800a88c:	f040 80ed 	bne.w	800aa6a <_dtoa_r+0x6ba>
 800a890:	4649      	mov	r1, r9
 800a892:	4658      	mov	r0, fp
 800a894:	f000 ffde 	bl	800b854 <_Bfree>
 800a898:	2300      	movs	r3, #0
 800a89a:	7033      	strb	r3, [r6, #0]
 800a89c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a89e:	3701      	adds	r7, #1
 800a8a0:	601f      	str	r7, [r3, #0]
 800a8a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 8320 	beq.w	800aeea <_dtoa_r+0xb3a>
 800a8aa:	601e      	str	r6, [r3, #0]
 800a8ac:	e31d      	b.n	800aeea <_dtoa_r+0xb3a>
 800a8ae:	07e2      	lsls	r2, r4, #31
 800a8b0:	d505      	bpl.n	800a8be <_dtoa_r+0x50e>
 800a8b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8b6:	f7f5 fe27 	bl	8000508 <__aeabi_dmul>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	3601      	adds	r6, #1
 800a8be:	1064      	asrs	r4, r4, #1
 800a8c0:	3508      	adds	r5, #8
 800a8c2:	e73f      	b.n	800a744 <_dtoa_r+0x394>
 800a8c4:	2602      	movs	r6, #2
 800a8c6:	e742      	b.n	800a74e <_dtoa_r+0x39e>
 800a8c8:	9c07      	ldr	r4, [sp, #28]
 800a8ca:	9704      	str	r7, [sp, #16]
 800a8cc:	e761      	b.n	800a792 <_dtoa_r+0x3e2>
 800a8ce:	bf00      	nop
 800a8d0:	0800cf20 	.word	0x0800cf20
 800a8d4:	0800cef8 	.word	0x0800cef8
 800a8d8:	3ff00000 	.word	0x3ff00000
 800a8dc:	40240000 	.word	0x40240000
 800a8e0:	401c0000 	.word	0x401c0000
 800a8e4:	40140000 	.word	0x40140000
 800a8e8:	4b70      	ldr	r3, [pc, #448]	@ (800aaac <_dtoa_r+0x6fc>)
 800a8ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8f4:	4454      	add	r4, sl
 800a8f6:	2900      	cmp	r1, #0
 800a8f8:	d045      	beq.n	800a986 <_dtoa_r+0x5d6>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	496c      	ldr	r1, [pc, #432]	@ (800aab0 <_dtoa_r+0x700>)
 800a8fe:	f7f5 ff2d 	bl	800075c <__aeabi_ddiv>
 800a902:	4633      	mov	r3, r6
 800a904:	462a      	mov	r2, r5
 800a906:	f7f5 fc47 	bl	8000198 <__aeabi_dsub>
 800a90a:	4656      	mov	r6, sl
 800a90c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a914:	f7f6 f8a8 	bl	8000a68 <__aeabi_d2iz>
 800a918:	4605      	mov	r5, r0
 800a91a:	f7f5 fd8b 	bl	8000434 <__aeabi_i2d>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a926:	f7f5 fc37 	bl	8000198 <__aeabi_dsub>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	3530      	adds	r5, #48	@ 0x30
 800a930:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a934:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a938:	f806 5b01 	strb.w	r5, [r6], #1
 800a93c:	f7f6 f856 	bl	80009ec <__aeabi_dcmplt>
 800a940:	2800      	cmp	r0, #0
 800a942:	d163      	bne.n	800aa0c <_dtoa_r+0x65c>
 800a944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a948:	2000      	movs	r0, #0
 800a94a:	495a      	ldr	r1, [pc, #360]	@ (800aab4 <_dtoa_r+0x704>)
 800a94c:	f7f5 fc24 	bl	8000198 <__aeabi_dsub>
 800a950:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a954:	f7f6 f84a 	bl	80009ec <__aeabi_dcmplt>
 800a958:	2800      	cmp	r0, #0
 800a95a:	f040 8087 	bne.w	800aa6c <_dtoa_r+0x6bc>
 800a95e:	42a6      	cmp	r6, r4
 800a960:	f43f af43 	beq.w	800a7ea <_dtoa_r+0x43a>
 800a964:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a968:	2200      	movs	r2, #0
 800a96a:	4b53      	ldr	r3, [pc, #332]	@ (800aab8 <_dtoa_r+0x708>)
 800a96c:	f7f5 fdcc 	bl	8000508 <__aeabi_dmul>
 800a970:	2200      	movs	r2, #0
 800a972:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a97a:	4b4f      	ldr	r3, [pc, #316]	@ (800aab8 <_dtoa_r+0x708>)
 800a97c:	f7f5 fdc4 	bl	8000508 <__aeabi_dmul>
 800a980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a984:	e7c4      	b.n	800a910 <_dtoa_r+0x560>
 800a986:	4631      	mov	r1, r6
 800a988:	4628      	mov	r0, r5
 800a98a:	f7f5 fdbd 	bl	8000508 <__aeabi_dmul>
 800a98e:	4656      	mov	r6, sl
 800a990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a994:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a99a:	f7f6 f865 	bl	8000a68 <__aeabi_d2iz>
 800a99e:	4605      	mov	r5, r0
 800a9a0:	f7f5 fd48 	bl	8000434 <__aeabi_i2d>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ac:	f7f5 fbf4 	bl	8000198 <__aeabi_dsub>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	3530      	adds	r5, #48	@ 0x30
 800a9b6:	f806 5b01 	strb.w	r5, [r6], #1
 800a9ba:	42a6      	cmp	r6, r4
 800a9bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9c0:	f04f 0200 	mov.w	r2, #0
 800a9c4:	d124      	bne.n	800aa10 <_dtoa_r+0x660>
 800a9c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a9ca:	4b39      	ldr	r3, [pc, #228]	@ (800aab0 <_dtoa_r+0x700>)
 800a9cc:	f7f5 fbe6 	bl	800019c <__adddf3>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9d8:	f7f6 f826 	bl	8000a28 <__aeabi_dcmpgt>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d145      	bne.n	800aa6c <_dtoa_r+0x6bc>
 800a9e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	4932      	ldr	r1, [pc, #200]	@ (800aab0 <_dtoa_r+0x700>)
 800a9e8:	f7f5 fbd6 	bl	8000198 <__aeabi_dsub>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9f4:	f7f5 fffa 	bl	80009ec <__aeabi_dcmplt>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	f43f aef6 	beq.w	800a7ea <_dtoa_r+0x43a>
 800a9fe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aa00:	1e73      	subs	r3, r6, #1
 800aa02:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa08:	2b30      	cmp	r3, #48	@ 0x30
 800aa0a:	d0f8      	beq.n	800a9fe <_dtoa_r+0x64e>
 800aa0c:	9f04      	ldr	r7, [sp, #16]
 800aa0e:	e73f      	b.n	800a890 <_dtoa_r+0x4e0>
 800aa10:	4b29      	ldr	r3, [pc, #164]	@ (800aab8 <_dtoa_r+0x708>)
 800aa12:	f7f5 fd79 	bl	8000508 <__aeabi_dmul>
 800aa16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa1a:	e7bc      	b.n	800a996 <_dtoa_r+0x5e6>
 800aa1c:	d10c      	bne.n	800aa38 <_dtoa_r+0x688>
 800aa1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa22:	2200      	movs	r2, #0
 800aa24:	4b25      	ldr	r3, [pc, #148]	@ (800aabc <_dtoa_r+0x70c>)
 800aa26:	f7f5 fd6f 	bl	8000508 <__aeabi_dmul>
 800aa2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa2e:	f7f5 fff1 	bl	8000a14 <__aeabi_dcmpge>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f000 815b 	beq.w	800acee <_dtoa_r+0x93e>
 800aa38:	2400      	movs	r4, #0
 800aa3a:	4625      	mov	r5, r4
 800aa3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa3e:	4656      	mov	r6, sl
 800aa40:	43db      	mvns	r3, r3
 800aa42:	9304      	str	r3, [sp, #16]
 800aa44:	2700      	movs	r7, #0
 800aa46:	4621      	mov	r1, r4
 800aa48:	4658      	mov	r0, fp
 800aa4a:	f000 ff03 	bl	800b854 <_Bfree>
 800aa4e:	2d00      	cmp	r5, #0
 800aa50:	d0dc      	beq.n	800aa0c <_dtoa_r+0x65c>
 800aa52:	b12f      	cbz	r7, 800aa60 <_dtoa_r+0x6b0>
 800aa54:	42af      	cmp	r7, r5
 800aa56:	d003      	beq.n	800aa60 <_dtoa_r+0x6b0>
 800aa58:	4639      	mov	r1, r7
 800aa5a:	4658      	mov	r0, fp
 800aa5c:	f000 fefa 	bl	800b854 <_Bfree>
 800aa60:	4629      	mov	r1, r5
 800aa62:	4658      	mov	r0, fp
 800aa64:	f000 fef6 	bl	800b854 <_Bfree>
 800aa68:	e7d0      	b.n	800aa0c <_dtoa_r+0x65c>
 800aa6a:	9704      	str	r7, [sp, #16]
 800aa6c:	4633      	mov	r3, r6
 800aa6e:	461e      	mov	r6, r3
 800aa70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa74:	2a39      	cmp	r2, #57	@ 0x39
 800aa76:	d107      	bne.n	800aa88 <_dtoa_r+0x6d8>
 800aa78:	459a      	cmp	sl, r3
 800aa7a:	d1f8      	bne.n	800aa6e <_dtoa_r+0x6be>
 800aa7c:	9a04      	ldr	r2, [sp, #16]
 800aa7e:	3201      	adds	r2, #1
 800aa80:	9204      	str	r2, [sp, #16]
 800aa82:	2230      	movs	r2, #48	@ 0x30
 800aa84:	f88a 2000 	strb.w	r2, [sl]
 800aa88:	781a      	ldrb	r2, [r3, #0]
 800aa8a:	3201      	adds	r2, #1
 800aa8c:	701a      	strb	r2, [r3, #0]
 800aa8e:	e7bd      	b.n	800aa0c <_dtoa_r+0x65c>
 800aa90:	2200      	movs	r2, #0
 800aa92:	4b09      	ldr	r3, [pc, #36]	@ (800aab8 <_dtoa_r+0x708>)
 800aa94:	f7f5 fd38 	bl	8000508 <__aeabi_dmul>
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	f7f5 ff9a 	bl	80009d8 <__aeabi_dcmpeq>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f43f aebc 	beq.w	800a822 <_dtoa_r+0x472>
 800aaaa:	e6f1      	b.n	800a890 <_dtoa_r+0x4e0>
 800aaac:	0800cf20 	.word	0x0800cf20
 800aab0:	3fe00000 	.word	0x3fe00000
 800aab4:	3ff00000 	.word	0x3ff00000
 800aab8:	40240000 	.word	0x40240000
 800aabc:	40140000 	.word	0x40140000
 800aac0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aac2:	2a00      	cmp	r2, #0
 800aac4:	f000 80db 	beq.w	800ac7e <_dtoa_r+0x8ce>
 800aac8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aaca:	2a01      	cmp	r2, #1
 800aacc:	f300 80bf 	bgt.w	800ac4e <_dtoa_r+0x89e>
 800aad0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aad2:	2a00      	cmp	r2, #0
 800aad4:	f000 80b7 	beq.w	800ac46 <_dtoa_r+0x896>
 800aad8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aadc:	4646      	mov	r6, r8
 800aade:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aae0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aae2:	2101      	movs	r1, #1
 800aae4:	441a      	add	r2, r3
 800aae6:	4658      	mov	r0, fp
 800aae8:	4498      	add	r8, r3
 800aaea:	9209      	str	r2, [sp, #36]	@ 0x24
 800aaec:	f000 ffb0 	bl	800ba50 <__i2b>
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	b15e      	cbz	r6, 800ab0c <_dtoa_r+0x75c>
 800aaf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	dd08      	ble.n	800ab0c <_dtoa_r+0x75c>
 800aafa:	42b3      	cmp	r3, r6
 800aafc:	bfa8      	it	ge
 800aafe:	4633      	movge	r3, r6
 800ab00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab02:	eba8 0803 	sub.w	r8, r8, r3
 800ab06:	1af6      	subs	r6, r6, r3
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab0e:	b1f3      	cbz	r3, 800ab4e <_dtoa_r+0x79e>
 800ab10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 80b7 	beq.w	800ac86 <_dtoa_r+0x8d6>
 800ab18:	b18c      	cbz	r4, 800ab3e <_dtoa_r+0x78e>
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	4658      	mov	r0, fp
 800ab20:	f001 f854 	bl	800bbcc <__pow5mult>
 800ab24:	464a      	mov	r2, r9
 800ab26:	4601      	mov	r1, r0
 800ab28:	4605      	mov	r5, r0
 800ab2a:	4658      	mov	r0, fp
 800ab2c:	f000 ffa6 	bl	800ba7c <__multiply>
 800ab30:	4649      	mov	r1, r9
 800ab32:	9004      	str	r0, [sp, #16]
 800ab34:	4658      	mov	r0, fp
 800ab36:	f000 fe8d 	bl	800b854 <_Bfree>
 800ab3a:	9b04      	ldr	r3, [sp, #16]
 800ab3c:	4699      	mov	r9, r3
 800ab3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab40:	1b1a      	subs	r2, r3, r4
 800ab42:	d004      	beq.n	800ab4e <_dtoa_r+0x79e>
 800ab44:	4649      	mov	r1, r9
 800ab46:	4658      	mov	r0, fp
 800ab48:	f001 f840 	bl	800bbcc <__pow5mult>
 800ab4c:	4681      	mov	r9, r0
 800ab4e:	2101      	movs	r1, #1
 800ab50:	4658      	mov	r0, fp
 800ab52:	f000 ff7d 	bl	800ba50 <__i2b>
 800ab56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab58:	4604      	mov	r4, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 81c9 	beq.w	800aef2 <_dtoa_r+0xb42>
 800ab60:	461a      	mov	r2, r3
 800ab62:	4601      	mov	r1, r0
 800ab64:	4658      	mov	r0, fp
 800ab66:	f001 f831 	bl	800bbcc <__pow5mult>
 800ab6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	f300 808f 	bgt.w	800ac92 <_dtoa_r+0x8e2>
 800ab74:	9b02      	ldr	r3, [sp, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f040 8087 	bne.w	800ac8a <_dtoa_r+0x8da>
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f040 8083 	bne.w	800ac8e <_dtoa_r+0x8de>
 800ab88:	9b03      	ldr	r3, [sp, #12]
 800ab8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab8e:	0d1b      	lsrs	r3, r3, #20
 800ab90:	051b      	lsls	r3, r3, #20
 800ab92:	b12b      	cbz	r3, 800aba0 <_dtoa_r+0x7f0>
 800ab94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab96:	f108 0801 	add.w	r8, r8, #1
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab9e:	2301      	movs	r3, #1
 800aba0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 81aa 	beq.w	800aefe <_dtoa_r+0xb4e>
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abb0:	6918      	ldr	r0, [r3, #16]
 800abb2:	f000 ff01 	bl	800b9b8 <__hi0bits>
 800abb6:	f1c0 0020 	rsb	r0, r0, #32
 800abba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abbc:	4418      	add	r0, r3
 800abbe:	f010 001f 	ands.w	r0, r0, #31
 800abc2:	d071      	beq.n	800aca8 <_dtoa_r+0x8f8>
 800abc4:	f1c0 0320 	rsb	r3, r0, #32
 800abc8:	2b04      	cmp	r3, #4
 800abca:	dd65      	ble.n	800ac98 <_dtoa_r+0x8e8>
 800abcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abce:	f1c0 001c 	rsb	r0, r0, #28
 800abd2:	4403      	add	r3, r0
 800abd4:	4480      	add	r8, r0
 800abd6:	4406      	add	r6, r0
 800abd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800abda:	f1b8 0f00 	cmp.w	r8, #0
 800abde:	dd05      	ble.n	800abec <_dtoa_r+0x83c>
 800abe0:	4649      	mov	r1, r9
 800abe2:	4642      	mov	r2, r8
 800abe4:	4658      	mov	r0, fp
 800abe6:	f001 f84b 	bl	800bc80 <__lshift>
 800abea:	4681      	mov	r9, r0
 800abec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	dd05      	ble.n	800abfe <_dtoa_r+0x84e>
 800abf2:	4621      	mov	r1, r4
 800abf4:	461a      	mov	r2, r3
 800abf6:	4658      	mov	r0, fp
 800abf8:	f001 f842 	bl	800bc80 <__lshift>
 800abfc:	4604      	mov	r4, r0
 800abfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d053      	beq.n	800acac <_dtoa_r+0x8fc>
 800ac04:	4621      	mov	r1, r4
 800ac06:	4648      	mov	r0, r9
 800ac08:	f001 f8a6 	bl	800bd58 <__mcmp>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	da4d      	bge.n	800acac <_dtoa_r+0x8fc>
 800ac10:	1e7b      	subs	r3, r7, #1
 800ac12:	4649      	mov	r1, r9
 800ac14:	9304      	str	r3, [sp, #16]
 800ac16:	220a      	movs	r2, #10
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4658      	mov	r0, fp
 800ac1c:	f000 fe3c 	bl	800b898 <__multadd>
 800ac20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac22:	4681      	mov	r9, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 816c 	beq.w	800af02 <_dtoa_r+0xb52>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	220a      	movs	r2, #10
 800ac30:	4658      	mov	r0, fp
 800ac32:	f000 fe31 	bl	800b898 <__multadd>
 800ac36:	9b08      	ldr	r3, [sp, #32]
 800ac38:	4605      	mov	r5, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dc61      	bgt.n	800ad02 <_dtoa_r+0x952>
 800ac3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	dc3b      	bgt.n	800acbc <_dtoa_r+0x90c>
 800ac44:	e05d      	b.n	800ad02 <_dtoa_r+0x952>
 800ac46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac48:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ac4c:	e746      	b.n	800aadc <_dtoa_r+0x72c>
 800ac4e:	9b07      	ldr	r3, [sp, #28]
 800ac50:	1e5c      	subs	r4, r3, #1
 800ac52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	bfbf      	itttt	lt
 800ac58:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ac5a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800ac5c:	1ae3      	sublt	r3, r4, r3
 800ac5e:	18d2      	addlt	r2, r2, r3
 800ac60:	bfa8      	it	ge
 800ac62:	1b1c      	subge	r4, r3, r4
 800ac64:	9b07      	ldr	r3, [sp, #28]
 800ac66:	bfbe      	ittt	lt
 800ac68:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ac6a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800ac6c:	2400      	movlt	r4, #0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	bfb5      	itete	lt
 800ac72:	eba8 0603 	sublt.w	r6, r8, r3
 800ac76:	4646      	movge	r6, r8
 800ac78:	2300      	movlt	r3, #0
 800ac7a:	9b07      	ldrge	r3, [sp, #28]
 800ac7c:	e730      	b.n	800aae0 <_dtoa_r+0x730>
 800ac7e:	4646      	mov	r6, r8
 800ac80:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ac82:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ac84:	e735      	b.n	800aaf2 <_dtoa_r+0x742>
 800ac86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac88:	e75c      	b.n	800ab44 <_dtoa_r+0x794>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e788      	b.n	800aba0 <_dtoa_r+0x7f0>
 800ac8e:	9b02      	ldr	r3, [sp, #8]
 800ac90:	e786      	b.n	800aba0 <_dtoa_r+0x7f0>
 800ac92:	2300      	movs	r3, #0
 800ac94:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac96:	e788      	b.n	800abaa <_dtoa_r+0x7fa>
 800ac98:	d09f      	beq.n	800abda <_dtoa_r+0x82a>
 800ac9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac9c:	331c      	adds	r3, #28
 800ac9e:	441a      	add	r2, r3
 800aca0:	4498      	add	r8, r3
 800aca2:	441e      	add	r6, r3
 800aca4:	9209      	str	r2, [sp, #36]	@ 0x24
 800aca6:	e798      	b.n	800abda <_dtoa_r+0x82a>
 800aca8:	4603      	mov	r3, r0
 800acaa:	e7f6      	b.n	800ac9a <_dtoa_r+0x8ea>
 800acac:	9b07      	ldr	r3, [sp, #28]
 800acae:	9704      	str	r7, [sp, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	dc20      	bgt.n	800acf6 <_dtoa_r+0x946>
 800acb4:	9308      	str	r3, [sp, #32]
 800acb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800acb8:	2b02      	cmp	r3, #2
 800acba:	dd1e      	ble.n	800acfa <_dtoa_r+0x94a>
 800acbc:	9b08      	ldr	r3, [sp, #32]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f47f aebc 	bne.w	800aa3c <_dtoa_r+0x68c>
 800acc4:	4621      	mov	r1, r4
 800acc6:	2205      	movs	r2, #5
 800acc8:	4658      	mov	r0, fp
 800acca:	f000 fde5 	bl	800b898 <__multadd>
 800acce:	4601      	mov	r1, r0
 800acd0:	4604      	mov	r4, r0
 800acd2:	4648      	mov	r0, r9
 800acd4:	f001 f840 	bl	800bd58 <__mcmp>
 800acd8:	2800      	cmp	r0, #0
 800acda:	f77f aeaf 	ble.w	800aa3c <_dtoa_r+0x68c>
 800acde:	2331      	movs	r3, #49	@ 0x31
 800ace0:	4656      	mov	r6, sl
 800ace2:	f806 3b01 	strb.w	r3, [r6], #1
 800ace6:	9b04      	ldr	r3, [sp, #16]
 800ace8:	3301      	adds	r3, #1
 800acea:	9304      	str	r3, [sp, #16]
 800acec:	e6aa      	b.n	800aa44 <_dtoa_r+0x694>
 800acee:	9c07      	ldr	r4, [sp, #28]
 800acf0:	9704      	str	r7, [sp, #16]
 800acf2:	4625      	mov	r5, r4
 800acf4:	e7f3      	b.n	800acde <_dtoa_r+0x92e>
 800acf6:	9b07      	ldr	r3, [sp, #28]
 800acf8:	9308      	str	r3, [sp, #32]
 800acfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 8104 	beq.w	800af0a <_dtoa_r+0xb5a>
 800ad02:	2e00      	cmp	r6, #0
 800ad04:	dd05      	ble.n	800ad12 <_dtoa_r+0x962>
 800ad06:	4629      	mov	r1, r5
 800ad08:	4632      	mov	r2, r6
 800ad0a:	4658      	mov	r0, fp
 800ad0c:	f000 ffb8 	bl	800bc80 <__lshift>
 800ad10:	4605      	mov	r5, r0
 800ad12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d05a      	beq.n	800adce <_dtoa_r+0xa1e>
 800ad18:	4658      	mov	r0, fp
 800ad1a:	6869      	ldr	r1, [r5, #4]
 800ad1c:	f000 fd5a 	bl	800b7d4 <_Balloc>
 800ad20:	4606      	mov	r6, r0
 800ad22:	b928      	cbnz	r0, 800ad30 <_dtoa_r+0x980>
 800ad24:	4602      	mov	r2, r0
 800ad26:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ad2a:	4b83      	ldr	r3, [pc, #524]	@ (800af38 <_dtoa_r+0xb88>)
 800ad2c:	f7ff bb54 	b.w	800a3d8 <_dtoa_r+0x28>
 800ad30:	692a      	ldr	r2, [r5, #16]
 800ad32:	f105 010c 	add.w	r1, r5, #12
 800ad36:	3202      	adds	r2, #2
 800ad38:	0092      	lsls	r2, r2, #2
 800ad3a:	300c      	adds	r0, #12
 800ad3c:	f7ff fa7d 	bl	800a23a <memcpy>
 800ad40:	2201      	movs	r2, #1
 800ad42:	4631      	mov	r1, r6
 800ad44:	4658      	mov	r0, fp
 800ad46:	f000 ff9b 	bl	800bc80 <__lshift>
 800ad4a:	462f      	mov	r7, r5
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	f10a 0301 	add.w	r3, sl, #1
 800ad52:	9307      	str	r3, [sp, #28]
 800ad54:	9b08      	ldr	r3, [sp, #32]
 800ad56:	4453      	add	r3, sl
 800ad58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad5a:	9b02      	ldr	r3, [sp, #8]
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad62:	9b07      	ldr	r3, [sp, #28]
 800ad64:	4621      	mov	r1, r4
 800ad66:	3b01      	subs	r3, #1
 800ad68:	4648      	mov	r0, r9
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	f7ff fa98 	bl	800a2a0 <quorem>
 800ad70:	4639      	mov	r1, r7
 800ad72:	9008      	str	r0, [sp, #32]
 800ad74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad78:	4648      	mov	r0, r9
 800ad7a:	f000 ffed 	bl	800bd58 <__mcmp>
 800ad7e:	462a      	mov	r2, r5
 800ad80:	9009      	str	r0, [sp, #36]	@ 0x24
 800ad82:	4621      	mov	r1, r4
 800ad84:	4658      	mov	r0, fp
 800ad86:	f001 f803 	bl	800bd90 <__mdiff>
 800ad8a:	68c2      	ldr	r2, [r0, #12]
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	bb02      	cbnz	r2, 800add2 <_dtoa_r+0xa22>
 800ad90:	4601      	mov	r1, r0
 800ad92:	4648      	mov	r0, r9
 800ad94:	f000 ffe0 	bl	800bd58 <__mcmp>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4658      	mov	r0, fp
 800ad9e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ada0:	f000 fd58 	bl	800b854 <_Bfree>
 800ada4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ada6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ada8:	9e07      	ldr	r6, [sp, #28]
 800adaa:	ea43 0102 	orr.w	r1, r3, r2
 800adae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adb0:	4319      	orrs	r1, r3
 800adb2:	d110      	bne.n	800add6 <_dtoa_r+0xa26>
 800adb4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800adb8:	d029      	beq.n	800ae0e <_dtoa_r+0xa5e>
 800adba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd02      	ble.n	800adc6 <_dtoa_r+0xa16>
 800adc0:	9b08      	ldr	r3, [sp, #32]
 800adc2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800adc6:	9b02      	ldr	r3, [sp, #8]
 800adc8:	f883 8000 	strb.w	r8, [r3]
 800adcc:	e63b      	b.n	800aa46 <_dtoa_r+0x696>
 800adce:	4628      	mov	r0, r5
 800add0:	e7bb      	b.n	800ad4a <_dtoa_r+0x99a>
 800add2:	2201      	movs	r2, #1
 800add4:	e7e1      	b.n	800ad9a <_dtoa_r+0x9ea>
 800add6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add8:	2b00      	cmp	r3, #0
 800adda:	db04      	blt.n	800ade6 <_dtoa_r+0xa36>
 800addc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800adde:	430b      	orrs	r3, r1
 800ade0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ade2:	430b      	orrs	r3, r1
 800ade4:	d120      	bne.n	800ae28 <_dtoa_r+0xa78>
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	dded      	ble.n	800adc6 <_dtoa_r+0xa16>
 800adea:	4649      	mov	r1, r9
 800adec:	2201      	movs	r2, #1
 800adee:	4658      	mov	r0, fp
 800adf0:	f000 ff46 	bl	800bc80 <__lshift>
 800adf4:	4621      	mov	r1, r4
 800adf6:	4681      	mov	r9, r0
 800adf8:	f000 ffae 	bl	800bd58 <__mcmp>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	dc03      	bgt.n	800ae08 <_dtoa_r+0xa58>
 800ae00:	d1e1      	bne.n	800adc6 <_dtoa_r+0xa16>
 800ae02:	f018 0f01 	tst.w	r8, #1
 800ae06:	d0de      	beq.n	800adc6 <_dtoa_r+0xa16>
 800ae08:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae0c:	d1d8      	bne.n	800adc0 <_dtoa_r+0xa10>
 800ae0e:	2339      	movs	r3, #57	@ 0x39
 800ae10:	9a02      	ldr	r2, [sp, #8]
 800ae12:	7013      	strb	r3, [r2, #0]
 800ae14:	4633      	mov	r3, r6
 800ae16:	461e      	mov	r6, r3
 800ae18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	2a39      	cmp	r2, #57	@ 0x39
 800ae20:	d052      	beq.n	800aec8 <_dtoa_r+0xb18>
 800ae22:	3201      	adds	r2, #1
 800ae24:	701a      	strb	r2, [r3, #0]
 800ae26:	e60e      	b.n	800aa46 <_dtoa_r+0x696>
 800ae28:	2a00      	cmp	r2, #0
 800ae2a:	dd07      	ble.n	800ae3c <_dtoa_r+0xa8c>
 800ae2c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae30:	d0ed      	beq.n	800ae0e <_dtoa_r+0xa5e>
 800ae32:	9a02      	ldr	r2, [sp, #8]
 800ae34:	f108 0301 	add.w	r3, r8, #1
 800ae38:	7013      	strb	r3, [r2, #0]
 800ae3a:	e604      	b.n	800aa46 <_dtoa_r+0x696>
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	9a07      	ldr	r2, [sp, #28]
 800ae40:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ae44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d028      	beq.n	800ae9c <_dtoa_r+0xaec>
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	220a      	movs	r2, #10
 800ae50:	4658      	mov	r0, fp
 800ae52:	f000 fd21 	bl	800b898 <__multadd>
 800ae56:	42af      	cmp	r7, r5
 800ae58:	4681      	mov	r9, r0
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	f04f 020a 	mov.w	r2, #10
 800ae62:	4639      	mov	r1, r7
 800ae64:	4658      	mov	r0, fp
 800ae66:	d107      	bne.n	800ae78 <_dtoa_r+0xac8>
 800ae68:	f000 fd16 	bl	800b898 <__multadd>
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	4605      	mov	r5, r0
 800ae70:	9b07      	ldr	r3, [sp, #28]
 800ae72:	3301      	adds	r3, #1
 800ae74:	9307      	str	r3, [sp, #28]
 800ae76:	e774      	b.n	800ad62 <_dtoa_r+0x9b2>
 800ae78:	f000 fd0e 	bl	800b898 <__multadd>
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	4607      	mov	r7, r0
 800ae80:	2300      	movs	r3, #0
 800ae82:	220a      	movs	r2, #10
 800ae84:	4658      	mov	r0, fp
 800ae86:	f000 fd07 	bl	800b898 <__multadd>
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	e7f0      	b.n	800ae70 <_dtoa_r+0xac0>
 800ae8e:	9b08      	ldr	r3, [sp, #32]
 800ae90:	2700      	movs	r7, #0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bfcc      	ite	gt
 800ae96:	461e      	movgt	r6, r3
 800ae98:	2601      	movle	r6, #1
 800ae9a:	4456      	add	r6, sl
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	2201      	movs	r2, #1
 800aea0:	4658      	mov	r0, fp
 800aea2:	f000 feed 	bl	800bc80 <__lshift>
 800aea6:	4621      	mov	r1, r4
 800aea8:	4681      	mov	r9, r0
 800aeaa:	f000 ff55 	bl	800bd58 <__mcmp>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	dcb0      	bgt.n	800ae14 <_dtoa_r+0xa64>
 800aeb2:	d102      	bne.n	800aeba <_dtoa_r+0xb0a>
 800aeb4:	f018 0f01 	tst.w	r8, #1
 800aeb8:	d1ac      	bne.n	800ae14 <_dtoa_r+0xa64>
 800aeba:	4633      	mov	r3, r6
 800aebc:	461e      	mov	r6, r3
 800aebe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aec2:	2a30      	cmp	r2, #48	@ 0x30
 800aec4:	d0fa      	beq.n	800aebc <_dtoa_r+0xb0c>
 800aec6:	e5be      	b.n	800aa46 <_dtoa_r+0x696>
 800aec8:	459a      	cmp	sl, r3
 800aeca:	d1a4      	bne.n	800ae16 <_dtoa_r+0xa66>
 800aecc:	9b04      	ldr	r3, [sp, #16]
 800aece:	3301      	adds	r3, #1
 800aed0:	9304      	str	r3, [sp, #16]
 800aed2:	2331      	movs	r3, #49	@ 0x31
 800aed4:	f88a 3000 	strb.w	r3, [sl]
 800aed8:	e5b5      	b.n	800aa46 <_dtoa_r+0x696>
 800aeda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aedc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800af3c <_dtoa_r+0xb8c>
 800aee0:	b11b      	cbz	r3, 800aeea <_dtoa_r+0xb3a>
 800aee2:	f10a 0308 	add.w	r3, sl, #8
 800aee6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800aee8:	6013      	str	r3, [r2, #0]
 800aeea:	4650      	mov	r0, sl
 800aeec:	b017      	add	sp, #92	@ 0x5c
 800aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	f77f ae3d 	ble.w	800ab74 <_dtoa_r+0x7c4>
 800aefa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aefc:	930a      	str	r3, [sp, #40]	@ 0x28
 800aefe:	2001      	movs	r0, #1
 800af00:	e65b      	b.n	800abba <_dtoa_r+0x80a>
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f77f aed6 	ble.w	800acb6 <_dtoa_r+0x906>
 800af0a:	4656      	mov	r6, sl
 800af0c:	4621      	mov	r1, r4
 800af0e:	4648      	mov	r0, r9
 800af10:	f7ff f9c6 	bl	800a2a0 <quorem>
 800af14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	f806 8b01 	strb.w	r8, [r6], #1
 800af1e:	eba6 020a 	sub.w	r2, r6, sl
 800af22:	4293      	cmp	r3, r2
 800af24:	ddb3      	ble.n	800ae8e <_dtoa_r+0xade>
 800af26:	4649      	mov	r1, r9
 800af28:	2300      	movs	r3, #0
 800af2a:	220a      	movs	r2, #10
 800af2c:	4658      	mov	r0, fp
 800af2e:	f000 fcb3 	bl	800b898 <__multadd>
 800af32:	4681      	mov	r9, r0
 800af34:	e7ea      	b.n	800af0c <_dtoa_r+0xb5c>
 800af36:	bf00      	nop
 800af38:	0800ce1e 	.word	0x0800ce1e
 800af3c:	0800cdb9 	.word	0x0800cdb9

0800af40 <_free_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4605      	mov	r5, r0
 800af44:	2900      	cmp	r1, #0
 800af46:	d040      	beq.n	800afca <_free_r+0x8a>
 800af48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af4c:	1f0c      	subs	r4, r1, #4
 800af4e:	2b00      	cmp	r3, #0
 800af50:	bfb8      	it	lt
 800af52:	18e4      	addlt	r4, r4, r3
 800af54:	f000 fc32 	bl	800b7bc <__malloc_lock>
 800af58:	4a1c      	ldr	r2, [pc, #112]	@ (800afcc <_free_r+0x8c>)
 800af5a:	6813      	ldr	r3, [r2, #0]
 800af5c:	b933      	cbnz	r3, 800af6c <_free_r+0x2c>
 800af5e:	6063      	str	r3, [r4, #4]
 800af60:	6014      	str	r4, [r2, #0]
 800af62:	4628      	mov	r0, r5
 800af64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af68:	f000 bc2e 	b.w	800b7c8 <__malloc_unlock>
 800af6c:	42a3      	cmp	r3, r4
 800af6e:	d908      	bls.n	800af82 <_free_r+0x42>
 800af70:	6820      	ldr	r0, [r4, #0]
 800af72:	1821      	adds	r1, r4, r0
 800af74:	428b      	cmp	r3, r1
 800af76:	bf01      	itttt	eq
 800af78:	6819      	ldreq	r1, [r3, #0]
 800af7a:	685b      	ldreq	r3, [r3, #4]
 800af7c:	1809      	addeq	r1, r1, r0
 800af7e:	6021      	streq	r1, [r4, #0]
 800af80:	e7ed      	b.n	800af5e <_free_r+0x1e>
 800af82:	461a      	mov	r2, r3
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	b10b      	cbz	r3, 800af8c <_free_r+0x4c>
 800af88:	42a3      	cmp	r3, r4
 800af8a:	d9fa      	bls.n	800af82 <_free_r+0x42>
 800af8c:	6811      	ldr	r1, [r2, #0]
 800af8e:	1850      	adds	r0, r2, r1
 800af90:	42a0      	cmp	r0, r4
 800af92:	d10b      	bne.n	800afac <_free_r+0x6c>
 800af94:	6820      	ldr	r0, [r4, #0]
 800af96:	4401      	add	r1, r0
 800af98:	1850      	adds	r0, r2, r1
 800af9a:	4283      	cmp	r3, r0
 800af9c:	6011      	str	r1, [r2, #0]
 800af9e:	d1e0      	bne.n	800af62 <_free_r+0x22>
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	4408      	add	r0, r1
 800afa6:	6010      	str	r0, [r2, #0]
 800afa8:	6053      	str	r3, [r2, #4]
 800afaa:	e7da      	b.n	800af62 <_free_r+0x22>
 800afac:	d902      	bls.n	800afb4 <_free_r+0x74>
 800afae:	230c      	movs	r3, #12
 800afb0:	602b      	str	r3, [r5, #0]
 800afb2:	e7d6      	b.n	800af62 <_free_r+0x22>
 800afb4:	6820      	ldr	r0, [r4, #0]
 800afb6:	1821      	adds	r1, r4, r0
 800afb8:	428b      	cmp	r3, r1
 800afba:	bf01      	itttt	eq
 800afbc:	6819      	ldreq	r1, [r3, #0]
 800afbe:	685b      	ldreq	r3, [r3, #4]
 800afc0:	1809      	addeq	r1, r1, r0
 800afc2:	6021      	streq	r1, [r4, #0]
 800afc4:	6063      	str	r3, [r4, #4]
 800afc6:	6054      	str	r4, [r2, #4]
 800afc8:	e7cb      	b.n	800af62 <_free_r+0x22>
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	20001178 	.word	0x20001178

0800afd0 <rshift>:
 800afd0:	6903      	ldr	r3, [r0, #16]
 800afd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afda:	f100 0414 	add.w	r4, r0, #20
 800afde:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afe2:	dd46      	ble.n	800b072 <rshift+0xa2>
 800afe4:	f011 011f 	ands.w	r1, r1, #31
 800afe8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aff0:	d10c      	bne.n	800b00c <rshift+0x3c>
 800aff2:	4629      	mov	r1, r5
 800aff4:	f100 0710 	add.w	r7, r0, #16
 800aff8:	42b1      	cmp	r1, r6
 800affa:	d335      	bcc.n	800b068 <rshift+0x98>
 800affc:	1a9b      	subs	r3, r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	1eea      	subs	r2, r5, #3
 800b002:	4296      	cmp	r6, r2
 800b004:	bf38      	it	cc
 800b006:	2300      	movcc	r3, #0
 800b008:	4423      	add	r3, r4
 800b00a:	e015      	b.n	800b038 <rshift+0x68>
 800b00c:	46a1      	mov	r9, r4
 800b00e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b012:	f1c1 0820 	rsb	r8, r1, #32
 800b016:	40cf      	lsrs	r7, r1
 800b018:	f105 0e04 	add.w	lr, r5, #4
 800b01c:	4576      	cmp	r6, lr
 800b01e:	46f4      	mov	ip, lr
 800b020:	d816      	bhi.n	800b050 <rshift+0x80>
 800b022:	1a9a      	subs	r2, r3, r2
 800b024:	0092      	lsls	r2, r2, #2
 800b026:	3a04      	subs	r2, #4
 800b028:	3501      	adds	r5, #1
 800b02a:	42ae      	cmp	r6, r5
 800b02c:	bf38      	it	cc
 800b02e:	2200      	movcc	r2, #0
 800b030:	18a3      	adds	r3, r4, r2
 800b032:	50a7      	str	r7, [r4, r2]
 800b034:	b107      	cbz	r7, 800b038 <rshift+0x68>
 800b036:	3304      	adds	r3, #4
 800b038:	42a3      	cmp	r3, r4
 800b03a:	eba3 0204 	sub.w	r2, r3, r4
 800b03e:	bf08      	it	eq
 800b040:	2300      	moveq	r3, #0
 800b042:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b046:	6102      	str	r2, [r0, #16]
 800b048:	bf08      	it	eq
 800b04a:	6143      	streq	r3, [r0, #20]
 800b04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b050:	f8dc c000 	ldr.w	ip, [ip]
 800b054:	fa0c fc08 	lsl.w	ip, ip, r8
 800b058:	ea4c 0707 	orr.w	r7, ip, r7
 800b05c:	f849 7b04 	str.w	r7, [r9], #4
 800b060:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b064:	40cf      	lsrs	r7, r1
 800b066:	e7d9      	b.n	800b01c <rshift+0x4c>
 800b068:	f851 cb04 	ldr.w	ip, [r1], #4
 800b06c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b070:	e7c2      	b.n	800aff8 <rshift+0x28>
 800b072:	4623      	mov	r3, r4
 800b074:	e7e0      	b.n	800b038 <rshift+0x68>

0800b076 <__hexdig_fun>:
 800b076:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b07a:	2b09      	cmp	r3, #9
 800b07c:	d802      	bhi.n	800b084 <__hexdig_fun+0xe>
 800b07e:	3820      	subs	r0, #32
 800b080:	b2c0      	uxtb	r0, r0
 800b082:	4770      	bx	lr
 800b084:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b088:	2b05      	cmp	r3, #5
 800b08a:	d801      	bhi.n	800b090 <__hexdig_fun+0x1a>
 800b08c:	3847      	subs	r0, #71	@ 0x47
 800b08e:	e7f7      	b.n	800b080 <__hexdig_fun+0xa>
 800b090:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b094:	2b05      	cmp	r3, #5
 800b096:	d801      	bhi.n	800b09c <__hexdig_fun+0x26>
 800b098:	3827      	subs	r0, #39	@ 0x27
 800b09a:	e7f1      	b.n	800b080 <__hexdig_fun+0xa>
 800b09c:	2000      	movs	r0, #0
 800b09e:	4770      	bx	lr

0800b0a0 <__gethex>:
 800b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	468a      	mov	sl, r1
 800b0a6:	4690      	mov	r8, r2
 800b0a8:	b085      	sub	sp, #20
 800b0aa:	9302      	str	r3, [sp, #8]
 800b0ac:	680b      	ldr	r3, [r1, #0]
 800b0ae:	9001      	str	r0, [sp, #4]
 800b0b0:	1c9c      	adds	r4, r3, #2
 800b0b2:	46a1      	mov	r9, r4
 800b0b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b0b8:	2830      	cmp	r0, #48	@ 0x30
 800b0ba:	d0fa      	beq.n	800b0b2 <__gethex+0x12>
 800b0bc:	eba9 0303 	sub.w	r3, r9, r3
 800b0c0:	f1a3 0b02 	sub.w	fp, r3, #2
 800b0c4:	f7ff ffd7 	bl	800b076 <__hexdig_fun>
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d168      	bne.n	800b1a0 <__gethex+0x100>
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	4648      	mov	r0, r9
 800b0d2:	499f      	ldr	r1, [pc, #636]	@ (800b350 <__gethex+0x2b0>)
 800b0d4:	f7fe ff95 	bl	800a002 <strncmp>
 800b0d8:	4607      	mov	r7, r0
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d167      	bne.n	800b1ae <__gethex+0x10e>
 800b0de:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b0e2:	4626      	mov	r6, r4
 800b0e4:	f7ff ffc7 	bl	800b076 <__hexdig_fun>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d062      	beq.n	800b1b2 <__gethex+0x112>
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	7818      	ldrb	r0, [r3, #0]
 800b0f0:	4699      	mov	r9, r3
 800b0f2:	2830      	cmp	r0, #48	@ 0x30
 800b0f4:	f103 0301 	add.w	r3, r3, #1
 800b0f8:	d0f9      	beq.n	800b0ee <__gethex+0x4e>
 800b0fa:	f7ff ffbc 	bl	800b076 <__hexdig_fun>
 800b0fe:	fab0 f580 	clz	r5, r0
 800b102:	f04f 0b01 	mov.w	fp, #1
 800b106:	096d      	lsrs	r5, r5, #5
 800b108:	464a      	mov	r2, r9
 800b10a:	4616      	mov	r6, r2
 800b10c:	7830      	ldrb	r0, [r6, #0]
 800b10e:	3201      	adds	r2, #1
 800b110:	f7ff ffb1 	bl	800b076 <__hexdig_fun>
 800b114:	2800      	cmp	r0, #0
 800b116:	d1f8      	bne.n	800b10a <__gethex+0x6a>
 800b118:	2201      	movs	r2, #1
 800b11a:	4630      	mov	r0, r6
 800b11c:	498c      	ldr	r1, [pc, #560]	@ (800b350 <__gethex+0x2b0>)
 800b11e:	f7fe ff70 	bl	800a002 <strncmp>
 800b122:	2800      	cmp	r0, #0
 800b124:	d13f      	bne.n	800b1a6 <__gethex+0x106>
 800b126:	b944      	cbnz	r4, 800b13a <__gethex+0x9a>
 800b128:	1c74      	adds	r4, r6, #1
 800b12a:	4622      	mov	r2, r4
 800b12c:	4616      	mov	r6, r2
 800b12e:	7830      	ldrb	r0, [r6, #0]
 800b130:	3201      	adds	r2, #1
 800b132:	f7ff ffa0 	bl	800b076 <__hexdig_fun>
 800b136:	2800      	cmp	r0, #0
 800b138:	d1f8      	bne.n	800b12c <__gethex+0x8c>
 800b13a:	1ba4      	subs	r4, r4, r6
 800b13c:	00a7      	lsls	r7, r4, #2
 800b13e:	7833      	ldrb	r3, [r6, #0]
 800b140:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b144:	2b50      	cmp	r3, #80	@ 0x50
 800b146:	d13e      	bne.n	800b1c6 <__gethex+0x126>
 800b148:	7873      	ldrb	r3, [r6, #1]
 800b14a:	2b2b      	cmp	r3, #43	@ 0x2b
 800b14c:	d033      	beq.n	800b1b6 <__gethex+0x116>
 800b14e:	2b2d      	cmp	r3, #45	@ 0x2d
 800b150:	d034      	beq.n	800b1bc <__gethex+0x11c>
 800b152:	2400      	movs	r4, #0
 800b154:	1c71      	adds	r1, r6, #1
 800b156:	7808      	ldrb	r0, [r1, #0]
 800b158:	f7ff ff8d 	bl	800b076 <__hexdig_fun>
 800b15c:	1e43      	subs	r3, r0, #1
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b18      	cmp	r3, #24
 800b162:	d830      	bhi.n	800b1c6 <__gethex+0x126>
 800b164:	f1a0 0210 	sub.w	r2, r0, #16
 800b168:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b16c:	f7ff ff83 	bl	800b076 <__hexdig_fun>
 800b170:	f100 3cff 	add.w	ip, r0, #4294967295
 800b174:	fa5f fc8c 	uxtb.w	ip, ip
 800b178:	f1bc 0f18 	cmp.w	ip, #24
 800b17c:	f04f 030a 	mov.w	r3, #10
 800b180:	d91e      	bls.n	800b1c0 <__gethex+0x120>
 800b182:	b104      	cbz	r4, 800b186 <__gethex+0xe6>
 800b184:	4252      	negs	r2, r2
 800b186:	4417      	add	r7, r2
 800b188:	f8ca 1000 	str.w	r1, [sl]
 800b18c:	b1ed      	cbz	r5, 800b1ca <__gethex+0x12a>
 800b18e:	f1bb 0f00 	cmp.w	fp, #0
 800b192:	bf0c      	ite	eq
 800b194:	2506      	moveq	r5, #6
 800b196:	2500      	movne	r5, #0
 800b198:	4628      	mov	r0, r5
 800b19a:	b005      	add	sp, #20
 800b19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a0:	2500      	movs	r5, #0
 800b1a2:	462c      	mov	r4, r5
 800b1a4:	e7b0      	b.n	800b108 <__gethex+0x68>
 800b1a6:	2c00      	cmp	r4, #0
 800b1a8:	d1c7      	bne.n	800b13a <__gethex+0x9a>
 800b1aa:	4627      	mov	r7, r4
 800b1ac:	e7c7      	b.n	800b13e <__gethex+0x9e>
 800b1ae:	464e      	mov	r6, r9
 800b1b0:	462f      	mov	r7, r5
 800b1b2:	2501      	movs	r5, #1
 800b1b4:	e7c3      	b.n	800b13e <__gethex+0x9e>
 800b1b6:	2400      	movs	r4, #0
 800b1b8:	1cb1      	adds	r1, r6, #2
 800b1ba:	e7cc      	b.n	800b156 <__gethex+0xb6>
 800b1bc:	2401      	movs	r4, #1
 800b1be:	e7fb      	b.n	800b1b8 <__gethex+0x118>
 800b1c0:	fb03 0002 	mla	r0, r3, r2, r0
 800b1c4:	e7ce      	b.n	800b164 <__gethex+0xc4>
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	e7de      	b.n	800b188 <__gethex+0xe8>
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	eba6 0309 	sub.w	r3, r6, r9
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	2b07      	cmp	r3, #7
 800b1d4:	dc0a      	bgt.n	800b1ec <__gethex+0x14c>
 800b1d6:	9801      	ldr	r0, [sp, #4]
 800b1d8:	f000 fafc 	bl	800b7d4 <_Balloc>
 800b1dc:	4604      	mov	r4, r0
 800b1de:	b940      	cbnz	r0, 800b1f2 <__gethex+0x152>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	21e4      	movs	r1, #228	@ 0xe4
 800b1e4:	4b5b      	ldr	r3, [pc, #364]	@ (800b354 <__gethex+0x2b4>)
 800b1e6:	485c      	ldr	r0, [pc, #368]	@ (800b358 <__gethex+0x2b8>)
 800b1e8:	f7ff f83c 	bl	800a264 <__assert_func>
 800b1ec:	3101      	adds	r1, #1
 800b1ee:	105b      	asrs	r3, r3, #1
 800b1f0:	e7ef      	b.n	800b1d2 <__gethex+0x132>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f100 0a14 	add.w	sl, r0, #20
 800b1f8:	4655      	mov	r5, sl
 800b1fa:	469b      	mov	fp, r3
 800b1fc:	45b1      	cmp	r9, r6
 800b1fe:	d337      	bcc.n	800b270 <__gethex+0x1d0>
 800b200:	f845 bb04 	str.w	fp, [r5], #4
 800b204:	eba5 050a 	sub.w	r5, r5, sl
 800b208:	10ad      	asrs	r5, r5, #2
 800b20a:	6125      	str	r5, [r4, #16]
 800b20c:	4658      	mov	r0, fp
 800b20e:	f000 fbd3 	bl	800b9b8 <__hi0bits>
 800b212:	016d      	lsls	r5, r5, #5
 800b214:	f8d8 6000 	ldr.w	r6, [r8]
 800b218:	1a2d      	subs	r5, r5, r0
 800b21a:	42b5      	cmp	r5, r6
 800b21c:	dd54      	ble.n	800b2c8 <__gethex+0x228>
 800b21e:	1bad      	subs	r5, r5, r6
 800b220:	4629      	mov	r1, r5
 800b222:	4620      	mov	r0, r4
 800b224:	f000 ff5b 	bl	800c0de <__any_on>
 800b228:	4681      	mov	r9, r0
 800b22a:	b178      	cbz	r0, 800b24c <__gethex+0x1ac>
 800b22c:	f04f 0901 	mov.w	r9, #1
 800b230:	1e6b      	subs	r3, r5, #1
 800b232:	1159      	asrs	r1, r3, #5
 800b234:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b238:	f003 021f 	and.w	r2, r3, #31
 800b23c:	fa09 f202 	lsl.w	r2, r9, r2
 800b240:	420a      	tst	r2, r1
 800b242:	d003      	beq.n	800b24c <__gethex+0x1ac>
 800b244:	454b      	cmp	r3, r9
 800b246:	dc36      	bgt.n	800b2b6 <__gethex+0x216>
 800b248:	f04f 0902 	mov.w	r9, #2
 800b24c:	4629      	mov	r1, r5
 800b24e:	4620      	mov	r0, r4
 800b250:	f7ff febe 	bl	800afd0 <rshift>
 800b254:	442f      	add	r7, r5
 800b256:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b25a:	42bb      	cmp	r3, r7
 800b25c:	da42      	bge.n	800b2e4 <__gethex+0x244>
 800b25e:	4621      	mov	r1, r4
 800b260:	9801      	ldr	r0, [sp, #4]
 800b262:	f000 faf7 	bl	800b854 <_Bfree>
 800b266:	2300      	movs	r3, #0
 800b268:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b26a:	25a3      	movs	r5, #163	@ 0xa3
 800b26c:	6013      	str	r3, [r2, #0]
 800b26e:	e793      	b.n	800b198 <__gethex+0xf8>
 800b270:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b274:	2a2e      	cmp	r2, #46	@ 0x2e
 800b276:	d012      	beq.n	800b29e <__gethex+0x1fe>
 800b278:	2b20      	cmp	r3, #32
 800b27a:	d104      	bne.n	800b286 <__gethex+0x1e6>
 800b27c:	f845 bb04 	str.w	fp, [r5], #4
 800b280:	f04f 0b00 	mov.w	fp, #0
 800b284:	465b      	mov	r3, fp
 800b286:	7830      	ldrb	r0, [r6, #0]
 800b288:	9303      	str	r3, [sp, #12]
 800b28a:	f7ff fef4 	bl	800b076 <__hexdig_fun>
 800b28e:	9b03      	ldr	r3, [sp, #12]
 800b290:	f000 000f 	and.w	r0, r0, #15
 800b294:	4098      	lsls	r0, r3
 800b296:	ea4b 0b00 	orr.w	fp, fp, r0
 800b29a:	3304      	adds	r3, #4
 800b29c:	e7ae      	b.n	800b1fc <__gethex+0x15c>
 800b29e:	45b1      	cmp	r9, r6
 800b2a0:	d8ea      	bhi.n	800b278 <__gethex+0x1d8>
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	492a      	ldr	r1, [pc, #168]	@ (800b350 <__gethex+0x2b0>)
 800b2a8:	9303      	str	r3, [sp, #12]
 800b2aa:	f7fe feaa 	bl	800a002 <strncmp>
 800b2ae:	9b03      	ldr	r3, [sp, #12]
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d1e1      	bne.n	800b278 <__gethex+0x1d8>
 800b2b4:	e7a2      	b.n	800b1fc <__gethex+0x15c>
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	1ea9      	subs	r1, r5, #2
 800b2ba:	f000 ff10 	bl	800c0de <__any_on>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d0c2      	beq.n	800b248 <__gethex+0x1a8>
 800b2c2:	f04f 0903 	mov.w	r9, #3
 800b2c6:	e7c1      	b.n	800b24c <__gethex+0x1ac>
 800b2c8:	da09      	bge.n	800b2de <__gethex+0x23e>
 800b2ca:	1b75      	subs	r5, r6, r5
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	462a      	mov	r2, r5
 800b2d0:	9801      	ldr	r0, [sp, #4]
 800b2d2:	f000 fcd5 	bl	800bc80 <__lshift>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	1b7f      	subs	r7, r7, r5
 800b2da:	f100 0a14 	add.w	sl, r0, #20
 800b2de:	f04f 0900 	mov.w	r9, #0
 800b2e2:	e7b8      	b.n	800b256 <__gethex+0x1b6>
 800b2e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2e8:	42bd      	cmp	r5, r7
 800b2ea:	dd6f      	ble.n	800b3cc <__gethex+0x32c>
 800b2ec:	1bed      	subs	r5, r5, r7
 800b2ee:	42ae      	cmp	r6, r5
 800b2f0:	dc34      	bgt.n	800b35c <__gethex+0x2bc>
 800b2f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d022      	beq.n	800b340 <__gethex+0x2a0>
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d024      	beq.n	800b348 <__gethex+0x2a8>
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d115      	bne.n	800b32e <__gethex+0x28e>
 800b302:	42ae      	cmp	r6, r5
 800b304:	d113      	bne.n	800b32e <__gethex+0x28e>
 800b306:	2e01      	cmp	r6, #1
 800b308:	d10b      	bne.n	800b322 <__gethex+0x282>
 800b30a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b30e:	9a02      	ldr	r2, [sp, #8]
 800b310:	2562      	movs	r5, #98	@ 0x62
 800b312:	6013      	str	r3, [r2, #0]
 800b314:	2301      	movs	r3, #1
 800b316:	6123      	str	r3, [r4, #16]
 800b318:	f8ca 3000 	str.w	r3, [sl]
 800b31c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b31e:	601c      	str	r4, [r3, #0]
 800b320:	e73a      	b.n	800b198 <__gethex+0xf8>
 800b322:	4620      	mov	r0, r4
 800b324:	1e71      	subs	r1, r6, #1
 800b326:	f000 feda 	bl	800c0de <__any_on>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	d1ed      	bne.n	800b30a <__gethex+0x26a>
 800b32e:	4621      	mov	r1, r4
 800b330:	9801      	ldr	r0, [sp, #4]
 800b332:	f000 fa8f 	bl	800b854 <_Bfree>
 800b336:	2300      	movs	r3, #0
 800b338:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b33a:	2550      	movs	r5, #80	@ 0x50
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	e72b      	b.n	800b198 <__gethex+0xf8>
 800b340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1f3      	bne.n	800b32e <__gethex+0x28e>
 800b346:	e7e0      	b.n	800b30a <__gethex+0x26a>
 800b348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1dd      	bne.n	800b30a <__gethex+0x26a>
 800b34e:	e7ee      	b.n	800b32e <__gethex+0x28e>
 800b350:	0800cc78 	.word	0x0800cc78
 800b354:	0800ce1e 	.word	0x0800ce1e
 800b358:	0800ce2f 	.word	0x0800ce2f
 800b35c:	1e6f      	subs	r7, r5, #1
 800b35e:	f1b9 0f00 	cmp.w	r9, #0
 800b362:	d130      	bne.n	800b3c6 <__gethex+0x326>
 800b364:	b127      	cbz	r7, 800b370 <__gethex+0x2d0>
 800b366:	4639      	mov	r1, r7
 800b368:	4620      	mov	r0, r4
 800b36a:	f000 feb8 	bl	800c0de <__any_on>
 800b36e:	4681      	mov	r9, r0
 800b370:	2301      	movs	r3, #1
 800b372:	4629      	mov	r1, r5
 800b374:	1b76      	subs	r6, r6, r5
 800b376:	2502      	movs	r5, #2
 800b378:	117a      	asrs	r2, r7, #5
 800b37a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b37e:	f007 071f 	and.w	r7, r7, #31
 800b382:	40bb      	lsls	r3, r7
 800b384:	4213      	tst	r3, r2
 800b386:	4620      	mov	r0, r4
 800b388:	bf18      	it	ne
 800b38a:	f049 0902 	orrne.w	r9, r9, #2
 800b38e:	f7ff fe1f 	bl	800afd0 <rshift>
 800b392:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b396:	f1b9 0f00 	cmp.w	r9, #0
 800b39a:	d047      	beq.n	800b42c <__gethex+0x38c>
 800b39c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d015      	beq.n	800b3d0 <__gethex+0x330>
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d017      	beq.n	800b3d8 <__gethex+0x338>
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d109      	bne.n	800b3c0 <__gethex+0x320>
 800b3ac:	f019 0f02 	tst.w	r9, #2
 800b3b0:	d006      	beq.n	800b3c0 <__gethex+0x320>
 800b3b2:	f8da 3000 	ldr.w	r3, [sl]
 800b3b6:	ea49 0903 	orr.w	r9, r9, r3
 800b3ba:	f019 0f01 	tst.w	r9, #1
 800b3be:	d10e      	bne.n	800b3de <__gethex+0x33e>
 800b3c0:	f045 0510 	orr.w	r5, r5, #16
 800b3c4:	e032      	b.n	800b42c <__gethex+0x38c>
 800b3c6:	f04f 0901 	mov.w	r9, #1
 800b3ca:	e7d1      	b.n	800b370 <__gethex+0x2d0>
 800b3cc:	2501      	movs	r5, #1
 800b3ce:	e7e2      	b.n	800b396 <__gethex+0x2f6>
 800b3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3d2:	f1c3 0301 	rsb	r3, r3, #1
 800b3d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d0f0      	beq.n	800b3c0 <__gethex+0x320>
 800b3de:	f04f 0c00 	mov.w	ip, #0
 800b3e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3e6:	f104 0314 	add.w	r3, r4, #20
 800b3ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b3ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b3fc:	d01b      	beq.n	800b436 <__gethex+0x396>
 800b3fe:	3201      	adds	r2, #1
 800b400:	6002      	str	r2, [r0, #0]
 800b402:	2d02      	cmp	r5, #2
 800b404:	f104 0314 	add.w	r3, r4, #20
 800b408:	d13c      	bne.n	800b484 <__gethex+0x3e4>
 800b40a:	f8d8 2000 	ldr.w	r2, [r8]
 800b40e:	3a01      	subs	r2, #1
 800b410:	42b2      	cmp	r2, r6
 800b412:	d109      	bne.n	800b428 <__gethex+0x388>
 800b414:	2201      	movs	r2, #1
 800b416:	1171      	asrs	r1, r6, #5
 800b418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b41c:	f006 061f 	and.w	r6, r6, #31
 800b420:	fa02 f606 	lsl.w	r6, r2, r6
 800b424:	421e      	tst	r6, r3
 800b426:	d13a      	bne.n	800b49e <__gethex+0x3fe>
 800b428:	f045 0520 	orr.w	r5, r5, #32
 800b42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b42e:	601c      	str	r4, [r3, #0]
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	601f      	str	r7, [r3, #0]
 800b434:	e6b0      	b.n	800b198 <__gethex+0xf8>
 800b436:	4299      	cmp	r1, r3
 800b438:	f843 cc04 	str.w	ip, [r3, #-4]
 800b43c:	d8d9      	bhi.n	800b3f2 <__gethex+0x352>
 800b43e:	68a3      	ldr	r3, [r4, #8]
 800b440:	459b      	cmp	fp, r3
 800b442:	db17      	blt.n	800b474 <__gethex+0x3d4>
 800b444:	6861      	ldr	r1, [r4, #4]
 800b446:	9801      	ldr	r0, [sp, #4]
 800b448:	3101      	adds	r1, #1
 800b44a:	f000 f9c3 	bl	800b7d4 <_Balloc>
 800b44e:	4681      	mov	r9, r0
 800b450:	b918      	cbnz	r0, 800b45a <__gethex+0x3ba>
 800b452:	4602      	mov	r2, r0
 800b454:	2184      	movs	r1, #132	@ 0x84
 800b456:	4b19      	ldr	r3, [pc, #100]	@ (800b4bc <__gethex+0x41c>)
 800b458:	e6c5      	b.n	800b1e6 <__gethex+0x146>
 800b45a:	6922      	ldr	r2, [r4, #16]
 800b45c:	f104 010c 	add.w	r1, r4, #12
 800b460:	3202      	adds	r2, #2
 800b462:	0092      	lsls	r2, r2, #2
 800b464:	300c      	adds	r0, #12
 800b466:	f7fe fee8 	bl	800a23a <memcpy>
 800b46a:	4621      	mov	r1, r4
 800b46c:	9801      	ldr	r0, [sp, #4]
 800b46e:	f000 f9f1 	bl	800b854 <_Bfree>
 800b472:	464c      	mov	r4, r9
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	6122      	str	r2, [r4, #16]
 800b47a:	2201      	movs	r2, #1
 800b47c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b480:	615a      	str	r2, [r3, #20]
 800b482:	e7be      	b.n	800b402 <__gethex+0x362>
 800b484:	6922      	ldr	r2, [r4, #16]
 800b486:	455a      	cmp	r2, fp
 800b488:	dd0b      	ble.n	800b4a2 <__gethex+0x402>
 800b48a:	2101      	movs	r1, #1
 800b48c:	4620      	mov	r0, r4
 800b48e:	f7ff fd9f 	bl	800afd0 <rshift>
 800b492:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b496:	3701      	adds	r7, #1
 800b498:	42bb      	cmp	r3, r7
 800b49a:	f6ff aee0 	blt.w	800b25e <__gethex+0x1be>
 800b49e:	2501      	movs	r5, #1
 800b4a0:	e7c2      	b.n	800b428 <__gethex+0x388>
 800b4a2:	f016 061f 	ands.w	r6, r6, #31
 800b4a6:	d0fa      	beq.n	800b49e <__gethex+0x3fe>
 800b4a8:	4453      	add	r3, sl
 800b4aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b4ae:	f000 fa83 	bl	800b9b8 <__hi0bits>
 800b4b2:	f1c6 0620 	rsb	r6, r6, #32
 800b4b6:	42b0      	cmp	r0, r6
 800b4b8:	dbe7      	blt.n	800b48a <__gethex+0x3ea>
 800b4ba:	e7f0      	b.n	800b49e <__gethex+0x3fe>
 800b4bc:	0800ce1e 	.word	0x0800ce1e

0800b4c0 <L_shift>:
 800b4c0:	f1c2 0208 	rsb	r2, r2, #8
 800b4c4:	0092      	lsls	r2, r2, #2
 800b4c6:	b570      	push	{r4, r5, r6, lr}
 800b4c8:	f1c2 0620 	rsb	r6, r2, #32
 800b4cc:	6843      	ldr	r3, [r0, #4]
 800b4ce:	6804      	ldr	r4, [r0, #0]
 800b4d0:	fa03 f506 	lsl.w	r5, r3, r6
 800b4d4:	432c      	orrs	r4, r5
 800b4d6:	40d3      	lsrs	r3, r2
 800b4d8:	6004      	str	r4, [r0, #0]
 800b4da:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4de:	4288      	cmp	r0, r1
 800b4e0:	d3f4      	bcc.n	800b4cc <L_shift+0xc>
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}

0800b4e4 <__match>:
 800b4e4:	b530      	push	{r4, r5, lr}
 800b4e6:	6803      	ldr	r3, [r0, #0]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ee:	b914      	cbnz	r4, 800b4f6 <__match+0x12>
 800b4f0:	6003      	str	r3, [r0, #0]
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	bd30      	pop	{r4, r5, pc}
 800b4f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4fa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b4fe:	2d19      	cmp	r5, #25
 800b500:	bf98      	it	ls
 800b502:	3220      	addls	r2, #32
 800b504:	42a2      	cmp	r2, r4
 800b506:	d0f0      	beq.n	800b4ea <__match+0x6>
 800b508:	2000      	movs	r0, #0
 800b50a:	e7f3      	b.n	800b4f4 <__match+0x10>

0800b50c <__hexnan>:
 800b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b510:	2500      	movs	r5, #0
 800b512:	680b      	ldr	r3, [r1, #0]
 800b514:	4682      	mov	sl, r0
 800b516:	115e      	asrs	r6, r3, #5
 800b518:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b51c:	f013 031f 	ands.w	r3, r3, #31
 800b520:	bf18      	it	ne
 800b522:	3604      	addne	r6, #4
 800b524:	1f37      	subs	r7, r6, #4
 800b526:	4690      	mov	r8, r2
 800b528:	46b9      	mov	r9, r7
 800b52a:	463c      	mov	r4, r7
 800b52c:	46ab      	mov	fp, r5
 800b52e:	b087      	sub	sp, #28
 800b530:	6801      	ldr	r1, [r0, #0]
 800b532:	9301      	str	r3, [sp, #4]
 800b534:	f846 5c04 	str.w	r5, [r6, #-4]
 800b538:	9502      	str	r5, [sp, #8]
 800b53a:	784a      	ldrb	r2, [r1, #1]
 800b53c:	1c4b      	adds	r3, r1, #1
 800b53e:	9303      	str	r3, [sp, #12]
 800b540:	b342      	cbz	r2, 800b594 <__hexnan+0x88>
 800b542:	4610      	mov	r0, r2
 800b544:	9105      	str	r1, [sp, #20]
 800b546:	9204      	str	r2, [sp, #16]
 800b548:	f7ff fd95 	bl	800b076 <__hexdig_fun>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d151      	bne.n	800b5f4 <__hexnan+0xe8>
 800b550:	9a04      	ldr	r2, [sp, #16]
 800b552:	9905      	ldr	r1, [sp, #20]
 800b554:	2a20      	cmp	r2, #32
 800b556:	d818      	bhi.n	800b58a <__hexnan+0x7e>
 800b558:	9b02      	ldr	r3, [sp, #8]
 800b55a:	459b      	cmp	fp, r3
 800b55c:	dd13      	ble.n	800b586 <__hexnan+0x7a>
 800b55e:	454c      	cmp	r4, r9
 800b560:	d206      	bcs.n	800b570 <__hexnan+0x64>
 800b562:	2d07      	cmp	r5, #7
 800b564:	dc04      	bgt.n	800b570 <__hexnan+0x64>
 800b566:	462a      	mov	r2, r5
 800b568:	4649      	mov	r1, r9
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7ff ffa8 	bl	800b4c0 <L_shift>
 800b570:	4544      	cmp	r4, r8
 800b572:	d952      	bls.n	800b61a <__hexnan+0x10e>
 800b574:	2300      	movs	r3, #0
 800b576:	f1a4 0904 	sub.w	r9, r4, #4
 800b57a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b57e:	461d      	mov	r5, r3
 800b580:	464c      	mov	r4, r9
 800b582:	f8cd b008 	str.w	fp, [sp, #8]
 800b586:	9903      	ldr	r1, [sp, #12]
 800b588:	e7d7      	b.n	800b53a <__hexnan+0x2e>
 800b58a:	2a29      	cmp	r2, #41	@ 0x29
 800b58c:	d157      	bne.n	800b63e <__hexnan+0x132>
 800b58e:	3102      	adds	r1, #2
 800b590:	f8ca 1000 	str.w	r1, [sl]
 800b594:	f1bb 0f00 	cmp.w	fp, #0
 800b598:	d051      	beq.n	800b63e <__hexnan+0x132>
 800b59a:	454c      	cmp	r4, r9
 800b59c:	d206      	bcs.n	800b5ac <__hexnan+0xa0>
 800b59e:	2d07      	cmp	r5, #7
 800b5a0:	dc04      	bgt.n	800b5ac <__hexnan+0xa0>
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f7ff ff8a 	bl	800b4c0 <L_shift>
 800b5ac:	4544      	cmp	r4, r8
 800b5ae:	d936      	bls.n	800b61e <__hexnan+0x112>
 800b5b0:	4623      	mov	r3, r4
 800b5b2:	f1a8 0204 	sub.w	r2, r8, #4
 800b5b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b5ba:	429f      	cmp	r7, r3
 800b5bc:	f842 1f04 	str.w	r1, [r2, #4]!
 800b5c0:	d2f9      	bcs.n	800b5b6 <__hexnan+0xaa>
 800b5c2:	1b3b      	subs	r3, r7, r4
 800b5c4:	f023 0303 	bic.w	r3, r3, #3
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	3401      	adds	r4, #1
 800b5cc:	3e03      	subs	r6, #3
 800b5ce:	42b4      	cmp	r4, r6
 800b5d0:	bf88      	it	hi
 800b5d2:	2304      	movhi	r3, #4
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4443      	add	r3, r8
 800b5d8:	f843 2b04 	str.w	r2, [r3], #4
 800b5dc:	429f      	cmp	r7, r3
 800b5de:	d2fb      	bcs.n	800b5d8 <__hexnan+0xcc>
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	b91b      	cbnz	r3, 800b5ec <__hexnan+0xe0>
 800b5e4:	4547      	cmp	r7, r8
 800b5e6:	d128      	bne.n	800b63a <__hexnan+0x12e>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	2005      	movs	r0, #5
 800b5ee:	b007      	add	sp, #28
 800b5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f4:	3501      	adds	r5, #1
 800b5f6:	2d08      	cmp	r5, #8
 800b5f8:	f10b 0b01 	add.w	fp, fp, #1
 800b5fc:	dd06      	ble.n	800b60c <__hexnan+0x100>
 800b5fe:	4544      	cmp	r4, r8
 800b600:	d9c1      	bls.n	800b586 <__hexnan+0x7a>
 800b602:	2300      	movs	r3, #0
 800b604:	2501      	movs	r5, #1
 800b606:	f844 3c04 	str.w	r3, [r4, #-4]
 800b60a:	3c04      	subs	r4, #4
 800b60c:	6822      	ldr	r2, [r4, #0]
 800b60e:	f000 000f 	and.w	r0, r0, #15
 800b612:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b616:	6020      	str	r0, [r4, #0]
 800b618:	e7b5      	b.n	800b586 <__hexnan+0x7a>
 800b61a:	2508      	movs	r5, #8
 800b61c:	e7b3      	b.n	800b586 <__hexnan+0x7a>
 800b61e:	9b01      	ldr	r3, [sp, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d0dd      	beq.n	800b5e0 <__hexnan+0xd4>
 800b624:	f04f 32ff 	mov.w	r2, #4294967295
 800b628:	f1c3 0320 	rsb	r3, r3, #32
 800b62c:	40da      	lsrs	r2, r3
 800b62e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b632:	4013      	ands	r3, r2
 800b634:	f846 3c04 	str.w	r3, [r6, #-4]
 800b638:	e7d2      	b.n	800b5e0 <__hexnan+0xd4>
 800b63a:	3f04      	subs	r7, #4
 800b63c:	e7d0      	b.n	800b5e0 <__hexnan+0xd4>
 800b63e:	2004      	movs	r0, #4
 800b640:	e7d5      	b.n	800b5ee <__hexnan+0xe2>
	...

0800b644 <malloc>:
 800b644:	4b02      	ldr	r3, [pc, #8]	@ (800b650 <malloc+0xc>)
 800b646:	4601      	mov	r1, r0
 800b648:	6818      	ldr	r0, [r3, #0]
 800b64a:	f000 b825 	b.w	800b698 <_malloc_r>
 800b64e:	bf00      	nop
 800b650:	200002fc 	.word	0x200002fc

0800b654 <sbrk_aligned>:
 800b654:	b570      	push	{r4, r5, r6, lr}
 800b656:	4e0f      	ldr	r6, [pc, #60]	@ (800b694 <sbrk_aligned+0x40>)
 800b658:	460c      	mov	r4, r1
 800b65a:	6831      	ldr	r1, [r6, #0]
 800b65c:	4605      	mov	r5, r0
 800b65e:	b911      	cbnz	r1, 800b666 <sbrk_aligned+0x12>
 800b660:	f000 ff96 	bl	800c590 <_sbrk_r>
 800b664:	6030      	str	r0, [r6, #0]
 800b666:	4621      	mov	r1, r4
 800b668:	4628      	mov	r0, r5
 800b66a:	f000 ff91 	bl	800c590 <_sbrk_r>
 800b66e:	1c43      	adds	r3, r0, #1
 800b670:	d103      	bne.n	800b67a <sbrk_aligned+0x26>
 800b672:	f04f 34ff 	mov.w	r4, #4294967295
 800b676:	4620      	mov	r0, r4
 800b678:	bd70      	pop	{r4, r5, r6, pc}
 800b67a:	1cc4      	adds	r4, r0, #3
 800b67c:	f024 0403 	bic.w	r4, r4, #3
 800b680:	42a0      	cmp	r0, r4
 800b682:	d0f8      	beq.n	800b676 <sbrk_aligned+0x22>
 800b684:	1a21      	subs	r1, r4, r0
 800b686:	4628      	mov	r0, r5
 800b688:	f000 ff82 	bl	800c590 <_sbrk_r>
 800b68c:	3001      	adds	r0, #1
 800b68e:	d1f2      	bne.n	800b676 <sbrk_aligned+0x22>
 800b690:	e7ef      	b.n	800b672 <sbrk_aligned+0x1e>
 800b692:	bf00      	nop
 800b694:	20001174 	.word	0x20001174

0800b698 <_malloc_r>:
 800b698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b69c:	1ccd      	adds	r5, r1, #3
 800b69e:	f025 0503 	bic.w	r5, r5, #3
 800b6a2:	3508      	adds	r5, #8
 800b6a4:	2d0c      	cmp	r5, #12
 800b6a6:	bf38      	it	cc
 800b6a8:	250c      	movcc	r5, #12
 800b6aa:	2d00      	cmp	r5, #0
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	db01      	blt.n	800b6b4 <_malloc_r+0x1c>
 800b6b0:	42a9      	cmp	r1, r5
 800b6b2:	d904      	bls.n	800b6be <_malloc_r+0x26>
 800b6b4:	230c      	movs	r3, #12
 800b6b6:	6033      	str	r3, [r6, #0]
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b794 <_malloc_r+0xfc>
 800b6c2:	f000 f87b 	bl	800b7bc <__malloc_lock>
 800b6c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6ca:	461c      	mov	r4, r3
 800b6cc:	bb44      	cbnz	r4, 800b720 <_malloc_r+0x88>
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f7ff ffbf 	bl	800b654 <sbrk_aligned>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	4604      	mov	r4, r0
 800b6da:	d158      	bne.n	800b78e <_malloc_r+0xf6>
 800b6dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b6e0:	4627      	mov	r7, r4
 800b6e2:	2f00      	cmp	r7, #0
 800b6e4:	d143      	bne.n	800b76e <_malloc_r+0xd6>
 800b6e6:	2c00      	cmp	r4, #0
 800b6e8:	d04b      	beq.n	800b782 <_malloc_r+0xea>
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	eb04 0903 	add.w	r9, r4, r3
 800b6f4:	f000 ff4c 	bl	800c590 <_sbrk_r>
 800b6f8:	4581      	cmp	r9, r0
 800b6fa:	d142      	bne.n	800b782 <_malloc_r+0xea>
 800b6fc:	6821      	ldr	r1, [r4, #0]
 800b6fe:	4630      	mov	r0, r6
 800b700:	1a6d      	subs	r5, r5, r1
 800b702:	4629      	mov	r1, r5
 800b704:	f7ff ffa6 	bl	800b654 <sbrk_aligned>
 800b708:	3001      	adds	r0, #1
 800b70a:	d03a      	beq.n	800b782 <_malloc_r+0xea>
 800b70c:	6823      	ldr	r3, [r4, #0]
 800b70e:	442b      	add	r3, r5
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	f8d8 3000 	ldr.w	r3, [r8]
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	bb62      	cbnz	r2, 800b774 <_malloc_r+0xdc>
 800b71a:	f8c8 7000 	str.w	r7, [r8]
 800b71e:	e00f      	b.n	800b740 <_malloc_r+0xa8>
 800b720:	6822      	ldr	r2, [r4, #0]
 800b722:	1b52      	subs	r2, r2, r5
 800b724:	d420      	bmi.n	800b768 <_malloc_r+0xd0>
 800b726:	2a0b      	cmp	r2, #11
 800b728:	d917      	bls.n	800b75a <_malloc_r+0xc2>
 800b72a:	1961      	adds	r1, r4, r5
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	6025      	str	r5, [r4, #0]
 800b730:	bf18      	it	ne
 800b732:	6059      	strne	r1, [r3, #4]
 800b734:	6863      	ldr	r3, [r4, #4]
 800b736:	bf08      	it	eq
 800b738:	f8c8 1000 	streq.w	r1, [r8]
 800b73c:	5162      	str	r2, [r4, r5]
 800b73e:	604b      	str	r3, [r1, #4]
 800b740:	4630      	mov	r0, r6
 800b742:	f000 f841 	bl	800b7c8 <__malloc_unlock>
 800b746:	f104 000b 	add.w	r0, r4, #11
 800b74a:	1d23      	adds	r3, r4, #4
 800b74c:	f020 0007 	bic.w	r0, r0, #7
 800b750:	1ac2      	subs	r2, r0, r3
 800b752:	bf1c      	itt	ne
 800b754:	1a1b      	subne	r3, r3, r0
 800b756:	50a3      	strne	r3, [r4, r2]
 800b758:	e7af      	b.n	800b6ba <_malloc_r+0x22>
 800b75a:	6862      	ldr	r2, [r4, #4]
 800b75c:	42a3      	cmp	r3, r4
 800b75e:	bf0c      	ite	eq
 800b760:	f8c8 2000 	streq.w	r2, [r8]
 800b764:	605a      	strne	r2, [r3, #4]
 800b766:	e7eb      	b.n	800b740 <_malloc_r+0xa8>
 800b768:	4623      	mov	r3, r4
 800b76a:	6864      	ldr	r4, [r4, #4]
 800b76c:	e7ae      	b.n	800b6cc <_malloc_r+0x34>
 800b76e:	463c      	mov	r4, r7
 800b770:	687f      	ldr	r7, [r7, #4]
 800b772:	e7b6      	b.n	800b6e2 <_malloc_r+0x4a>
 800b774:	461a      	mov	r2, r3
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	42a3      	cmp	r3, r4
 800b77a:	d1fb      	bne.n	800b774 <_malloc_r+0xdc>
 800b77c:	2300      	movs	r3, #0
 800b77e:	6053      	str	r3, [r2, #4]
 800b780:	e7de      	b.n	800b740 <_malloc_r+0xa8>
 800b782:	230c      	movs	r3, #12
 800b784:	4630      	mov	r0, r6
 800b786:	6033      	str	r3, [r6, #0]
 800b788:	f000 f81e 	bl	800b7c8 <__malloc_unlock>
 800b78c:	e794      	b.n	800b6b8 <_malloc_r+0x20>
 800b78e:	6005      	str	r5, [r0, #0]
 800b790:	e7d6      	b.n	800b740 <_malloc_r+0xa8>
 800b792:	bf00      	nop
 800b794:	20001178 	.word	0x20001178

0800b798 <__ascii_mbtowc>:
 800b798:	b082      	sub	sp, #8
 800b79a:	b901      	cbnz	r1, 800b79e <__ascii_mbtowc+0x6>
 800b79c:	a901      	add	r1, sp, #4
 800b79e:	b142      	cbz	r2, 800b7b2 <__ascii_mbtowc+0x1a>
 800b7a0:	b14b      	cbz	r3, 800b7b6 <__ascii_mbtowc+0x1e>
 800b7a2:	7813      	ldrb	r3, [r2, #0]
 800b7a4:	600b      	str	r3, [r1, #0]
 800b7a6:	7812      	ldrb	r2, [r2, #0]
 800b7a8:	1e10      	subs	r0, r2, #0
 800b7aa:	bf18      	it	ne
 800b7ac:	2001      	movne	r0, #1
 800b7ae:	b002      	add	sp, #8
 800b7b0:	4770      	bx	lr
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	e7fb      	b.n	800b7ae <__ascii_mbtowc+0x16>
 800b7b6:	f06f 0001 	mvn.w	r0, #1
 800b7ba:	e7f8      	b.n	800b7ae <__ascii_mbtowc+0x16>

0800b7bc <__malloc_lock>:
 800b7bc:	4801      	ldr	r0, [pc, #4]	@ (800b7c4 <__malloc_lock+0x8>)
 800b7be:	f7fe bd2c 	b.w	800a21a <__retarget_lock_acquire_recursive>
 800b7c2:	bf00      	nop
 800b7c4:	20001170 	.word	0x20001170

0800b7c8 <__malloc_unlock>:
 800b7c8:	4801      	ldr	r0, [pc, #4]	@ (800b7d0 <__malloc_unlock+0x8>)
 800b7ca:	f7fe bd27 	b.w	800a21c <__retarget_lock_release_recursive>
 800b7ce:	bf00      	nop
 800b7d0:	20001170 	.word	0x20001170

0800b7d4 <_Balloc>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	69c6      	ldr	r6, [r0, #28]
 800b7d8:	4604      	mov	r4, r0
 800b7da:	460d      	mov	r5, r1
 800b7dc:	b976      	cbnz	r6, 800b7fc <_Balloc+0x28>
 800b7de:	2010      	movs	r0, #16
 800b7e0:	f7ff ff30 	bl	800b644 <malloc>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	61e0      	str	r0, [r4, #28]
 800b7e8:	b920      	cbnz	r0, 800b7f4 <_Balloc+0x20>
 800b7ea:	216b      	movs	r1, #107	@ 0x6b
 800b7ec:	4b17      	ldr	r3, [pc, #92]	@ (800b84c <_Balloc+0x78>)
 800b7ee:	4818      	ldr	r0, [pc, #96]	@ (800b850 <_Balloc+0x7c>)
 800b7f0:	f7fe fd38 	bl	800a264 <__assert_func>
 800b7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7f8:	6006      	str	r6, [r0, #0]
 800b7fa:	60c6      	str	r6, [r0, #12]
 800b7fc:	69e6      	ldr	r6, [r4, #28]
 800b7fe:	68f3      	ldr	r3, [r6, #12]
 800b800:	b183      	cbz	r3, 800b824 <_Balloc+0x50>
 800b802:	69e3      	ldr	r3, [r4, #28]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b80a:	b9b8      	cbnz	r0, 800b83c <_Balloc+0x68>
 800b80c:	2101      	movs	r1, #1
 800b80e:	fa01 f605 	lsl.w	r6, r1, r5
 800b812:	1d72      	adds	r2, r6, #5
 800b814:	4620      	mov	r0, r4
 800b816:	0092      	lsls	r2, r2, #2
 800b818:	f000 fed1 	bl	800c5be <_calloc_r>
 800b81c:	b160      	cbz	r0, 800b838 <_Balloc+0x64>
 800b81e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b822:	e00e      	b.n	800b842 <_Balloc+0x6e>
 800b824:	2221      	movs	r2, #33	@ 0x21
 800b826:	2104      	movs	r1, #4
 800b828:	4620      	mov	r0, r4
 800b82a:	f000 fec8 	bl	800c5be <_calloc_r>
 800b82e:	69e3      	ldr	r3, [r4, #28]
 800b830:	60f0      	str	r0, [r6, #12]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1e4      	bne.n	800b802 <_Balloc+0x2e>
 800b838:	2000      	movs	r0, #0
 800b83a:	bd70      	pop	{r4, r5, r6, pc}
 800b83c:	6802      	ldr	r2, [r0, #0]
 800b83e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b842:	2300      	movs	r3, #0
 800b844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b848:	e7f7      	b.n	800b83a <_Balloc+0x66>
 800b84a:	bf00      	nop
 800b84c:	0800cd04 	.word	0x0800cd04
 800b850:	0800ce8f 	.word	0x0800ce8f

0800b854 <_Bfree>:
 800b854:	b570      	push	{r4, r5, r6, lr}
 800b856:	69c6      	ldr	r6, [r0, #28]
 800b858:	4605      	mov	r5, r0
 800b85a:	460c      	mov	r4, r1
 800b85c:	b976      	cbnz	r6, 800b87c <_Bfree+0x28>
 800b85e:	2010      	movs	r0, #16
 800b860:	f7ff fef0 	bl	800b644 <malloc>
 800b864:	4602      	mov	r2, r0
 800b866:	61e8      	str	r0, [r5, #28]
 800b868:	b920      	cbnz	r0, 800b874 <_Bfree+0x20>
 800b86a:	218f      	movs	r1, #143	@ 0x8f
 800b86c:	4b08      	ldr	r3, [pc, #32]	@ (800b890 <_Bfree+0x3c>)
 800b86e:	4809      	ldr	r0, [pc, #36]	@ (800b894 <_Bfree+0x40>)
 800b870:	f7fe fcf8 	bl	800a264 <__assert_func>
 800b874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b878:	6006      	str	r6, [r0, #0]
 800b87a:	60c6      	str	r6, [r0, #12]
 800b87c:	b13c      	cbz	r4, 800b88e <_Bfree+0x3a>
 800b87e:	69eb      	ldr	r3, [r5, #28]
 800b880:	6862      	ldr	r2, [r4, #4]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b888:	6021      	str	r1, [r4, #0]
 800b88a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b88e:	bd70      	pop	{r4, r5, r6, pc}
 800b890:	0800cd04 	.word	0x0800cd04
 800b894:	0800ce8f 	.word	0x0800ce8f

0800b898 <__multadd>:
 800b898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b89c:	4607      	mov	r7, r0
 800b89e:	460c      	mov	r4, r1
 800b8a0:	461e      	mov	r6, r3
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	690d      	ldr	r5, [r1, #16]
 800b8a6:	f101 0c14 	add.w	ip, r1, #20
 800b8aa:	f8dc 3000 	ldr.w	r3, [ip]
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	b299      	uxth	r1, r3
 800b8b2:	fb02 6101 	mla	r1, r2, r1, r6
 800b8b6:	0c1e      	lsrs	r6, r3, #16
 800b8b8:	0c0b      	lsrs	r3, r1, #16
 800b8ba:	fb02 3306 	mla	r3, r2, r6, r3
 800b8be:	b289      	uxth	r1, r1
 800b8c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8c4:	4285      	cmp	r5, r0
 800b8c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8ca:	f84c 1b04 	str.w	r1, [ip], #4
 800b8ce:	dcec      	bgt.n	800b8aa <__multadd+0x12>
 800b8d0:	b30e      	cbz	r6, 800b916 <__multadd+0x7e>
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	42ab      	cmp	r3, r5
 800b8d6:	dc19      	bgt.n	800b90c <__multadd+0x74>
 800b8d8:	6861      	ldr	r1, [r4, #4]
 800b8da:	4638      	mov	r0, r7
 800b8dc:	3101      	adds	r1, #1
 800b8de:	f7ff ff79 	bl	800b7d4 <_Balloc>
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	b928      	cbnz	r0, 800b8f2 <__multadd+0x5a>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	21ba      	movs	r1, #186	@ 0xba
 800b8ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b91c <__multadd+0x84>)
 800b8ec:	480c      	ldr	r0, [pc, #48]	@ (800b920 <__multadd+0x88>)
 800b8ee:	f7fe fcb9 	bl	800a264 <__assert_func>
 800b8f2:	6922      	ldr	r2, [r4, #16]
 800b8f4:	f104 010c 	add.w	r1, r4, #12
 800b8f8:	3202      	adds	r2, #2
 800b8fa:	0092      	lsls	r2, r2, #2
 800b8fc:	300c      	adds	r0, #12
 800b8fe:	f7fe fc9c 	bl	800a23a <memcpy>
 800b902:	4621      	mov	r1, r4
 800b904:	4638      	mov	r0, r7
 800b906:	f7ff ffa5 	bl	800b854 <_Bfree>
 800b90a:	4644      	mov	r4, r8
 800b90c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b910:	3501      	adds	r5, #1
 800b912:	615e      	str	r6, [r3, #20]
 800b914:	6125      	str	r5, [r4, #16]
 800b916:	4620      	mov	r0, r4
 800b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91c:	0800ce1e 	.word	0x0800ce1e
 800b920:	0800ce8f 	.word	0x0800ce8f

0800b924 <__s2b>:
 800b924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b928:	4615      	mov	r5, r2
 800b92a:	2209      	movs	r2, #9
 800b92c:	461f      	mov	r7, r3
 800b92e:	3308      	adds	r3, #8
 800b930:	460c      	mov	r4, r1
 800b932:	fb93 f3f2 	sdiv	r3, r3, r2
 800b936:	4606      	mov	r6, r0
 800b938:	2201      	movs	r2, #1
 800b93a:	2100      	movs	r1, #0
 800b93c:	429a      	cmp	r2, r3
 800b93e:	db09      	blt.n	800b954 <__s2b+0x30>
 800b940:	4630      	mov	r0, r6
 800b942:	f7ff ff47 	bl	800b7d4 <_Balloc>
 800b946:	b940      	cbnz	r0, 800b95a <__s2b+0x36>
 800b948:	4602      	mov	r2, r0
 800b94a:	21d3      	movs	r1, #211	@ 0xd3
 800b94c:	4b18      	ldr	r3, [pc, #96]	@ (800b9b0 <__s2b+0x8c>)
 800b94e:	4819      	ldr	r0, [pc, #100]	@ (800b9b4 <__s2b+0x90>)
 800b950:	f7fe fc88 	bl	800a264 <__assert_func>
 800b954:	0052      	lsls	r2, r2, #1
 800b956:	3101      	adds	r1, #1
 800b958:	e7f0      	b.n	800b93c <__s2b+0x18>
 800b95a:	9b08      	ldr	r3, [sp, #32]
 800b95c:	2d09      	cmp	r5, #9
 800b95e:	6143      	str	r3, [r0, #20]
 800b960:	f04f 0301 	mov.w	r3, #1
 800b964:	6103      	str	r3, [r0, #16]
 800b966:	dd16      	ble.n	800b996 <__s2b+0x72>
 800b968:	f104 0909 	add.w	r9, r4, #9
 800b96c:	46c8      	mov	r8, r9
 800b96e:	442c      	add	r4, r5
 800b970:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b974:	4601      	mov	r1, r0
 800b976:	220a      	movs	r2, #10
 800b978:	4630      	mov	r0, r6
 800b97a:	3b30      	subs	r3, #48	@ 0x30
 800b97c:	f7ff ff8c 	bl	800b898 <__multadd>
 800b980:	45a0      	cmp	r8, r4
 800b982:	d1f5      	bne.n	800b970 <__s2b+0x4c>
 800b984:	f1a5 0408 	sub.w	r4, r5, #8
 800b988:	444c      	add	r4, r9
 800b98a:	1b2d      	subs	r5, r5, r4
 800b98c:	1963      	adds	r3, r4, r5
 800b98e:	42bb      	cmp	r3, r7
 800b990:	db04      	blt.n	800b99c <__s2b+0x78>
 800b992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b996:	2509      	movs	r5, #9
 800b998:	340a      	adds	r4, #10
 800b99a:	e7f6      	b.n	800b98a <__s2b+0x66>
 800b99c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	220a      	movs	r2, #10
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	3b30      	subs	r3, #48	@ 0x30
 800b9a8:	f7ff ff76 	bl	800b898 <__multadd>
 800b9ac:	e7ee      	b.n	800b98c <__s2b+0x68>
 800b9ae:	bf00      	nop
 800b9b0:	0800ce1e 	.word	0x0800ce1e
 800b9b4:	0800ce8f 	.word	0x0800ce8f

0800b9b8 <__hi0bits>:
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9be:	bf3a      	itte	cc
 800b9c0:	0403      	lslcc	r3, r0, #16
 800b9c2:	2010      	movcc	r0, #16
 800b9c4:	2000      	movcs	r0, #0
 800b9c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9ca:	bf3c      	itt	cc
 800b9cc:	021b      	lslcc	r3, r3, #8
 800b9ce:	3008      	addcc	r0, #8
 800b9d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9d4:	bf3c      	itt	cc
 800b9d6:	011b      	lslcc	r3, r3, #4
 800b9d8:	3004      	addcc	r0, #4
 800b9da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9de:	bf3c      	itt	cc
 800b9e0:	009b      	lslcc	r3, r3, #2
 800b9e2:	3002      	addcc	r0, #2
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	db05      	blt.n	800b9f4 <__hi0bits+0x3c>
 800b9e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9ec:	f100 0001 	add.w	r0, r0, #1
 800b9f0:	bf08      	it	eq
 800b9f2:	2020      	moveq	r0, #32
 800b9f4:	4770      	bx	lr

0800b9f6 <__lo0bits>:
 800b9f6:	6803      	ldr	r3, [r0, #0]
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	f013 0007 	ands.w	r0, r3, #7
 800b9fe:	d00b      	beq.n	800ba18 <__lo0bits+0x22>
 800ba00:	07d9      	lsls	r1, r3, #31
 800ba02:	d421      	bmi.n	800ba48 <__lo0bits+0x52>
 800ba04:	0798      	lsls	r0, r3, #30
 800ba06:	bf49      	itett	mi
 800ba08:	085b      	lsrmi	r3, r3, #1
 800ba0a:	089b      	lsrpl	r3, r3, #2
 800ba0c:	2001      	movmi	r0, #1
 800ba0e:	6013      	strmi	r3, [r2, #0]
 800ba10:	bf5c      	itt	pl
 800ba12:	2002      	movpl	r0, #2
 800ba14:	6013      	strpl	r3, [r2, #0]
 800ba16:	4770      	bx	lr
 800ba18:	b299      	uxth	r1, r3
 800ba1a:	b909      	cbnz	r1, 800ba20 <__lo0bits+0x2a>
 800ba1c:	2010      	movs	r0, #16
 800ba1e:	0c1b      	lsrs	r3, r3, #16
 800ba20:	b2d9      	uxtb	r1, r3
 800ba22:	b909      	cbnz	r1, 800ba28 <__lo0bits+0x32>
 800ba24:	3008      	adds	r0, #8
 800ba26:	0a1b      	lsrs	r3, r3, #8
 800ba28:	0719      	lsls	r1, r3, #28
 800ba2a:	bf04      	itt	eq
 800ba2c:	091b      	lsreq	r3, r3, #4
 800ba2e:	3004      	addeq	r0, #4
 800ba30:	0799      	lsls	r1, r3, #30
 800ba32:	bf04      	itt	eq
 800ba34:	089b      	lsreq	r3, r3, #2
 800ba36:	3002      	addeq	r0, #2
 800ba38:	07d9      	lsls	r1, r3, #31
 800ba3a:	d403      	bmi.n	800ba44 <__lo0bits+0x4e>
 800ba3c:	085b      	lsrs	r3, r3, #1
 800ba3e:	f100 0001 	add.w	r0, r0, #1
 800ba42:	d003      	beq.n	800ba4c <__lo0bits+0x56>
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	4770      	bx	lr
 800ba48:	2000      	movs	r0, #0
 800ba4a:	4770      	bx	lr
 800ba4c:	2020      	movs	r0, #32
 800ba4e:	4770      	bx	lr

0800ba50 <__i2b>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	460c      	mov	r4, r1
 800ba54:	2101      	movs	r1, #1
 800ba56:	f7ff febd 	bl	800b7d4 <_Balloc>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	b928      	cbnz	r0, 800ba6a <__i2b+0x1a>
 800ba5e:	f240 1145 	movw	r1, #325	@ 0x145
 800ba62:	4b04      	ldr	r3, [pc, #16]	@ (800ba74 <__i2b+0x24>)
 800ba64:	4804      	ldr	r0, [pc, #16]	@ (800ba78 <__i2b+0x28>)
 800ba66:	f7fe fbfd 	bl	800a264 <__assert_func>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	6144      	str	r4, [r0, #20]
 800ba6e:	6103      	str	r3, [r0, #16]
 800ba70:	bd10      	pop	{r4, pc}
 800ba72:	bf00      	nop
 800ba74:	0800ce1e 	.word	0x0800ce1e
 800ba78:	0800ce8f 	.word	0x0800ce8f

0800ba7c <__multiply>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	4614      	mov	r4, r2
 800ba82:	690a      	ldr	r2, [r1, #16]
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	460f      	mov	r7, r1
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	bfa2      	ittt	ge
 800ba8c:	4623      	movge	r3, r4
 800ba8e:	460c      	movge	r4, r1
 800ba90:	461f      	movge	r7, r3
 800ba92:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba96:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba9a:	68a3      	ldr	r3, [r4, #8]
 800ba9c:	6861      	ldr	r1, [r4, #4]
 800ba9e:	eb0a 0609 	add.w	r6, sl, r9
 800baa2:	42b3      	cmp	r3, r6
 800baa4:	b085      	sub	sp, #20
 800baa6:	bfb8      	it	lt
 800baa8:	3101      	addlt	r1, #1
 800baaa:	f7ff fe93 	bl	800b7d4 <_Balloc>
 800baae:	b930      	cbnz	r0, 800babe <__multiply+0x42>
 800bab0:	4602      	mov	r2, r0
 800bab2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bab6:	4b43      	ldr	r3, [pc, #268]	@ (800bbc4 <__multiply+0x148>)
 800bab8:	4843      	ldr	r0, [pc, #268]	@ (800bbc8 <__multiply+0x14c>)
 800baba:	f7fe fbd3 	bl	800a264 <__assert_func>
 800babe:	f100 0514 	add.w	r5, r0, #20
 800bac2:	462b      	mov	r3, r5
 800bac4:	2200      	movs	r2, #0
 800bac6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800baca:	4543      	cmp	r3, r8
 800bacc:	d321      	bcc.n	800bb12 <__multiply+0x96>
 800bace:	f107 0114 	add.w	r1, r7, #20
 800bad2:	f104 0214 	add.w	r2, r4, #20
 800bad6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bada:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bade:	9302      	str	r3, [sp, #8]
 800bae0:	1b13      	subs	r3, r2, r4
 800bae2:	3b15      	subs	r3, #21
 800bae4:	f023 0303 	bic.w	r3, r3, #3
 800bae8:	3304      	adds	r3, #4
 800baea:	f104 0715 	add.w	r7, r4, #21
 800baee:	42ba      	cmp	r2, r7
 800baf0:	bf38      	it	cc
 800baf2:	2304      	movcc	r3, #4
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	9b02      	ldr	r3, [sp, #8]
 800baf8:	9103      	str	r1, [sp, #12]
 800bafa:	428b      	cmp	r3, r1
 800bafc:	d80c      	bhi.n	800bb18 <__multiply+0x9c>
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	dd03      	ble.n	800bb0a <__multiply+0x8e>
 800bb02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d05a      	beq.n	800bbc0 <__multiply+0x144>
 800bb0a:	6106      	str	r6, [r0, #16]
 800bb0c:	b005      	add	sp, #20
 800bb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb12:	f843 2b04 	str.w	r2, [r3], #4
 800bb16:	e7d8      	b.n	800baca <__multiply+0x4e>
 800bb18:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb1c:	f1ba 0f00 	cmp.w	sl, #0
 800bb20:	d023      	beq.n	800bb6a <__multiply+0xee>
 800bb22:	46a9      	mov	r9, r5
 800bb24:	f04f 0c00 	mov.w	ip, #0
 800bb28:	f104 0e14 	add.w	lr, r4, #20
 800bb2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb30:	f8d9 3000 	ldr.w	r3, [r9]
 800bb34:	fa1f fb87 	uxth.w	fp, r7
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb3e:	4463      	add	r3, ip
 800bb40:	f8d9 c000 	ldr.w	ip, [r9]
 800bb44:	0c3f      	lsrs	r7, r7, #16
 800bb46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bb4a:	fb0a c707 	mla	r7, sl, r7, ip
 800bb4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb58:	4572      	cmp	r2, lr
 800bb5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb5e:	f849 3b04 	str.w	r3, [r9], #4
 800bb62:	d8e3      	bhi.n	800bb2c <__multiply+0xb0>
 800bb64:	9b01      	ldr	r3, [sp, #4]
 800bb66:	f845 c003 	str.w	ip, [r5, r3]
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	3104      	adds	r1, #4
 800bb6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb72:	f1b9 0f00 	cmp.w	r9, #0
 800bb76:	d021      	beq.n	800bbbc <__multiply+0x140>
 800bb78:	46ae      	mov	lr, r5
 800bb7a:	f04f 0a00 	mov.w	sl, #0
 800bb7e:	682b      	ldr	r3, [r5, #0]
 800bb80:	f104 0c14 	add.w	ip, r4, #20
 800bb84:	f8bc b000 	ldrh.w	fp, [ip]
 800bb88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	fb09 770b 	mla	r7, r9, fp, r7
 800bb92:	4457      	add	r7, sl
 800bb94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb98:	f84e 3b04 	str.w	r3, [lr], #4
 800bb9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bba0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bba4:	f8be 3000 	ldrh.w	r3, [lr]
 800bba8:	4562      	cmp	r2, ip
 800bbaa:	fb09 330a 	mla	r3, r9, sl, r3
 800bbae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bbb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbb6:	d8e5      	bhi.n	800bb84 <__multiply+0x108>
 800bbb8:	9f01      	ldr	r7, [sp, #4]
 800bbba:	51eb      	str	r3, [r5, r7]
 800bbbc:	3504      	adds	r5, #4
 800bbbe:	e79a      	b.n	800baf6 <__multiply+0x7a>
 800bbc0:	3e01      	subs	r6, #1
 800bbc2:	e79c      	b.n	800bafe <__multiply+0x82>
 800bbc4:	0800ce1e 	.word	0x0800ce1e
 800bbc8:	0800ce8f 	.word	0x0800ce8f

0800bbcc <__pow5mult>:
 800bbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd0:	4615      	mov	r5, r2
 800bbd2:	f012 0203 	ands.w	r2, r2, #3
 800bbd6:	4607      	mov	r7, r0
 800bbd8:	460e      	mov	r6, r1
 800bbda:	d007      	beq.n	800bbec <__pow5mult+0x20>
 800bbdc:	4c25      	ldr	r4, [pc, #148]	@ (800bc74 <__pow5mult+0xa8>)
 800bbde:	3a01      	subs	r2, #1
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbe6:	f7ff fe57 	bl	800b898 <__multadd>
 800bbea:	4606      	mov	r6, r0
 800bbec:	10ad      	asrs	r5, r5, #2
 800bbee:	d03d      	beq.n	800bc6c <__pow5mult+0xa0>
 800bbf0:	69fc      	ldr	r4, [r7, #28]
 800bbf2:	b97c      	cbnz	r4, 800bc14 <__pow5mult+0x48>
 800bbf4:	2010      	movs	r0, #16
 800bbf6:	f7ff fd25 	bl	800b644 <malloc>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	61f8      	str	r0, [r7, #28]
 800bbfe:	b928      	cbnz	r0, 800bc0c <__pow5mult+0x40>
 800bc00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc04:	4b1c      	ldr	r3, [pc, #112]	@ (800bc78 <__pow5mult+0xac>)
 800bc06:	481d      	ldr	r0, [pc, #116]	@ (800bc7c <__pow5mult+0xb0>)
 800bc08:	f7fe fb2c 	bl	800a264 <__assert_func>
 800bc0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc10:	6004      	str	r4, [r0, #0]
 800bc12:	60c4      	str	r4, [r0, #12]
 800bc14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc1c:	b94c      	cbnz	r4, 800bc32 <__pow5mult+0x66>
 800bc1e:	f240 2171 	movw	r1, #625	@ 0x271
 800bc22:	4638      	mov	r0, r7
 800bc24:	f7ff ff14 	bl	800ba50 <__i2b>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc30:	6003      	str	r3, [r0, #0]
 800bc32:	f04f 0900 	mov.w	r9, #0
 800bc36:	07eb      	lsls	r3, r5, #31
 800bc38:	d50a      	bpl.n	800bc50 <__pow5mult+0x84>
 800bc3a:	4631      	mov	r1, r6
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	4638      	mov	r0, r7
 800bc40:	f7ff ff1c 	bl	800ba7c <__multiply>
 800bc44:	4680      	mov	r8, r0
 800bc46:	4631      	mov	r1, r6
 800bc48:	4638      	mov	r0, r7
 800bc4a:	f7ff fe03 	bl	800b854 <_Bfree>
 800bc4e:	4646      	mov	r6, r8
 800bc50:	106d      	asrs	r5, r5, #1
 800bc52:	d00b      	beq.n	800bc6c <__pow5mult+0xa0>
 800bc54:	6820      	ldr	r0, [r4, #0]
 800bc56:	b938      	cbnz	r0, 800bc68 <__pow5mult+0x9c>
 800bc58:	4622      	mov	r2, r4
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7ff ff0d 	bl	800ba7c <__multiply>
 800bc62:	6020      	str	r0, [r4, #0]
 800bc64:	f8c0 9000 	str.w	r9, [r0]
 800bc68:	4604      	mov	r4, r0
 800bc6a:	e7e4      	b.n	800bc36 <__pow5mult+0x6a>
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc72:	bf00      	nop
 800bc74:	0800cee8 	.word	0x0800cee8
 800bc78:	0800cd04 	.word	0x0800cd04
 800bc7c:	0800ce8f 	.word	0x0800ce8f

0800bc80 <__lshift>:
 800bc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc84:	460c      	mov	r4, r1
 800bc86:	4607      	mov	r7, r0
 800bc88:	4691      	mov	r9, r2
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	6849      	ldr	r1, [r1, #4]
 800bc8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc92:	68a3      	ldr	r3, [r4, #8]
 800bc94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc98:	f108 0601 	add.w	r6, r8, #1
 800bc9c:	42b3      	cmp	r3, r6
 800bc9e:	db0b      	blt.n	800bcb8 <__lshift+0x38>
 800bca0:	4638      	mov	r0, r7
 800bca2:	f7ff fd97 	bl	800b7d4 <_Balloc>
 800bca6:	4605      	mov	r5, r0
 800bca8:	b948      	cbnz	r0, 800bcbe <__lshift+0x3e>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcb0:	4b27      	ldr	r3, [pc, #156]	@ (800bd50 <__lshift+0xd0>)
 800bcb2:	4828      	ldr	r0, [pc, #160]	@ (800bd54 <__lshift+0xd4>)
 800bcb4:	f7fe fad6 	bl	800a264 <__assert_func>
 800bcb8:	3101      	adds	r1, #1
 800bcba:	005b      	lsls	r3, r3, #1
 800bcbc:	e7ee      	b.n	800bc9c <__lshift+0x1c>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f100 0114 	add.w	r1, r0, #20
 800bcc4:	f100 0210 	add.w	r2, r0, #16
 800bcc8:	4618      	mov	r0, r3
 800bcca:	4553      	cmp	r3, sl
 800bccc:	db33      	blt.n	800bd36 <__lshift+0xb6>
 800bcce:	6920      	ldr	r0, [r4, #16]
 800bcd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcd4:	f104 0314 	add.w	r3, r4, #20
 800bcd8:	f019 091f 	ands.w	r9, r9, #31
 800bcdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bce0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bce4:	d02b      	beq.n	800bd3e <__lshift+0xbe>
 800bce6:	468a      	mov	sl, r1
 800bce8:	2200      	movs	r2, #0
 800bcea:	f1c9 0e20 	rsb	lr, r9, #32
 800bcee:	6818      	ldr	r0, [r3, #0]
 800bcf0:	fa00 f009 	lsl.w	r0, r0, r9
 800bcf4:	4310      	orrs	r0, r2
 800bcf6:	f84a 0b04 	str.w	r0, [sl], #4
 800bcfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcfe:	459c      	cmp	ip, r3
 800bd00:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd04:	d8f3      	bhi.n	800bcee <__lshift+0x6e>
 800bd06:	ebac 0304 	sub.w	r3, ip, r4
 800bd0a:	3b15      	subs	r3, #21
 800bd0c:	f023 0303 	bic.w	r3, r3, #3
 800bd10:	3304      	adds	r3, #4
 800bd12:	f104 0015 	add.w	r0, r4, #21
 800bd16:	4584      	cmp	ip, r0
 800bd18:	bf38      	it	cc
 800bd1a:	2304      	movcc	r3, #4
 800bd1c:	50ca      	str	r2, [r1, r3]
 800bd1e:	b10a      	cbz	r2, 800bd24 <__lshift+0xa4>
 800bd20:	f108 0602 	add.w	r6, r8, #2
 800bd24:	3e01      	subs	r6, #1
 800bd26:	4638      	mov	r0, r7
 800bd28:	4621      	mov	r1, r4
 800bd2a:	612e      	str	r6, [r5, #16]
 800bd2c:	f7ff fd92 	bl	800b854 <_Bfree>
 800bd30:	4628      	mov	r0, r5
 800bd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd36:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	e7c5      	b.n	800bcca <__lshift+0x4a>
 800bd3e:	3904      	subs	r1, #4
 800bd40:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd44:	459c      	cmp	ip, r3
 800bd46:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd4a:	d8f9      	bhi.n	800bd40 <__lshift+0xc0>
 800bd4c:	e7ea      	b.n	800bd24 <__lshift+0xa4>
 800bd4e:	bf00      	nop
 800bd50:	0800ce1e 	.word	0x0800ce1e
 800bd54:	0800ce8f 	.word	0x0800ce8f

0800bd58 <__mcmp>:
 800bd58:	4603      	mov	r3, r0
 800bd5a:	690a      	ldr	r2, [r1, #16]
 800bd5c:	6900      	ldr	r0, [r0, #16]
 800bd5e:	b530      	push	{r4, r5, lr}
 800bd60:	1a80      	subs	r0, r0, r2
 800bd62:	d10e      	bne.n	800bd82 <__mcmp+0x2a>
 800bd64:	3314      	adds	r3, #20
 800bd66:	3114      	adds	r1, #20
 800bd68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd78:	4295      	cmp	r5, r2
 800bd7a:	d003      	beq.n	800bd84 <__mcmp+0x2c>
 800bd7c:	d205      	bcs.n	800bd8a <__mcmp+0x32>
 800bd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd82:	bd30      	pop	{r4, r5, pc}
 800bd84:	42a3      	cmp	r3, r4
 800bd86:	d3f3      	bcc.n	800bd70 <__mcmp+0x18>
 800bd88:	e7fb      	b.n	800bd82 <__mcmp+0x2a>
 800bd8a:	2001      	movs	r0, #1
 800bd8c:	e7f9      	b.n	800bd82 <__mcmp+0x2a>
	...

0800bd90 <__mdiff>:
 800bd90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	4689      	mov	r9, r1
 800bd96:	4606      	mov	r6, r0
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4648      	mov	r0, r9
 800bd9c:	4614      	mov	r4, r2
 800bd9e:	f7ff ffdb 	bl	800bd58 <__mcmp>
 800bda2:	1e05      	subs	r5, r0, #0
 800bda4:	d112      	bne.n	800bdcc <__mdiff+0x3c>
 800bda6:	4629      	mov	r1, r5
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f7ff fd13 	bl	800b7d4 <_Balloc>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	b928      	cbnz	r0, 800bdbe <__mdiff+0x2e>
 800bdb2:	f240 2137 	movw	r1, #567	@ 0x237
 800bdb6:	4b3e      	ldr	r3, [pc, #248]	@ (800beb0 <__mdiff+0x120>)
 800bdb8:	483e      	ldr	r0, [pc, #248]	@ (800beb4 <__mdiff+0x124>)
 800bdba:	f7fe fa53 	bl	800a264 <__assert_func>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	b003      	add	sp, #12
 800bdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdcc:	bfbc      	itt	lt
 800bdce:	464b      	movlt	r3, r9
 800bdd0:	46a1      	movlt	r9, r4
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdd8:	bfba      	itte	lt
 800bdda:	461c      	movlt	r4, r3
 800bddc:	2501      	movlt	r5, #1
 800bdde:	2500      	movge	r5, #0
 800bde0:	f7ff fcf8 	bl	800b7d4 <_Balloc>
 800bde4:	4602      	mov	r2, r0
 800bde6:	b918      	cbnz	r0, 800bdf0 <__mdiff+0x60>
 800bde8:	f240 2145 	movw	r1, #581	@ 0x245
 800bdec:	4b30      	ldr	r3, [pc, #192]	@ (800beb0 <__mdiff+0x120>)
 800bdee:	e7e3      	b.n	800bdb8 <__mdiff+0x28>
 800bdf0:	f100 0b14 	add.w	fp, r0, #20
 800bdf4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bdf8:	f109 0310 	add.w	r3, r9, #16
 800bdfc:	60c5      	str	r5, [r0, #12]
 800bdfe:	f04f 0c00 	mov.w	ip, #0
 800be02:	f109 0514 	add.w	r5, r9, #20
 800be06:	46d9      	mov	r9, fp
 800be08:	6926      	ldr	r6, [r4, #16]
 800be0a:	f104 0e14 	add.w	lr, r4, #20
 800be0e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be12:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	9b01      	ldr	r3, [sp, #4]
 800be1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be22:	b281      	uxth	r1, r0
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	fa1f f38a 	uxth.w	r3, sl
 800be2a:	1a5b      	subs	r3, r3, r1
 800be2c:	0c00      	lsrs	r0, r0, #16
 800be2e:	4463      	add	r3, ip
 800be30:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be34:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be38:	b29b      	uxth	r3, r3
 800be3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be3e:	4576      	cmp	r6, lr
 800be40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be44:	f849 3b04 	str.w	r3, [r9], #4
 800be48:	d8e6      	bhi.n	800be18 <__mdiff+0x88>
 800be4a:	1b33      	subs	r3, r6, r4
 800be4c:	3b15      	subs	r3, #21
 800be4e:	f023 0303 	bic.w	r3, r3, #3
 800be52:	3415      	adds	r4, #21
 800be54:	3304      	adds	r3, #4
 800be56:	42a6      	cmp	r6, r4
 800be58:	bf38      	it	cc
 800be5a:	2304      	movcc	r3, #4
 800be5c:	441d      	add	r5, r3
 800be5e:	445b      	add	r3, fp
 800be60:	461e      	mov	r6, r3
 800be62:	462c      	mov	r4, r5
 800be64:	4544      	cmp	r4, r8
 800be66:	d30e      	bcc.n	800be86 <__mdiff+0xf6>
 800be68:	f108 0103 	add.w	r1, r8, #3
 800be6c:	1b49      	subs	r1, r1, r5
 800be6e:	f021 0103 	bic.w	r1, r1, #3
 800be72:	3d03      	subs	r5, #3
 800be74:	45a8      	cmp	r8, r5
 800be76:	bf38      	it	cc
 800be78:	2100      	movcc	r1, #0
 800be7a:	440b      	add	r3, r1
 800be7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be80:	b199      	cbz	r1, 800beaa <__mdiff+0x11a>
 800be82:	6117      	str	r7, [r2, #16]
 800be84:	e79e      	b.n	800bdc4 <__mdiff+0x34>
 800be86:	46e6      	mov	lr, ip
 800be88:	f854 1b04 	ldr.w	r1, [r4], #4
 800be8c:	fa1f fc81 	uxth.w	ip, r1
 800be90:	44f4      	add	ip, lr
 800be92:	0c08      	lsrs	r0, r1, #16
 800be94:	4471      	add	r1, lr
 800be96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be9a:	b289      	uxth	r1, r1
 800be9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bea0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bea4:	f846 1b04 	str.w	r1, [r6], #4
 800bea8:	e7dc      	b.n	800be64 <__mdiff+0xd4>
 800beaa:	3f01      	subs	r7, #1
 800beac:	e7e6      	b.n	800be7c <__mdiff+0xec>
 800beae:	bf00      	nop
 800beb0:	0800ce1e 	.word	0x0800ce1e
 800beb4:	0800ce8f 	.word	0x0800ce8f

0800beb8 <__ulp>:
 800beb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bef4 <__ulp+0x3c>)
 800beba:	400b      	ands	r3, r1
 800bebc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	dc08      	bgt.n	800bed6 <__ulp+0x1e>
 800bec4:	425b      	negs	r3, r3
 800bec6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800beca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bece:	da04      	bge.n	800beda <__ulp+0x22>
 800bed0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bed4:	4113      	asrs	r3, r2
 800bed6:	2200      	movs	r2, #0
 800bed8:	e008      	b.n	800beec <__ulp+0x34>
 800beda:	f1a2 0314 	sub.w	r3, r2, #20
 800bede:	2b1e      	cmp	r3, #30
 800bee0:	bfd6      	itet	le
 800bee2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bee6:	2201      	movgt	r2, #1
 800bee8:	40da      	lsrle	r2, r3
 800beea:	2300      	movs	r3, #0
 800beec:	4619      	mov	r1, r3
 800beee:	4610      	mov	r0, r2
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	7ff00000 	.word	0x7ff00000

0800bef8 <__b2d>:
 800bef8:	6902      	ldr	r2, [r0, #16]
 800befa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befc:	f100 0614 	add.w	r6, r0, #20
 800bf00:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800bf04:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800bf08:	4f1e      	ldr	r7, [pc, #120]	@ (800bf84 <__b2d+0x8c>)
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f7ff fd54 	bl	800b9b8 <__hi0bits>
 800bf10:	4603      	mov	r3, r0
 800bf12:	f1c0 0020 	rsb	r0, r0, #32
 800bf16:	2b0a      	cmp	r3, #10
 800bf18:	f1a2 0504 	sub.w	r5, r2, #4
 800bf1c:	6008      	str	r0, [r1, #0]
 800bf1e:	dc12      	bgt.n	800bf46 <__b2d+0x4e>
 800bf20:	42ae      	cmp	r6, r5
 800bf22:	bf2c      	ite	cs
 800bf24:	2200      	movcs	r2, #0
 800bf26:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bf2a:	f1c3 0c0b 	rsb	ip, r3, #11
 800bf2e:	3315      	adds	r3, #21
 800bf30:	fa24 fe0c 	lsr.w	lr, r4, ip
 800bf34:	fa04 f303 	lsl.w	r3, r4, r3
 800bf38:	fa22 f20c 	lsr.w	r2, r2, ip
 800bf3c:	ea4e 0107 	orr.w	r1, lr, r7
 800bf40:	431a      	orrs	r2, r3
 800bf42:	4610      	mov	r0, r2
 800bf44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf46:	42ae      	cmp	r6, r5
 800bf48:	bf36      	itet	cc
 800bf4a:	f1a2 0508 	subcc.w	r5, r2, #8
 800bf4e:	2200      	movcs	r2, #0
 800bf50:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bf54:	3b0b      	subs	r3, #11
 800bf56:	d012      	beq.n	800bf7e <__b2d+0x86>
 800bf58:	f1c3 0720 	rsb	r7, r3, #32
 800bf5c:	fa22 f107 	lsr.w	r1, r2, r7
 800bf60:	409c      	lsls	r4, r3
 800bf62:	430c      	orrs	r4, r1
 800bf64:	42b5      	cmp	r5, r6
 800bf66:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800bf6a:	bf94      	ite	ls
 800bf6c:	2400      	movls	r4, #0
 800bf6e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800bf72:	409a      	lsls	r2, r3
 800bf74:	40fc      	lsrs	r4, r7
 800bf76:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bf7a:	4322      	orrs	r2, r4
 800bf7c:	e7e1      	b.n	800bf42 <__b2d+0x4a>
 800bf7e:	ea44 0107 	orr.w	r1, r4, r7
 800bf82:	e7de      	b.n	800bf42 <__b2d+0x4a>
 800bf84:	3ff00000 	.word	0x3ff00000

0800bf88 <__d2b>:
 800bf88:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	4690      	mov	r8, r2
 800bf90:	4699      	mov	r9, r3
 800bf92:	9e08      	ldr	r6, [sp, #32]
 800bf94:	f7ff fc1e 	bl	800b7d4 <_Balloc>
 800bf98:	4604      	mov	r4, r0
 800bf9a:	b930      	cbnz	r0, 800bfaa <__d2b+0x22>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	f240 310f 	movw	r1, #783	@ 0x30f
 800bfa2:	4b23      	ldr	r3, [pc, #140]	@ (800c030 <__d2b+0xa8>)
 800bfa4:	4823      	ldr	r0, [pc, #140]	@ (800c034 <__d2b+0xac>)
 800bfa6:	f7fe f95d 	bl	800a264 <__assert_func>
 800bfaa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfb2:	b10d      	cbz	r5, 800bfb8 <__d2b+0x30>
 800bfb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfb8:	9301      	str	r3, [sp, #4]
 800bfba:	f1b8 0300 	subs.w	r3, r8, #0
 800bfbe:	d024      	beq.n	800c00a <__d2b+0x82>
 800bfc0:	4668      	mov	r0, sp
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	f7ff fd17 	bl	800b9f6 <__lo0bits>
 800bfc8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfcc:	b1d8      	cbz	r0, 800c006 <__d2b+0x7e>
 800bfce:	f1c0 0320 	rsb	r3, r0, #32
 800bfd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd6:	430b      	orrs	r3, r1
 800bfd8:	40c2      	lsrs	r2, r0
 800bfda:	6163      	str	r3, [r4, #20]
 800bfdc:	9201      	str	r2, [sp, #4]
 800bfde:	9b01      	ldr	r3, [sp, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bf0c      	ite	eq
 800bfe4:	2201      	moveq	r2, #1
 800bfe6:	2202      	movne	r2, #2
 800bfe8:	61a3      	str	r3, [r4, #24]
 800bfea:	6122      	str	r2, [r4, #16]
 800bfec:	b1ad      	cbz	r5, 800c01a <__d2b+0x92>
 800bfee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bff2:	4405      	add	r5, r0
 800bff4:	6035      	str	r5, [r6, #0]
 800bff6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bffc:	6018      	str	r0, [r3, #0]
 800bffe:	4620      	mov	r0, r4
 800c000:	b002      	add	sp, #8
 800c002:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c006:	6161      	str	r1, [r4, #20]
 800c008:	e7e9      	b.n	800bfde <__d2b+0x56>
 800c00a:	a801      	add	r0, sp, #4
 800c00c:	f7ff fcf3 	bl	800b9f6 <__lo0bits>
 800c010:	9b01      	ldr	r3, [sp, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	6163      	str	r3, [r4, #20]
 800c016:	3020      	adds	r0, #32
 800c018:	e7e7      	b.n	800bfea <__d2b+0x62>
 800c01a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c01e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c022:	6030      	str	r0, [r6, #0]
 800c024:	6918      	ldr	r0, [r3, #16]
 800c026:	f7ff fcc7 	bl	800b9b8 <__hi0bits>
 800c02a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c02e:	e7e4      	b.n	800bffa <__d2b+0x72>
 800c030:	0800ce1e 	.word	0x0800ce1e
 800c034:	0800ce8f 	.word	0x0800ce8f

0800c038 <__ratio>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	b085      	sub	sp, #20
 800c03e:	e9cd 1000 	strd	r1, r0, [sp]
 800c042:	a902      	add	r1, sp, #8
 800c044:	f7ff ff58 	bl	800bef8 <__b2d>
 800c048:	468b      	mov	fp, r1
 800c04a:	4606      	mov	r6, r0
 800c04c:	460f      	mov	r7, r1
 800c04e:	9800      	ldr	r0, [sp, #0]
 800c050:	a903      	add	r1, sp, #12
 800c052:	f7ff ff51 	bl	800bef8 <__b2d>
 800c056:	460d      	mov	r5, r1
 800c058:	9b01      	ldr	r3, [sp, #4]
 800c05a:	4689      	mov	r9, r1
 800c05c:	6919      	ldr	r1, [r3, #16]
 800c05e:	9b00      	ldr	r3, [sp, #0]
 800c060:	4604      	mov	r4, r0
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	4630      	mov	r0, r6
 800c066:	1ac9      	subs	r1, r1, r3
 800c068:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c06c:	1a9b      	subs	r3, r3, r2
 800c06e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c072:	2b00      	cmp	r3, #0
 800c074:	bfcd      	iteet	gt
 800c076:	463a      	movgt	r2, r7
 800c078:	462a      	movle	r2, r5
 800c07a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c07e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c082:	bfd8      	it	le
 800c084:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c088:	464b      	mov	r3, r9
 800c08a:	4622      	mov	r2, r4
 800c08c:	4659      	mov	r1, fp
 800c08e:	f7f4 fb65 	bl	800075c <__aeabi_ddiv>
 800c092:	b005      	add	sp, #20
 800c094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c098 <__copybits>:
 800c098:	3901      	subs	r1, #1
 800c09a:	b570      	push	{r4, r5, r6, lr}
 800c09c:	1149      	asrs	r1, r1, #5
 800c09e:	6914      	ldr	r4, [r2, #16]
 800c0a0:	3101      	adds	r1, #1
 800c0a2:	f102 0314 	add.w	r3, r2, #20
 800c0a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c0aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0ae:	1f05      	subs	r5, r0, #4
 800c0b0:	42a3      	cmp	r3, r4
 800c0b2:	d30c      	bcc.n	800c0ce <__copybits+0x36>
 800c0b4:	1aa3      	subs	r3, r4, r2
 800c0b6:	3b11      	subs	r3, #17
 800c0b8:	f023 0303 	bic.w	r3, r3, #3
 800c0bc:	3211      	adds	r2, #17
 800c0be:	42a2      	cmp	r2, r4
 800c0c0:	bf88      	it	hi
 800c0c2:	2300      	movhi	r3, #0
 800c0c4:	4418      	add	r0, r3
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	4288      	cmp	r0, r1
 800c0ca:	d305      	bcc.n	800c0d8 <__copybits+0x40>
 800c0cc:	bd70      	pop	{r4, r5, r6, pc}
 800c0ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800c0d2:	f845 6f04 	str.w	r6, [r5, #4]!
 800c0d6:	e7eb      	b.n	800c0b0 <__copybits+0x18>
 800c0d8:	f840 3b04 	str.w	r3, [r0], #4
 800c0dc:	e7f4      	b.n	800c0c8 <__copybits+0x30>

0800c0de <__any_on>:
 800c0de:	f100 0214 	add.w	r2, r0, #20
 800c0e2:	6900      	ldr	r0, [r0, #16]
 800c0e4:	114b      	asrs	r3, r1, #5
 800c0e6:	4298      	cmp	r0, r3
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	db11      	blt.n	800c110 <__any_on+0x32>
 800c0ec:	dd0a      	ble.n	800c104 <__any_on+0x26>
 800c0ee:	f011 011f 	ands.w	r1, r1, #31
 800c0f2:	d007      	beq.n	800c104 <__any_on+0x26>
 800c0f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0f8:	fa24 f001 	lsr.w	r0, r4, r1
 800c0fc:	fa00 f101 	lsl.w	r1, r0, r1
 800c100:	428c      	cmp	r4, r1
 800c102:	d10b      	bne.n	800c11c <__any_on+0x3e>
 800c104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c108:	4293      	cmp	r3, r2
 800c10a:	d803      	bhi.n	800c114 <__any_on+0x36>
 800c10c:	2000      	movs	r0, #0
 800c10e:	bd10      	pop	{r4, pc}
 800c110:	4603      	mov	r3, r0
 800c112:	e7f7      	b.n	800c104 <__any_on+0x26>
 800c114:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c118:	2900      	cmp	r1, #0
 800c11a:	d0f5      	beq.n	800c108 <__any_on+0x2a>
 800c11c:	2001      	movs	r0, #1
 800c11e:	e7f6      	b.n	800c10e <__any_on+0x30>

0800c120 <__ascii_wctomb>:
 800c120:	4603      	mov	r3, r0
 800c122:	4608      	mov	r0, r1
 800c124:	b141      	cbz	r1, 800c138 <__ascii_wctomb+0x18>
 800c126:	2aff      	cmp	r2, #255	@ 0xff
 800c128:	d904      	bls.n	800c134 <__ascii_wctomb+0x14>
 800c12a:	228a      	movs	r2, #138	@ 0x8a
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	4770      	bx	lr
 800c134:	2001      	movs	r0, #1
 800c136:	700a      	strb	r2, [r1, #0]
 800c138:	4770      	bx	lr

0800c13a <__ssputs_r>:
 800c13a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c13e:	461f      	mov	r7, r3
 800c140:	688e      	ldr	r6, [r1, #8]
 800c142:	4682      	mov	sl, r0
 800c144:	42be      	cmp	r6, r7
 800c146:	460c      	mov	r4, r1
 800c148:	4690      	mov	r8, r2
 800c14a:	680b      	ldr	r3, [r1, #0]
 800c14c:	d82d      	bhi.n	800c1aa <__ssputs_r+0x70>
 800c14e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c152:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c156:	d026      	beq.n	800c1a6 <__ssputs_r+0x6c>
 800c158:	6965      	ldr	r5, [r4, #20]
 800c15a:	6909      	ldr	r1, [r1, #16]
 800c15c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c160:	eba3 0901 	sub.w	r9, r3, r1
 800c164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c168:	1c7b      	adds	r3, r7, #1
 800c16a:	444b      	add	r3, r9
 800c16c:	106d      	asrs	r5, r5, #1
 800c16e:	429d      	cmp	r5, r3
 800c170:	bf38      	it	cc
 800c172:	461d      	movcc	r5, r3
 800c174:	0553      	lsls	r3, r2, #21
 800c176:	d527      	bpl.n	800c1c8 <__ssputs_r+0x8e>
 800c178:	4629      	mov	r1, r5
 800c17a:	f7ff fa8d 	bl	800b698 <_malloc_r>
 800c17e:	4606      	mov	r6, r0
 800c180:	b360      	cbz	r0, 800c1dc <__ssputs_r+0xa2>
 800c182:	464a      	mov	r2, r9
 800c184:	6921      	ldr	r1, [r4, #16]
 800c186:	f7fe f858 	bl	800a23a <memcpy>
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	6126      	str	r6, [r4, #16]
 800c198:	444e      	add	r6, r9
 800c19a:	6026      	str	r6, [r4, #0]
 800c19c:	463e      	mov	r6, r7
 800c19e:	6165      	str	r5, [r4, #20]
 800c1a0:	eba5 0509 	sub.w	r5, r5, r9
 800c1a4:	60a5      	str	r5, [r4, #8]
 800c1a6:	42be      	cmp	r6, r7
 800c1a8:	d900      	bls.n	800c1ac <__ssputs_r+0x72>
 800c1aa:	463e      	mov	r6, r7
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	4641      	mov	r1, r8
 800c1b0:	6820      	ldr	r0, [r4, #0]
 800c1b2:	f000 f9d3 	bl	800c55c <memmove>
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	68a3      	ldr	r3, [r4, #8]
 800c1ba:	1b9b      	subs	r3, r3, r6
 800c1bc:	60a3      	str	r3, [r4, #8]
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	4433      	add	r3, r6
 800c1c2:	6023      	str	r3, [r4, #0]
 800c1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c8:	462a      	mov	r2, r5
 800c1ca:	f000 fa0c 	bl	800c5e6 <_realloc_r>
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d1e0      	bne.n	800c196 <__ssputs_r+0x5c>
 800c1d4:	4650      	mov	r0, sl
 800c1d6:	6921      	ldr	r1, [r4, #16]
 800c1d8:	f7fe feb2 	bl	800af40 <_free_r>
 800c1dc:	230c      	movs	r3, #12
 800c1de:	f8ca 3000 	str.w	r3, [sl]
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ec:	81a3      	strh	r3, [r4, #12]
 800c1ee:	e7e9      	b.n	800c1c4 <__ssputs_r+0x8a>

0800c1f0 <_svfiprintf_r>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	4698      	mov	r8, r3
 800c1f6:	898b      	ldrh	r3, [r1, #12]
 800c1f8:	4607      	mov	r7, r0
 800c1fa:	061b      	lsls	r3, r3, #24
 800c1fc:	460d      	mov	r5, r1
 800c1fe:	4614      	mov	r4, r2
 800c200:	b09d      	sub	sp, #116	@ 0x74
 800c202:	d510      	bpl.n	800c226 <_svfiprintf_r+0x36>
 800c204:	690b      	ldr	r3, [r1, #16]
 800c206:	b973      	cbnz	r3, 800c226 <_svfiprintf_r+0x36>
 800c208:	2140      	movs	r1, #64	@ 0x40
 800c20a:	f7ff fa45 	bl	800b698 <_malloc_r>
 800c20e:	6028      	str	r0, [r5, #0]
 800c210:	6128      	str	r0, [r5, #16]
 800c212:	b930      	cbnz	r0, 800c222 <_svfiprintf_r+0x32>
 800c214:	230c      	movs	r3, #12
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	f04f 30ff 	mov.w	r0, #4294967295
 800c21c:	b01d      	add	sp, #116	@ 0x74
 800c21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c222:	2340      	movs	r3, #64	@ 0x40
 800c224:	616b      	str	r3, [r5, #20]
 800c226:	2300      	movs	r3, #0
 800c228:	9309      	str	r3, [sp, #36]	@ 0x24
 800c22a:	2320      	movs	r3, #32
 800c22c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c230:	2330      	movs	r3, #48	@ 0x30
 800c232:	f04f 0901 	mov.w	r9, #1
 800c236:	f8cd 800c 	str.w	r8, [sp, #12]
 800c23a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c3d4 <_svfiprintf_r+0x1e4>
 800c23e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c242:	4623      	mov	r3, r4
 800c244:	469a      	mov	sl, r3
 800c246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c24a:	b10a      	cbz	r2, 800c250 <_svfiprintf_r+0x60>
 800c24c:	2a25      	cmp	r2, #37	@ 0x25
 800c24e:	d1f9      	bne.n	800c244 <_svfiprintf_r+0x54>
 800c250:	ebba 0b04 	subs.w	fp, sl, r4
 800c254:	d00b      	beq.n	800c26e <_svfiprintf_r+0x7e>
 800c256:	465b      	mov	r3, fp
 800c258:	4622      	mov	r2, r4
 800c25a:	4629      	mov	r1, r5
 800c25c:	4638      	mov	r0, r7
 800c25e:	f7ff ff6c 	bl	800c13a <__ssputs_r>
 800c262:	3001      	adds	r0, #1
 800c264:	f000 80a7 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c26a:	445a      	add	r2, fp
 800c26c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c26e:	f89a 3000 	ldrb.w	r3, [sl]
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 809f 	beq.w	800c3b6 <_svfiprintf_r+0x1c6>
 800c278:	2300      	movs	r3, #0
 800c27a:	f04f 32ff 	mov.w	r2, #4294967295
 800c27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c282:	f10a 0a01 	add.w	sl, sl, #1
 800c286:	9304      	str	r3, [sp, #16]
 800c288:	9307      	str	r3, [sp, #28]
 800c28a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c28e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c290:	4654      	mov	r4, sl
 800c292:	2205      	movs	r2, #5
 800c294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c298:	484e      	ldr	r0, [pc, #312]	@ (800c3d4 <_svfiprintf_r+0x1e4>)
 800c29a:	f7fd ffc0 	bl	800a21e <memchr>
 800c29e:	9a04      	ldr	r2, [sp, #16]
 800c2a0:	b9d8      	cbnz	r0, 800c2da <_svfiprintf_r+0xea>
 800c2a2:	06d0      	lsls	r0, r2, #27
 800c2a4:	bf44      	itt	mi
 800c2a6:	2320      	movmi	r3, #32
 800c2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2ac:	0711      	lsls	r1, r2, #28
 800c2ae:	bf44      	itt	mi
 800c2b0:	232b      	movmi	r3, #43	@ 0x2b
 800c2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2bc:	d015      	beq.n	800c2ea <_svfiprintf_r+0xfa>
 800c2be:	4654      	mov	r4, sl
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	f04f 0c0a 	mov.w	ip, #10
 800c2c6:	9a07      	ldr	r2, [sp, #28]
 800c2c8:	4621      	mov	r1, r4
 800c2ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ce:	3b30      	subs	r3, #48	@ 0x30
 800c2d0:	2b09      	cmp	r3, #9
 800c2d2:	d94b      	bls.n	800c36c <_svfiprintf_r+0x17c>
 800c2d4:	b1b0      	cbz	r0, 800c304 <_svfiprintf_r+0x114>
 800c2d6:	9207      	str	r2, [sp, #28]
 800c2d8:	e014      	b.n	800c304 <_svfiprintf_r+0x114>
 800c2da:	eba0 0308 	sub.w	r3, r0, r8
 800c2de:	fa09 f303 	lsl.w	r3, r9, r3
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	46a2      	mov	sl, r4
 800c2e6:	9304      	str	r3, [sp, #16]
 800c2e8:	e7d2      	b.n	800c290 <_svfiprintf_r+0xa0>
 800c2ea:	9b03      	ldr	r3, [sp, #12]
 800c2ec:	1d19      	adds	r1, r3, #4
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	9103      	str	r1, [sp, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	bfbb      	ittet	lt
 800c2f6:	425b      	neglt	r3, r3
 800c2f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c2fc:	9307      	strge	r3, [sp, #28]
 800c2fe:	9307      	strlt	r3, [sp, #28]
 800c300:	bfb8      	it	lt
 800c302:	9204      	strlt	r2, [sp, #16]
 800c304:	7823      	ldrb	r3, [r4, #0]
 800c306:	2b2e      	cmp	r3, #46	@ 0x2e
 800c308:	d10a      	bne.n	800c320 <_svfiprintf_r+0x130>
 800c30a:	7863      	ldrb	r3, [r4, #1]
 800c30c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c30e:	d132      	bne.n	800c376 <_svfiprintf_r+0x186>
 800c310:	9b03      	ldr	r3, [sp, #12]
 800c312:	3402      	adds	r4, #2
 800c314:	1d1a      	adds	r2, r3, #4
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	9203      	str	r2, [sp, #12]
 800c31a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c31e:	9305      	str	r3, [sp, #20]
 800c320:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c3d8 <_svfiprintf_r+0x1e8>
 800c324:	2203      	movs	r2, #3
 800c326:	4650      	mov	r0, sl
 800c328:	7821      	ldrb	r1, [r4, #0]
 800c32a:	f7fd ff78 	bl	800a21e <memchr>
 800c32e:	b138      	cbz	r0, 800c340 <_svfiprintf_r+0x150>
 800c330:	2240      	movs	r2, #64	@ 0x40
 800c332:	9b04      	ldr	r3, [sp, #16]
 800c334:	eba0 000a 	sub.w	r0, r0, sl
 800c338:	4082      	lsls	r2, r0
 800c33a:	4313      	orrs	r3, r2
 800c33c:	3401      	adds	r4, #1
 800c33e:	9304      	str	r3, [sp, #16]
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	2206      	movs	r2, #6
 800c346:	4825      	ldr	r0, [pc, #148]	@ (800c3dc <_svfiprintf_r+0x1ec>)
 800c348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c34c:	f7fd ff67 	bl	800a21e <memchr>
 800c350:	2800      	cmp	r0, #0
 800c352:	d036      	beq.n	800c3c2 <_svfiprintf_r+0x1d2>
 800c354:	4b22      	ldr	r3, [pc, #136]	@ (800c3e0 <_svfiprintf_r+0x1f0>)
 800c356:	bb1b      	cbnz	r3, 800c3a0 <_svfiprintf_r+0x1b0>
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	3307      	adds	r3, #7
 800c35c:	f023 0307 	bic.w	r3, r3, #7
 800c360:	3308      	adds	r3, #8
 800c362:	9303      	str	r3, [sp, #12]
 800c364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c366:	4433      	add	r3, r6
 800c368:	9309      	str	r3, [sp, #36]	@ 0x24
 800c36a:	e76a      	b.n	800c242 <_svfiprintf_r+0x52>
 800c36c:	460c      	mov	r4, r1
 800c36e:	2001      	movs	r0, #1
 800c370:	fb0c 3202 	mla	r2, ip, r2, r3
 800c374:	e7a8      	b.n	800c2c8 <_svfiprintf_r+0xd8>
 800c376:	2300      	movs	r3, #0
 800c378:	f04f 0c0a 	mov.w	ip, #10
 800c37c:	4619      	mov	r1, r3
 800c37e:	3401      	adds	r4, #1
 800c380:	9305      	str	r3, [sp, #20]
 800c382:	4620      	mov	r0, r4
 800c384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c388:	3a30      	subs	r2, #48	@ 0x30
 800c38a:	2a09      	cmp	r2, #9
 800c38c:	d903      	bls.n	800c396 <_svfiprintf_r+0x1a6>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0c6      	beq.n	800c320 <_svfiprintf_r+0x130>
 800c392:	9105      	str	r1, [sp, #20]
 800c394:	e7c4      	b.n	800c320 <_svfiprintf_r+0x130>
 800c396:	4604      	mov	r4, r0
 800c398:	2301      	movs	r3, #1
 800c39a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c39e:	e7f0      	b.n	800c382 <_svfiprintf_r+0x192>
 800c3a0:	ab03      	add	r3, sp, #12
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c3e4 <_svfiprintf_r+0x1f4>)
 800c3aa:	a904      	add	r1, sp, #16
 800c3ac:	f7fd f92a 	bl	8009604 <_printf_float>
 800c3b0:	1c42      	adds	r2, r0, #1
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	d1d6      	bne.n	800c364 <_svfiprintf_r+0x174>
 800c3b6:	89ab      	ldrh	r3, [r5, #12]
 800c3b8:	065b      	lsls	r3, r3, #25
 800c3ba:	f53f af2d 	bmi.w	800c218 <_svfiprintf_r+0x28>
 800c3be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3c0:	e72c      	b.n	800c21c <_svfiprintf_r+0x2c>
 800c3c2:	ab03      	add	r3, sp, #12
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	462a      	mov	r2, r5
 800c3c8:	4638      	mov	r0, r7
 800c3ca:	4b06      	ldr	r3, [pc, #24]	@ (800c3e4 <_svfiprintf_r+0x1f4>)
 800c3cc:	a904      	add	r1, sp, #16
 800c3ce:	f7fd fbb7 	bl	8009b40 <_printf_i>
 800c3d2:	e7ed      	b.n	800c3b0 <_svfiprintf_r+0x1c0>
 800c3d4:	0800d0e9 	.word	0x0800d0e9
 800c3d8:	0800d0ef 	.word	0x0800d0ef
 800c3dc:	0800d0f3 	.word	0x0800d0f3
 800c3e0:	08009605 	.word	0x08009605
 800c3e4:	0800c13b 	.word	0x0800c13b

0800c3e8 <__sflush_r>:
 800c3e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ee:	0716      	lsls	r6, r2, #28
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	d454      	bmi.n	800c4a0 <__sflush_r+0xb8>
 800c3f6:	684b      	ldr	r3, [r1, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	dc02      	bgt.n	800c402 <__sflush_r+0x1a>
 800c3fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dd48      	ble.n	800c494 <__sflush_r+0xac>
 800c402:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c404:	2e00      	cmp	r6, #0
 800c406:	d045      	beq.n	800c494 <__sflush_r+0xac>
 800c408:	2300      	movs	r3, #0
 800c40a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c40e:	682f      	ldr	r7, [r5, #0]
 800c410:	6a21      	ldr	r1, [r4, #32]
 800c412:	602b      	str	r3, [r5, #0]
 800c414:	d030      	beq.n	800c478 <__sflush_r+0x90>
 800c416:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c418:	89a3      	ldrh	r3, [r4, #12]
 800c41a:	0759      	lsls	r1, r3, #29
 800c41c:	d505      	bpl.n	800c42a <__sflush_r+0x42>
 800c41e:	6863      	ldr	r3, [r4, #4]
 800c420:	1ad2      	subs	r2, r2, r3
 800c422:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c424:	b10b      	cbz	r3, 800c42a <__sflush_r+0x42>
 800c426:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c428:	1ad2      	subs	r2, r2, r3
 800c42a:	2300      	movs	r3, #0
 800c42c:	4628      	mov	r0, r5
 800c42e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c430:	6a21      	ldr	r1, [r4, #32]
 800c432:	47b0      	blx	r6
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	d106      	bne.n	800c448 <__sflush_r+0x60>
 800c43a:	6829      	ldr	r1, [r5, #0]
 800c43c:	291d      	cmp	r1, #29
 800c43e:	d82b      	bhi.n	800c498 <__sflush_r+0xb0>
 800c440:	4a28      	ldr	r2, [pc, #160]	@ (800c4e4 <__sflush_r+0xfc>)
 800c442:	410a      	asrs	r2, r1
 800c444:	07d6      	lsls	r6, r2, #31
 800c446:	d427      	bmi.n	800c498 <__sflush_r+0xb0>
 800c448:	2200      	movs	r2, #0
 800c44a:	6062      	str	r2, [r4, #4]
 800c44c:	6922      	ldr	r2, [r4, #16]
 800c44e:	04d9      	lsls	r1, r3, #19
 800c450:	6022      	str	r2, [r4, #0]
 800c452:	d504      	bpl.n	800c45e <__sflush_r+0x76>
 800c454:	1c42      	adds	r2, r0, #1
 800c456:	d101      	bne.n	800c45c <__sflush_r+0x74>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	b903      	cbnz	r3, 800c45e <__sflush_r+0x76>
 800c45c:	6560      	str	r0, [r4, #84]	@ 0x54
 800c45e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c460:	602f      	str	r7, [r5, #0]
 800c462:	b1b9      	cbz	r1, 800c494 <__sflush_r+0xac>
 800c464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c468:	4299      	cmp	r1, r3
 800c46a:	d002      	beq.n	800c472 <__sflush_r+0x8a>
 800c46c:	4628      	mov	r0, r5
 800c46e:	f7fe fd67 	bl	800af40 <_free_r>
 800c472:	2300      	movs	r3, #0
 800c474:	6363      	str	r3, [r4, #52]	@ 0x34
 800c476:	e00d      	b.n	800c494 <__sflush_r+0xac>
 800c478:	2301      	movs	r3, #1
 800c47a:	4628      	mov	r0, r5
 800c47c:	47b0      	blx	r6
 800c47e:	4602      	mov	r2, r0
 800c480:	1c50      	adds	r0, r2, #1
 800c482:	d1c9      	bne.n	800c418 <__sflush_r+0x30>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d0c6      	beq.n	800c418 <__sflush_r+0x30>
 800c48a:	2b1d      	cmp	r3, #29
 800c48c:	d001      	beq.n	800c492 <__sflush_r+0xaa>
 800c48e:	2b16      	cmp	r3, #22
 800c490:	d11d      	bne.n	800c4ce <__sflush_r+0xe6>
 800c492:	602f      	str	r7, [r5, #0]
 800c494:	2000      	movs	r0, #0
 800c496:	e021      	b.n	800c4dc <__sflush_r+0xf4>
 800c498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c49c:	b21b      	sxth	r3, r3
 800c49e:	e01a      	b.n	800c4d6 <__sflush_r+0xee>
 800c4a0:	690f      	ldr	r7, [r1, #16]
 800c4a2:	2f00      	cmp	r7, #0
 800c4a4:	d0f6      	beq.n	800c494 <__sflush_r+0xac>
 800c4a6:	0793      	lsls	r3, r2, #30
 800c4a8:	bf18      	it	ne
 800c4aa:	2300      	movne	r3, #0
 800c4ac:	680e      	ldr	r6, [r1, #0]
 800c4ae:	bf08      	it	eq
 800c4b0:	694b      	ldreq	r3, [r1, #20]
 800c4b2:	1bf6      	subs	r6, r6, r7
 800c4b4:	600f      	str	r7, [r1, #0]
 800c4b6:	608b      	str	r3, [r1, #8]
 800c4b8:	2e00      	cmp	r6, #0
 800c4ba:	ddeb      	ble.n	800c494 <__sflush_r+0xac>
 800c4bc:	4633      	mov	r3, r6
 800c4be:	463a      	mov	r2, r7
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	6a21      	ldr	r1, [r4, #32]
 800c4c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c4c8:	47e0      	blx	ip
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	dc07      	bgt.n	800c4de <__sflush_r+0xf6>
 800c4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4de:	4407      	add	r7, r0
 800c4e0:	1a36      	subs	r6, r6, r0
 800c4e2:	e7e9      	b.n	800c4b8 <__sflush_r+0xd0>
 800c4e4:	dfbffffe 	.word	0xdfbffffe

0800c4e8 <_fflush_r>:
 800c4e8:	b538      	push	{r3, r4, r5, lr}
 800c4ea:	690b      	ldr	r3, [r1, #16]
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	b913      	cbnz	r3, 800c4f8 <_fflush_r+0x10>
 800c4f2:	2500      	movs	r5, #0
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	bd38      	pop	{r3, r4, r5, pc}
 800c4f8:	b118      	cbz	r0, 800c502 <_fflush_r+0x1a>
 800c4fa:	6a03      	ldr	r3, [r0, #32]
 800c4fc:	b90b      	cbnz	r3, 800c502 <_fflush_r+0x1a>
 800c4fe:	f7fd fccb 	bl	8009e98 <__sinit>
 800c502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0f3      	beq.n	800c4f2 <_fflush_r+0xa>
 800c50a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c50c:	07d0      	lsls	r0, r2, #31
 800c50e:	d404      	bmi.n	800c51a <_fflush_r+0x32>
 800c510:	0599      	lsls	r1, r3, #22
 800c512:	d402      	bmi.n	800c51a <_fflush_r+0x32>
 800c514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c516:	f7fd fe80 	bl	800a21a <__retarget_lock_acquire_recursive>
 800c51a:	4628      	mov	r0, r5
 800c51c:	4621      	mov	r1, r4
 800c51e:	f7ff ff63 	bl	800c3e8 <__sflush_r>
 800c522:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c524:	4605      	mov	r5, r0
 800c526:	07da      	lsls	r2, r3, #31
 800c528:	d4e4      	bmi.n	800c4f4 <_fflush_r+0xc>
 800c52a:	89a3      	ldrh	r3, [r4, #12]
 800c52c:	059b      	lsls	r3, r3, #22
 800c52e:	d4e1      	bmi.n	800c4f4 <_fflush_r+0xc>
 800c530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c532:	f7fd fe73 	bl	800a21c <__retarget_lock_release_recursive>
 800c536:	e7dd      	b.n	800c4f4 <_fflush_r+0xc>

0800c538 <fiprintf>:
 800c538:	b40e      	push	{r1, r2, r3}
 800c53a:	b503      	push	{r0, r1, lr}
 800c53c:	4601      	mov	r1, r0
 800c53e:	ab03      	add	r3, sp, #12
 800c540:	4805      	ldr	r0, [pc, #20]	@ (800c558 <fiprintf+0x20>)
 800c542:	f853 2b04 	ldr.w	r2, [r3], #4
 800c546:	6800      	ldr	r0, [r0, #0]
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	f000 f8a1 	bl	800c690 <_vfiprintf_r>
 800c54e:	b002      	add	sp, #8
 800c550:	f85d eb04 	ldr.w	lr, [sp], #4
 800c554:	b003      	add	sp, #12
 800c556:	4770      	bx	lr
 800c558:	200002fc 	.word	0x200002fc

0800c55c <memmove>:
 800c55c:	4288      	cmp	r0, r1
 800c55e:	b510      	push	{r4, lr}
 800c560:	eb01 0402 	add.w	r4, r1, r2
 800c564:	d902      	bls.n	800c56c <memmove+0x10>
 800c566:	4284      	cmp	r4, r0
 800c568:	4623      	mov	r3, r4
 800c56a:	d807      	bhi.n	800c57c <memmove+0x20>
 800c56c:	1e43      	subs	r3, r0, #1
 800c56e:	42a1      	cmp	r1, r4
 800c570:	d008      	beq.n	800c584 <memmove+0x28>
 800c572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c57a:	e7f8      	b.n	800c56e <memmove+0x12>
 800c57c:	4601      	mov	r1, r0
 800c57e:	4402      	add	r2, r0
 800c580:	428a      	cmp	r2, r1
 800c582:	d100      	bne.n	800c586 <memmove+0x2a>
 800c584:	bd10      	pop	{r4, pc}
 800c586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c58a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c58e:	e7f7      	b.n	800c580 <memmove+0x24>

0800c590 <_sbrk_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	2300      	movs	r3, #0
 800c594:	4d05      	ldr	r5, [pc, #20]	@ (800c5ac <_sbrk_r+0x1c>)
 800c596:	4604      	mov	r4, r0
 800c598:	4608      	mov	r0, r1
 800c59a:	602b      	str	r3, [r5, #0]
 800c59c:	f7f6 fd44 	bl	8003028 <_sbrk>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_sbrk_r+0x1a>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_sbrk_r+0x1a>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	2000116c 	.word	0x2000116c

0800c5b0 <abort>:
 800c5b0:	2006      	movs	r0, #6
 800c5b2:	b508      	push	{r3, lr}
 800c5b4:	f000 fa40 	bl	800ca38 <raise>
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	f7f6 fcc0 	bl	8002f3e <_exit>

0800c5be <_calloc_r>:
 800c5be:	b570      	push	{r4, r5, r6, lr}
 800c5c0:	fba1 5402 	umull	r5, r4, r1, r2
 800c5c4:	b93c      	cbnz	r4, 800c5d6 <_calloc_r+0x18>
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	f7ff f866 	bl	800b698 <_malloc_r>
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	b928      	cbnz	r0, 800c5dc <_calloc_r+0x1e>
 800c5d0:	2600      	movs	r6, #0
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	bd70      	pop	{r4, r5, r6, pc}
 800c5d6:	220c      	movs	r2, #12
 800c5d8:	6002      	str	r2, [r0, #0]
 800c5da:	e7f9      	b.n	800c5d0 <_calloc_r+0x12>
 800c5dc:	462a      	mov	r2, r5
 800c5de:	4621      	mov	r1, r4
 800c5e0:	f7fd fd07 	bl	8009ff2 <memset>
 800c5e4:	e7f5      	b.n	800c5d2 <_calloc_r+0x14>

0800c5e6 <_realloc_r>:
 800c5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ea:	4680      	mov	r8, r0
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	b921      	cbnz	r1, 800c5fc <_realloc_r+0x16>
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f8:	f7ff b84e 	b.w	800b698 <_malloc_r>
 800c5fc:	b92a      	cbnz	r2, 800c60a <_realloc_r+0x24>
 800c5fe:	f7fe fc9f 	bl	800af40 <_free_r>
 800c602:	2400      	movs	r4, #0
 800c604:	4620      	mov	r0, r4
 800c606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60a:	f000 fa31 	bl	800ca70 <_malloc_usable_size_r>
 800c60e:	4285      	cmp	r5, r0
 800c610:	4606      	mov	r6, r0
 800c612:	d802      	bhi.n	800c61a <_realloc_r+0x34>
 800c614:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c618:	d8f4      	bhi.n	800c604 <_realloc_r+0x1e>
 800c61a:	4629      	mov	r1, r5
 800c61c:	4640      	mov	r0, r8
 800c61e:	f7ff f83b 	bl	800b698 <_malloc_r>
 800c622:	4607      	mov	r7, r0
 800c624:	2800      	cmp	r0, #0
 800c626:	d0ec      	beq.n	800c602 <_realloc_r+0x1c>
 800c628:	42b5      	cmp	r5, r6
 800c62a:	462a      	mov	r2, r5
 800c62c:	4621      	mov	r1, r4
 800c62e:	bf28      	it	cs
 800c630:	4632      	movcs	r2, r6
 800c632:	f7fd fe02 	bl	800a23a <memcpy>
 800c636:	4621      	mov	r1, r4
 800c638:	4640      	mov	r0, r8
 800c63a:	f7fe fc81 	bl	800af40 <_free_r>
 800c63e:	463c      	mov	r4, r7
 800c640:	e7e0      	b.n	800c604 <_realloc_r+0x1e>

0800c642 <__sfputc_r>:
 800c642:	6893      	ldr	r3, [r2, #8]
 800c644:	b410      	push	{r4}
 800c646:	3b01      	subs	r3, #1
 800c648:	2b00      	cmp	r3, #0
 800c64a:	6093      	str	r3, [r2, #8]
 800c64c:	da07      	bge.n	800c65e <__sfputc_r+0x1c>
 800c64e:	6994      	ldr	r4, [r2, #24]
 800c650:	42a3      	cmp	r3, r4
 800c652:	db01      	blt.n	800c658 <__sfputc_r+0x16>
 800c654:	290a      	cmp	r1, #10
 800c656:	d102      	bne.n	800c65e <__sfputc_r+0x1c>
 800c658:	bc10      	pop	{r4}
 800c65a:	f000 b931 	b.w	800c8c0 <__swbuf_r>
 800c65e:	6813      	ldr	r3, [r2, #0]
 800c660:	1c58      	adds	r0, r3, #1
 800c662:	6010      	str	r0, [r2, #0]
 800c664:	7019      	strb	r1, [r3, #0]
 800c666:	4608      	mov	r0, r1
 800c668:	bc10      	pop	{r4}
 800c66a:	4770      	bx	lr

0800c66c <__sfputs_r>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	4606      	mov	r6, r0
 800c670:	460f      	mov	r7, r1
 800c672:	4614      	mov	r4, r2
 800c674:	18d5      	adds	r5, r2, r3
 800c676:	42ac      	cmp	r4, r5
 800c678:	d101      	bne.n	800c67e <__sfputs_r+0x12>
 800c67a:	2000      	movs	r0, #0
 800c67c:	e007      	b.n	800c68e <__sfputs_r+0x22>
 800c67e:	463a      	mov	r2, r7
 800c680:	4630      	mov	r0, r6
 800c682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c686:	f7ff ffdc 	bl	800c642 <__sfputc_r>
 800c68a:	1c43      	adds	r3, r0, #1
 800c68c:	d1f3      	bne.n	800c676 <__sfputs_r+0xa>
 800c68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c690 <_vfiprintf_r>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	460d      	mov	r5, r1
 800c696:	4614      	mov	r4, r2
 800c698:	4698      	mov	r8, r3
 800c69a:	4606      	mov	r6, r0
 800c69c:	b09d      	sub	sp, #116	@ 0x74
 800c69e:	b118      	cbz	r0, 800c6a8 <_vfiprintf_r+0x18>
 800c6a0:	6a03      	ldr	r3, [r0, #32]
 800c6a2:	b90b      	cbnz	r3, 800c6a8 <_vfiprintf_r+0x18>
 800c6a4:	f7fd fbf8 	bl	8009e98 <__sinit>
 800c6a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6aa:	07d9      	lsls	r1, r3, #31
 800c6ac:	d405      	bmi.n	800c6ba <_vfiprintf_r+0x2a>
 800c6ae:	89ab      	ldrh	r3, [r5, #12]
 800c6b0:	059a      	lsls	r2, r3, #22
 800c6b2:	d402      	bmi.n	800c6ba <_vfiprintf_r+0x2a>
 800c6b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6b6:	f7fd fdb0 	bl	800a21a <__retarget_lock_acquire_recursive>
 800c6ba:	89ab      	ldrh	r3, [r5, #12]
 800c6bc:	071b      	lsls	r3, r3, #28
 800c6be:	d501      	bpl.n	800c6c4 <_vfiprintf_r+0x34>
 800c6c0:	692b      	ldr	r3, [r5, #16]
 800c6c2:	b99b      	cbnz	r3, 800c6ec <_vfiprintf_r+0x5c>
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	f000 f938 	bl	800c93c <__swsetup_r>
 800c6cc:	b170      	cbz	r0, 800c6ec <_vfiprintf_r+0x5c>
 800c6ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6d0:	07dc      	lsls	r4, r3, #31
 800c6d2:	d504      	bpl.n	800c6de <_vfiprintf_r+0x4e>
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d8:	b01d      	add	sp, #116	@ 0x74
 800c6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6de:	89ab      	ldrh	r3, [r5, #12]
 800c6e0:	0598      	lsls	r0, r3, #22
 800c6e2:	d4f7      	bmi.n	800c6d4 <_vfiprintf_r+0x44>
 800c6e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6e6:	f7fd fd99 	bl	800a21c <__retarget_lock_release_recursive>
 800c6ea:	e7f3      	b.n	800c6d4 <_vfiprintf_r+0x44>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f0:	2320      	movs	r3, #32
 800c6f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6f6:	2330      	movs	r3, #48	@ 0x30
 800c6f8:	f04f 0901 	mov.w	r9, #1
 800c6fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c700:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c8ac <_vfiprintf_r+0x21c>
 800c704:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c708:	4623      	mov	r3, r4
 800c70a:	469a      	mov	sl, r3
 800c70c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c710:	b10a      	cbz	r2, 800c716 <_vfiprintf_r+0x86>
 800c712:	2a25      	cmp	r2, #37	@ 0x25
 800c714:	d1f9      	bne.n	800c70a <_vfiprintf_r+0x7a>
 800c716:	ebba 0b04 	subs.w	fp, sl, r4
 800c71a:	d00b      	beq.n	800c734 <_vfiprintf_r+0xa4>
 800c71c:	465b      	mov	r3, fp
 800c71e:	4622      	mov	r2, r4
 800c720:	4629      	mov	r1, r5
 800c722:	4630      	mov	r0, r6
 800c724:	f7ff ffa2 	bl	800c66c <__sfputs_r>
 800c728:	3001      	adds	r0, #1
 800c72a:	f000 80a7 	beq.w	800c87c <_vfiprintf_r+0x1ec>
 800c72e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c730:	445a      	add	r2, fp
 800c732:	9209      	str	r2, [sp, #36]	@ 0x24
 800c734:	f89a 3000 	ldrb.w	r3, [sl]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f000 809f 	beq.w	800c87c <_vfiprintf_r+0x1ec>
 800c73e:	2300      	movs	r3, #0
 800c740:	f04f 32ff 	mov.w	r2, #4294967295
 800c744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c748:	f10a 0a01 	add.w	sl, sl, #1
 800c74c:	9304      	str	r3, [sp, #16]
 800c74e:	9307      	str	r3, [sp, #28]
 800c750:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c754:	931a      	str	r3, [sp, #104]	@ 0x68
 800c756:	4654      	mov	r4, sl
 800c758:	2205      	movs	r2, #5
 800c75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75e:	4853      	ldr	r0, [pc, #332]	@ (800c8ac <_vfiprintf_r+0x21c>)
 800c760:	f7fd fd5d 	bl	800a21e <memchr>
 800c764:	9a04      	ldr	r2, [sp, #16]
 800c766:	b9d8      	cbnz	r0, 800c7a0 <_vfiprintf_r+0x110>
 800c768:	06d1      	lsls	r1, r2, #27
 800c76a:	bf44      	itt	mi
 800c76c:	2320      	movmi	r3, #32
 800c76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c772:	0713      	lsls	r3, r2, #28
 800c774:	bf44      	itt	mi
 800c776:	232b      	movmi	r3, #43	@ 0x2b
 800c778:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c77c:	f89a 3000 	ldrb.w	r3, [sl]
 800c780:	2b2a      	cmp	r3, #42	@ 0x2a
 800c782:	d015      	beq.n	800c7b0 <_vfiprintf_r+0x120>
 800c784:	4654      	mov	r4, sl
 800c786:	2000      	movs	r0, #0
 800c788:	f04f 0c0a 	mov.w	ip, #10
 800c78c:	9a07      	ldr	r2, [sp, #28]
 800c78e:	4621      	mov	r1, r4
 800c790:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c794:	3b30      	subs	r3, #48	@ 0x30
 800c796:	2b09      	cmp	r3, #9
 800c798:	d94b      	bls.n	800c832 <_vfiprintf_r+0x1a2>
 800c79a:	b1b0      	cbz	r0, 800c7ca <_vfiprintf_r+0x13a>
 800c79c:	9207      	str	r2, [sp, #28]
 800c79e:	e014      	b.n	800c7ca <_vfiprintf_r+0x13a>
 800c7a0:	eba0 0308 	sub.w	r3, r0, r8
 800c7a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	46a2      	mov	sl, r4
 800c7ac:	9304      	str	r3, [sp, #16]
 800c7ae:	e7d2      	b.n	800c756 <_vfiprintf_r+0xc6>
 800c7b0:	9b03      	ldr	r3, [sp, #12]
 800c7b2:	1d19      	adds	r1, r3, #4
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	9103      	str	r1, [sp, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	bfbb      	ittet	lt
 800c7bc:	425b      	neglt	r3, r3
 800c7be:	f042 0202 	orrlt.w	r2, r2, #2
 800c7c2:	9307      	strge	r3, [sp, #28]
 800c7c4:	9307      	strlt	r3, [sp, #28]
 800c7c6:	bfb8      	it	lt
 800c7c8:	9204      	strlt	r2, [sp, #16]
 800c7ca:	7823      	ldrb	r3, [r4, #0]
 800c7cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7ce:	d10a      	bne.n	800c7e6 <_vfiprintf_r+0x156>
 800c7d0:	7863      	ldrb	r3, [r4, #1]
 800c7d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7d4:	d132      	bne.n	800c83c <_vfiprintf_r+0x1ac>
 800c7d6:	9b03      	ldr	r3, [sp, #12]
 800c7d8:	3402      	adds	r4, #2
 800c7da:	1d1a      	adds	r2, r3, #4
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	9203      	str	r2, [sp, #12]
 800c7e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7e4:	9305      	str	r3, [sp, #20]
 800c7e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c8b0 <_vfiprintf_r+0x220>
 800c7ea:	2203      	movs	r2, #3
 800c7ec:	4650      	mov	r0, sl
 800c7ee:	7821      	ldrb	r1, [r4, #0]
 800c7f0:	f7fd fd15 	bl	800a21e <memchr>
 800c7f4:	b138      	cbz	r0, 800c806 <_vfiprintf_r+0x176>
 800c7f6:	2240      	movs	r2, #64	@ 0x40
 800c7f8:	9b04      	ldr	r3, [sp, #16]
 800c7fa:	eba0 000a 	sub.w	r0, r0, sl
 800c7fe:	4082      	lsls	r2, r0
 800c800:	4313      	orrs	r3, r2
 800c802:	3401      	adds	r4, #1
 800c804:	9304      	str	r3, [sp, #16]
 800c806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c80a:	2206      	movs	r2, #6
 800c80c:	4829      	ldr	r0, [pc, #164]	@ (800c8b4 <_vfiprintf_r+0x224>)
 800c80e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c812:	f7fd fd04 	bl	800a21e <memchr>
 800c816:	2800      	cmp	r0, #0
 800c818:	d03f      	beq.n	800c89a <_vfiprintf_r+0x20a>
 800c81a:	4b27      	ldr	r3, [pc, #156]	@ (800c8b8 <_vfiprintf_r+0x228>)
 800c81c:	bb1b      	cbnz	r3, 800c866 <_vfiprintf_r+0x1d6>
 800c81e:	9b03      	ldr	r3, [sp, #12]
 800c820:	3307      	adds	r3, #7
 800c822:	f023 0307 	bic.w	r3, r3, #7
 800c826:	3308      	adds	r3, #8
 800c828:	9303      	str	r3, [sp, #12]
 800c82a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c82c:	443b      	add	r3, r7
 800c82e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c830:	e76a      	b.n	800c708 <_vfiprintf_r+0x78>
 800c832:	460c      	mov	r4, r1
 800c834:	2001      	movs	r0, #1
 800c836:	fb0c 3202 	mla	r2, ip, r2, r3
 800c83a:	e7a8      	b.n	800c78e <_vfiprintf_r+0xfe>
 800c83c:	2300      	movs	r3, #0
 800c83e:	f04f 0c0a 	mov.w	ip, #10
 800c842:	4619      	mov	r1, r3
 800c844:	3401      	adds	r4, #1
 800c846:	9305      	str	r3, [sp, #20]
 800c848:	4620      	mov	r0, r4
 800c84a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c84e:	3a30      	subs	r2, #48	@ 0x30
 800c850:	2a09      	cmp	r2, #9
 800c852:	d903      	bls.n	800c85c <_vfiprintf_r+0x1cc>
 800c854:	2b00      	cmp	r3, #0
 800c856:	d0c6      	beq.n	800c7e6 <_vfiprintf_r+0x156>
 800c858:	9105      	str	r1, [sp, #20]
 800c85a:	e7c4      	b.n	800c7e6 <_vfiprintf_r+0x156>
 800c85c:	4604      	mov	r4, r0
 800c85e:	2301      	movs	r3, #1
 800c860:	fb0c 2101 	mla	r1, ip, r1, r2
 800c864:	e7f0      	b.n	800c848 <_vfiprintf_r+0x1b8>
 800c866:	ab03      	add	r3, sp, #12
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	462a      	mov	r2, r5
 800c86c:	4630      	mov	r0, r6
 800c86e:	4b13      	ldr	r3, [pc, #76]	@ (800c8bc <_vfiprintf_r+0x22c>)
 800c870:	a904      	add	r1, sp, #16
 800c872:	f7fc fec7 	bl	8009604 <_printf_float>
 800c876:	4607      	mov	r7, r0
 800c878:	1c78      	adds	r0, r7, #1
 800c87a:	d1d6      	bne.n	800c82a <_vfiprintf_r+0x19a>
 800c87c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c87e:	07d9      	lsls	r1, r3, #31
 800c880:	d405      	bmi.n	800c88e <_vfiprintf_r+0x1fe>
 800c882:	89ab      	ldrh	r3, [r5, #12]
 800c884:	059a      	lsls	r2, r3, #22
 800c886:	d402      	bmi.n	800c88e <_vfiprintf_r+0x1fe>
 800c888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c88a:	f7fd fcc7 	bl	800a21c <__retarget_lock_release_recursive>
 800c88e:	89ab      	ldrh	r3, [r5, #12]
 800c890:	065b      	lsls	r3, r3, #25
 800c892:	f53f af1f 	bmi.w	800c6d4 <_vfiprintf_r+0x44>
 800c896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c898:	e71e      	b.n	800c6d8 <_vfiprintf_r+0x48>
 800c89a:	ab03      	add	r3, sp, #12
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	462a      	mov	r2, r5
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4b06      	ldr	r3, [pc, #24]	@ (800c8bc <_vfiprintf_r+0x22c>)
 800c8a4:	a904      	add	r1, sp, #16
 800c8a6:	f7fd f94b 	bl	8009b40 <_printf_i>
 800c8aa:	e7e4      	b.n	800c876 <_vfiprintf_r+0x1e6>
 800c8ac:	0800d0e9 	.word	0x0800d0e9
 800c8b0:	0800d0ef 	.word	0x0800d0ef
 800c8b4:	0800d0f3 	.word	0x0800d0f3
 800c8b8:	08009605 	.word	0x08009605
 800c8bc:	0800c66d 	.word	0x0800c66d

0800c8c0 <__swbuf_r>:
 800c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c2:	460e      	mov	r6, r1
 800c8c4:	4614      	mov	r4, r2
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	b118      	cbz	r0, 800c8d2 <__swbuf_r+0x12>
 800c8ca:	6a03      	ldr	r3, [r0, #32]
 800c8cc:	b90b      	cbnz	r3, 800c8d2 <__swbuf_r+0x12>
 800c8ce:	f7fd fae3 	bl	8009e98 <__sinit>
 800c8d2:	69a3      	ldr	r3, [r4, #24]
 800c8d4:	60a3      	str	r3, [r4, #8]
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	071a      	lsls	r2, r3, #28
 800c8da:	d501      	bpl.n	800c8e0 <__swbuf_r+0x20>
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	b943      	cbnz	r3, 800c8f2 <__swbuf_r+0x32>
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f000 f82a 	bl	800c93c <__swsetup_r>
 800c8e8:	b118      	cbz	r0, 800c8f2 <__swbuf_r+0x32>
 800c8ea:	f04f 37ff 	mov.w	r7, #4294967295
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8f2:	6823      	ldr	r3, [r4, #0]
 800c8f4:	6922      	ldr	r2, [r4, #16]
 800c8f6:	b2f6      	uxtb	r6, r6
 800c8f8:	1a98      	subs	r0, r3, r2
 800c8fa:	6963      	ldr	r3, [r4, #20]
 800c8fc:	4637      	mov	r7, r6
 800c8fe:	4283      	cmp	r3, r0
 800c900:	dc05      	bgt.n	800c90e <__swbuf_r+0x4e>
 800c902:	4621      	mov	r1, r4
 800c904:	4628      	mov	r0, r5
 800c906:	f7ff fdef 	bl	800c4e8 <_fflush_r>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d1ed      	bne.n	800c8ea <__swbuf_r+0x2a>
 800c90e:	68a3      	ldr	r3, [r4, #8]
 800c910:	3b01      	subs	r3, #1
 800c912:	60a3      	str	r3, [r4, #8]
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	6022      	str	r2, [r4, #0]
 800c91a:	701e      	strb	r6, [r3, #0]
 800c91c:	6962      	ldr	r2, [r4, #20]
 800c91e:	1c43      	adds	r3, r0, #1
 800c920:	429a      	cmp	r2, r3
 800c922:	d004      	beq.n	800c92e <__swbuf_r+0x6e>
 800c924:	89a3      	ldrh	r3, [r4, #12]
 800c926:	07db      	lsls	r3, r3, #31
 800c928:	d5e1      	bpl.n	800c8ee <__swbuf_r+0x2e>
 800c92a:	2e0a      	cmp	r6, #10
 800c92c:	d1df      	bne.n	800c8ee <__swbuf_r+0x2e>
 800c92e:	4621      	mov	r1, r4
 800c930:	4628      	mov	r0, r5
 800c932:	f7ff fdd9 	bl	800c4e8 <_fflush_r>
 800c936:	2800      	cmp	r0, #0
 800c938:	d0d9      	beq.n	800c8ee <__swbuf_r+0x2e>
 800c93a:	e7d6      	b.n	800c8ea <__swbuf_r+0x2a>

0800c93c <__swsetup_r>:
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	4b29      	ldr	r3, [pc, #164]	@ (800c9e4 <__swsetup_r+0xa8>)
 800c940:	4605      	mov	r5, r0
 800c942:	6818      	ldr	r0, [r3, #0]
 800c944:	460c      	mov	r4, r1
 800c946:	b118      	cbz	r0, 800c950 <__swsetup_r+0x14>
 800c948:	6a03      	ldr	r3, [r0, #32]
 800c94a:	b90b      	cbnz	r3, 800c950 <__swsetup_r+0x14>
 800c94c:	f7fd faa4 	bl	8009e98 <__sinit>
 800c950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c954:	0719      	lsls	r1, r3, #28
 800c956:	d422      	bmi.n	800c99e <__swsetup_r+0x62>
 800c958:	06da      	lsls	r2, r3, #27
 800c95a:	d407      	bmi.n	800c96c <__swsetup_r+0x30>
 800c95c:	2209      	movs	r2, #9
 800c95e:	602a      	str	r2, [r5, #0]
 800c960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c964:	f04f 30ff 	mov.w	r0, #4294967295
 800c968:	81a3      	strh	r3, [r4, #12]
 800c96a:	e033      	b.n	800c9d4 <__swsetup_r+0x98>
 800c96c:	0758      	lsls	r0, r3, #29
 800c96e:	d512      	bpl.n	800c996 <__swsetup_r+0x5a>
 800c970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c972:	b141      	cbz	r1, 800c986 <__swsetup_r+0x4a>
 800c974:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c978:	4299      	cmp	r1, r3
 800c97a:	d002      	beq.n	800c982 <__swsetup_r+0x46>
 800c97c:	4628      	mov	r0, r5
 800c97e:	f7fe fadf 	bl	800af40 <_free_r>
 800c982:	2300      	movs	r3, #0
 800c984:	6363      	str	r3, [r4, #52]	@ 0x34
 800c986:	89a3      	ldrh	r3, [r4, #12]
 800c988:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c98c:	81a3      	strh	r3, [r4, #12]
 800c98e:	2300      	movs	r3, #0
 800c990:	6063      	str	r3, [r4, #4]
 800c992:	6923      	ldr	r3, [r4, #16]
 800c994:	6023      	str	r3, [r4, #0]
 800c996:	89a3      	ldrh	r3, [r4, #12]
 800c998:	f043 0308 	orr.w	r3, r3, #8
 800c99c:	81a3      	strh	r3, [r4, #12]
 800c99e:	6923      	ldr	r3, [r4, #16]
 800c9a0:	b94b      	cbnz	r3, 800c9b6 <__swsetup_r+0x7a>
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9ac:	d003      	beq.n	800c9b6 <__swsetup_r+0x7a>
 800c9ae:	4621      	mov	r1, r4
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f000 f88a 	bl	800caca <__smakebuf_r>
 800c9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ba:	f013 0201 	ands.w	r2, r3, #1
 800c9be:	d00a      	beq.n	800c9d6 <__swsetup_r+0x9a>
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	60a2      	str	r2, [r4, #8]
 800c9c4:	6962      	ldr	r2, [r4, #20]
 800c9c6:	4252      	negs	r2, r2
 800c9c8:	61a2      	str	r2, [r4, #24]
 800c9ca:	6922      	ldr	r2, [r4, #16]
 800c9cc:	b942      	cbnz	r2, 800c9e0 <__swsetup_r+0xa4>
 800c9ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c9d2:	d1c5      	bne.n	800c960 <__swsetup_r+0x24>
 800c9d4:	bd38      	pop	{r3, r4, r5, pc}
 800c9d6:	0799      	lsls	r1, r3, #30
 800c9d8:	bf58      	it	pl
 800c9da:	6962      	ldrpl	r2, [r4, #20]
 800c9dc:	60a2      	str	r2, [r4, #8]
 800c9de:	e7f4      	b.n	800c9ca <__swsetup_r+0x8e>
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	e7f7      	b.n	800c9d4 <__swsetup_r+0x98>
 800c9e4:	200002fc 	.word	0x200002fc

0800c9e8 <_raise_r>:
 800c9e8:	291f      	cmp	r1, #31
 800c9ea:	b538      	push	{r3, r4, r5, lr}
 800c9ec:	4605      	mov	r5, r0
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	d904      	bls.n	800c9fc <_raise_r+0x14>
 800c9f2:	2316      	movs	r3, #22
 800c9f4:	6003      	str	r3, [r0, #0]
 800c9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9fa:	bd38      	pop	{r3, r4, r5, pc}
 800c9fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c9fe:	b112      	cbz	r2, 800ca06 <_raise_r+0x1e>
 800ca00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca04:	b94b      	cbnz	r3, 800ca1a <_raise_r+0x32>
 800ca06:	4628      	mov	r0, r5
 800ca08:	f000 f830 	bl	800ca6c <_getpid_r>
 800ca0c:	4622      	mov	r2, r4
 800ca0e:	4601      	mov	r1, r0
 800ca10:	4628      	mov	r0, r5
 800ca12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca16:	f000 b817 	b.w	800ca48 <_kill_r>
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d00a      	beq.n	800ca34 <_raise_r+0x4c>
 800ca1e:	1c59      	adds	r1, r3, #1
 800ca20:	d103      	bne.n	800ca2a <_raise_r+0x42>
 800ca22:	2316      	movs	r3, #22
 800ca24:	6003      	str	r3, [r0, #0]
 800ca26:	2001      	movs	r0, #1
 800ca28:	e7e7      	b.n	800c9fa <_raise_r+0x12>
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca32:	4798      	blx	r3
 800ca34:	2000      	movs	r0, #0
 800ca36:	e7e0      	b.n	800c9fa <_raise_r+0x12>

0800ca38 <raise>:
 800ca38:	4b02      	ldr	r3, [pc, #8]	@ (800ca44 <raise+0xc>)
 800ca3a:	4601      	mov	r1, r0
 800ca3c:	6818      	ldr	r0, [r3, #0]
 800ca3e:	f7ff bfd3 	b.w	800c9e8 <_raise_r>
 800ca42:	bf00      	nop
 800ca44:	200002fc 	.word	0x200002fc

0800ca48 <_kill_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	4d06      	ldr	r5, [pc, #24]	@ (800ca68 <_kill_r+0x20>)
 800ca4e:	4604      	mov	r4, r0
 800ca50:	4608      	mov	r0, r1
 800ca52:	4611      	mov	r1, r2
 800ca54:	602b      	str	r3, [r5, #0]
 800ca56:	f7f6 fa62 	bl	8002f1e <_kill>
 800ca5a:	1c43      	adds	r3, r0, #1
 800ca5c:	d102      	bne.n	800ca64 <_kill_r+0x1c>
 800ca5e:	682b      	ldr	r3, [r5, #0]
 800ca60:	b103      	cbz	r3, 800ca64 <_kill_r+0x1c>
 800ca62:	6023      	str	r3, [r4, #0]
 800ca64:	bd38      	pop	{r3, r4, r5, pc}
 800ca66:	bf00      	nop
 800ca68:	2000116c 	.word	0x2000116c

0800ca6c <_getpid_r>:
 800ca6c:	f7f6 ba50 	b.w	8002f10 <_getpid>

0800ca70 <_malloc_usable_size_r>:
 800ca70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca74:	1f18      	subs	r0, r3, #4
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	bfbc      	itt	lt
 800ca7a:	580b      	ldrlt	r3, [r1, r0]
 800ca7c:	18c0      	addlt	r0, r0, r3
 800ca7e:	4770      	bx	lr

0800ca80 <__swhatbuf_r>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	460c      	mov	r4, r1
 800ca84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca88:	4615      	mov	r5, r2
 800ca8a:	2900      	cmp	r1, #0
 800ca8c:	461e      	mov	r6, r3
 800ca8e:	b096      	sub	sp, #88	@ 0x58
 800ca90:	da0c      	bge.n	800caac <__swhatbuf_r+0x2c>
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	2100      	movs	r1, #0
 800ca96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca9a:	bf14      	ite	ne
 800ca9c:	2340      	movne	r3, #64	@ 0x40
 800ca9e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800caa2:	2000      	movs	r0, #0
 800caa4:	6031      	str	r1, [r6, #0]
 800caa6:	602b      	str	r3, [r5, #0]
 800caa8:	b016      	add	sp, #88	@ 0x58
 800caaa:	bd70      	pop	{r4, r5, r6, pc}
 800caac:	466a      	mov	r2, sp
 800caae:	f000 f849 	bl	800cb44 <_fstat_r>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	dbed      	blt.n	800ca92 <__swhatbuf_r+0x12>
 800cab6:	9901      	ldr	r1, [sp, #4]
 800cab8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cabc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cac0:	4259      	negs	r1, r3
 800cac2:	4159      	adcs	r1, r3
 800cac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cac8:	e7eb      	b.n	800caa2 <__swhatbuf_r+0x22>

0800caca <__smakebuf_r>:
 800caca:	898b      	ldrh	r3, [r1, #12]
 800cacc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cace:	079d      	lsls	r5, r3, #30
 800cad0:	4606      	mov	r6, r0
 800cad2:	460c      	mov	r4, r1
 800cad4:	d507      	bpl.n	800cae6 <__smakebuf_r+0x1c>
 800cad6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cada:	6023      	str	r3, [r4, #0]
 800cadc:	6123      	str	r3, [r4, #16]
 800cade:	2301      	movs	r3, #1
 800cae0:	6163      	str	r3, [r4, #20]
 800cae2:	b003      	add	sp, #12
 800cae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cae6:	466a      	mov	r2, sp
 800cae8:	ab01      	add	r3, sp, #4
 800caea:	f7ff ffc9 	bl	800ca80 <__swhatbuf_r>
 800caee:	9f00      	ldr	r7, [sp, #0]
 800caf0:	4605      	mov	r5, r0
 800caf2:	4639      	mov	r1, r7
 800caf4:	4630      	mov	r0, r6
 800caf6:	f7fe fdcf 	bl	800b698 <_malloc_r>
 800cafa:	b948      	cbnz	r0, 800cb10 <__smakebuf_r+0x46>
 800cafc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb00:	059a      	lsls	r2, r3, #22
 800cb02:	d4ee      	bmi.n	800cae2 <__smakebuf_r+0x18>
 800cb04:	f023 0303 	bic.w	r3, r3, #3
 800cb08:	f043 0302 	orr.w	r3, r3, #2
 800cb0c:	81a3      	strh	r3, [r4, #12]
 800cb0e:	e7e2      	b.n	800cad6 <__smakebuf_r+0xc>
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb1a:	81a3      	strh	r3, [r4, #12]
 800cb1c:	9b01      	ldr	r3, [sp, #4]
 800cb1e:	6020      	str	r0, [r4, #0]
 800cb20:	b15b      	cbz	r3, 800cb3a <__smakebuf_r+0x70>
 800cb22:	4630      	mov	r0, r6
 800cb24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb28:	f000 f81e 	bl	800cb68 <_isatty_r>
 800cb2c:	b128      	cbz	r0, 800cb3a <__smakebuf_r+0x70>
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f023 0303 	bic.w	r3, r3, #3
 800cb34:	f043 0301 	orr.w	r3, r3, #1
 800cb38:	81a3      	strh	r3, [r4, #12]
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	431d      	orrs	r5, r3
 800cb3e:	81a5      	strh	r5, [r4, #12]
 800cb40:	e7cf      	b.n	800cae2 <__smakebuf_r+0x18>
	...

0800cb44 <_fstat_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	2300      	movs	r3, #0
 800cb48:	4d06      	ldr	r5, [pc, #24]	@ (800cb64 <_fstat_r+0x20>)
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	4608      	mov	r0, r1
 800cb4e:	4611      	mov	r1, r2
 800cb50:	602b      	str	r3, [r5, #0]
 800cb52:	f7f6 fa43 	bl	8002fdc <_fstat>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	d102      	bne.n	800cb60 <_fstat_r+0x1c>
 800cb5a:	682b      	ldr	r3, [r5, #0]
 800cb5c:	b103      	cbz	r3, 800cb60 <_fstat_r+0x1c>
 800cb5e:	6023      	str	r3, [r4, #0]
 800cb60:	bd38      	pop	{r3, r4, r5, pc}
 800cb62:	bf00      	nop
 800cb64:	2000116c 	.word	0x2000116c

0800cb68 <_isatty_r>:
 800cb68:	b538      	push	{r3, r4, r5, lr}
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	4d05      	ldr	r5, [pc, #20]	@ (800cb84 <_isatty_r+0x1c>)
 800cb6e:	4604      	mov	r4, r0
 800cb70:	4608      	mov	r0, r1
 800cb72:	602b      	str	r3, [r5, #0]
 800cb74:	f7f6 fa41 	bl	8002ffa <_isatty>
 800cb78:	1c43      	adds	r3, r0, #1
 800cb7a:	d102      	bne.n	800cb82 <_isatty_r+0x1a>
 800cb7c:	682b      	ldr	r3, [r5, #0]
 800cb7e:	b103      	cbz	r3, 800cb82 <_isatty_r+0x1a>
 800cb80:	6023      	str	r3, [r4, #0]
 800cb82:	bd38      	pop	{r3, r4, r5, pc}
 800cb84:	2000116c 	.word	0x2000116c

0800cb88 <_init>:
 800cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8a:	bf00      	nop
 800cb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb8e:	bc08      	pop	{r3}
 800cb90:	469e      	mov	lr, r3
 800cb92:	4770      	bx	lr

0800cb94 <_fini>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	bf00      	nop
 800cb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9a:	bc08      	pop	{r3}
 800cb9c:	469e      	mov	lr, r3
 800cb9e:	4770      	bx	lr
