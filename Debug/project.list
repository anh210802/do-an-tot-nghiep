
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c910  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800ca50  0800ca50  0000da50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf9c  0800cf9c  0000e348  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf9c  0800cf9c  0000df9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfa4  0800cfa4  0000e348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfa4  0800cfa4  0000dfa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cfa8  0800cfa8  0000dfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  0800cfac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c2c  20000348  0800d2f4  0000e348  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f74  0800d2f4  0000ef74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a83  00000000  00000000  0000e371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000353c  00000000  00000000  00022df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00026330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e07  00000000  00000000  00027558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f08  00000000  00000000  0002835f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180cf  00000000  00000000  00040267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a505  00000000  00000000  00058336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e283b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000610c  00000000  00000000  000e2880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000e898c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000348 	.word	0x20000348
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ca38 	.word	0x0800ca38

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000034c 	.word	0x2000034c
 800017c:	0800ca38 	.word	0x0800ca38

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b99e 	b.w	80014e0 <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f83c 	bl	8001228 <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__aeabi_d2lz>:
 80011bc:	b538      	push	{r3, r4, r5, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	2300      	movs	r3, #0
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	f7ff fc11 	bl	80009ec <__aeabi_dcmplt>
 80011ca:	b928      	cbnz	r0, 80011d8 <__aeabi_d2lz+0x1c>
 80011cc:	4620      	mov	r0, r4
 80011ce:	4629      	mov	r1, r5
 80011d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011d4:	f000 b80a 	b.w	80011ec <__aeabi_d2ulz>
 80011d8:	4620      	mov	r0, r4
 80011da:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011de:	f000 f805 	bl	80011ec <__aeabi_d2ulz>
 80011e2:	4240      	negs	r0, r0
 80011e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e8:	bd38      	pop	{r3, r4, r5, pc}
 80011ea:	bf00      	nop

080011ec <__aeabi_d2ulz>:
 80011ec:	b5d0      	push	{r4, r6, r7, lr}
 80011ee:	2200      	movs	r2, #0
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <__aeabi_d2ulz+0x34>)
 80011f2:	4606      	mov	r6, r0
 80011f4:	460f      	mov	r7, r1
 80011f6:	f7ff f987 	bl	8000508 <__aeabi_dmul>
 80011fa:	f7ff fc5d 	bl	8000ab8 <__aeabi_d2uiz>
 80011fe:	4604      	mov	r4, r0
 8001200:	f7ff f908 	bl	8000414 <__aeabi_ui2d>
 8001204:	2200      	movs	r2, #0
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <__aeabi_d2ulz+0x38>)
 8001208:	f7ff f97e 	bl	8000508 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4630      	mov	r0, r6
 8001212:	4639      	mov	r1, r7
 8001214:	f7fe ffc0 	bl	8000198 <__aeabi_dsub>
 8001218:	f7ff fc4e 	bl	8000ab8 <__aeabi_d2uiz>
 800121c:	4621      	mov	r1, r4
 800121e:	bdd0      	pop	{r4, r6, r7, pc}
 8001220:	3df00000 	.word	0x3df00000
 8001224:	41f00000 	.word	0x41f00000

08001228 <__udivmoddi4>:
 8001228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800122c:	9d08      	ldr	r5, [sp, #32]
 800122e:	460c      	mov	r4, r1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d14e      	bne.n	80012d2 <__udivmoddi4+0xaa>
 8001234:	4694      	mov	ip, r2
 8001236:	458c      	cmp	ip, r1
 8001238:	4686      	mov	lr, r0
 800123a:	fab2 f282 	clz	r2, r2
 800123e:	d962      	bls.n	8001306 <__udivmoddi4+0xde>
 8001240:	b14a      	cbz	r2, 8001256 <__udivmoddi4+0x2e>
 8001242:	f1c2 0320 	rsb	r3, r2, #32
 8001246:	4091      	lsls	r1, r2
 8001248:	fa20 f303 	lsr.w	r3, r0, r3
 800124c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001250:	4319      	orrs	r1, r3
 8001252:	fa00 fe02 	lsl.w	lr, r0, r2
 8001256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800125a:	fbb1 f4f7 	udiv	r4, r1, r7
 800125e:	fb07 1114 	mls	r1, r7, r4, r1
 8001262:	fa1f f68c 	uxth.w	r6, ip
 8001266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800126a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800126e:	fb04 f106 	mul.w	r1, r4, r6
 8001272:	4299      	cmp	r1, r3
 8001274:	d90a      	bls.n	800128c <__udivmoddi4+0x64>
 8001276:	eb1c 0303 	adds.w	r3, ip, r3
 800127a:	f104 30ff 	add.w	r0, r4, #4294967295
 800127e:	f080 8110 	bcs.w	80014a2 <__udivmoddi4+0x27a>
 8001282:	4299      	cmp	r1, r3
 8001284:	f240 810d 	bls.w	80014a2 <__udivmoddi4+0x27a>
 8001288:	3c02      	subs	r4, #2
 800128a:	4463      	add	r3, ip
 800128c:	1a59      	subs	r1, r3, r1
 800128e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001292:	fb07 1110 	mls	r1, r7, r0, r1
 8001296:	fb00 f606 	mul.w	r6, r0, r6
 800129a:	fa1f f38e 	uxth.w	r3, lr
 800129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012a2:	429e      	cmp	r6, r3
 80012a4:	d90a      	bls.n	80012bc <__udivmoddi4+0x94>
 80012a6:	eb1c 0303 	adds.w	r3, ip, r3
 80012aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80012ae:	f080 80fa 	bcs.w	80014a6 <__udivmoddi4+0x27e>
 80012b2:	429e      	cmp	r6, r3
 80012b4:	f240 80f7 	bls.w	80014a6 <__udivmoddi4+0x27e>
 80012b8:	4463      	add	r3, ip
 80012ba:	3802      	subs	r0, #2
 80012bc:	2100      	movs	r1, #0
 80012be:	1b9b      	subs	r3, r3, r6
 80012c0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80012c4:	b11d      	cbz	r5, 80012ce <__udivmoddi4+0xa6>
 80012c6:	40d3      	lsrs	r3, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	e9c5 3200 	strd	r3, r2, [r5]
 80012ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d2:	428b      	cmp	r3, r1
 80012d4:	d905      	bls.n	80012e2 <__udivmoddi4+0xba>
 80012d6:	b10d      	cbz	r5, 80012dc <__udivmoddi4+0xb4>
 80012d8:	e9c5 0100 	strd	r0, r1, [r5]
 80012dc:	2100      	movs	r1, #0
 80012de:	4608      	mov	r0, r1
 80012e0:	e7f5      	b.n	80012ce <__udivmoddi4+0xa6>
 80012e2:	fab3 f183 	clz	r1, r3
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d146      	bne.n	8001378 <__udivmoddi4+0x150>
 80012ea:	42a3      	cmp	r3, r4
 80012ec:	d302      	bcc.n	80012f4 <__udivmoddi4+0xcc>
 80012ee:	4290      	cmp	r0, r2
 80012f0:	f0c0 80ee 	bcc.w	80014d0 <__udivmoddi4+0x2a8>
 80012f4:	1a86      	subs	r6, r0, r2
 80012f6:	eb64 0303 	sbc.w	r3, r4, r3
 80012fa:	2001      	movs	r0, #1
 80012fc:	2d00      	cmp	r5, #0
 80012fe:	d0e6      	beq.n	80012ce <__udivmoddi4+0xa6>
 8001300:	e9c5 6300 	strd	r6, r3, [r5]
 8001304:	e7e3      	b.n	80012ce <__udivmoddi4+0xa6>
 8001306:	2a00      	cmp	r2, #0
 8001308:	f040 808f 	bne.w	800142a <__udivmoddi4+0x202>
 800130c:	eba1 040c 	sub.w	r4, r1, ip
 8001310:	2101      	movs	r1, #1
 8001312:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001316:	fa1f f78c 	uxth.w	r7, ip
 800131a:	fbb4 f6f8 	udiv	r6, r4, r8
 800131e:	fb08 4416 	mls	r4, r8, r6, r4
 8001322:	fb07 f006 	mul.w	r0, r7, r6
 8001326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800132a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800132e:	4298      	cmp	r0, r3
 8001330:	d908      	bls.n	8001344 <__udivmoddi4+0x11c>
 8001332:	eb1c 0303 	adds.w	r3, ip, r3
 8001336:	f106 34ff 	add.w	r4, r6, #4294967295
 800133a:	d202      	bcs.n	8001342 <__udivmoddi4+0x11a>
 800133c:	4298      	cmp	r0, r3
 800133e:	f200 80cb 	bhi.w	80014d8 <__udivmoddi4+0x2b0>
 8001342:	4626      	mov	r6, r4
 8001344:	1a1c      	subs	r4, r3, r0
 8001346:	fbb4 f0f8 	udiv	r0, r4, r8
 800134a:	fb08 4410 	mls	r4, r8, r0, r4
 800134e:	fb00 f707 	mul.w	r7, r0, r7
 8001352:	fa1f f38e 	uxth.w	r3, lr
 8001356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800135a:	429f      	cmp	r7, r3
 800135c:	d908      	bls.n	8001370 <__udivmoddi4+0x148>
 800135e:	eb1c 0303 	adds.w	r3, ip, r3
 8001362:	f100 34ff 	add.w	r4, r0, #4294967295
 8001366:	d202      	bcs.n	800136e <__udivmoddi4+0x146>
 8001368:	429f      	cmp	r7, r3
 800136a:	f200 80ae 	bhi.w	80014ca <__udivmoddi4+0x2a2>
 800136e:	4620      	mov	r0, r4
 8001370:	1bdb      	subs	r3, r3, r7
 8001372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001376:	e7a5      	b.n	80012c4 <__udivmoddi4+0x9c>
 8001378:	f1c1 0720 	rsb	r7, r1, #32
 800137c:	408b      	lsls	r3, r1
 800137e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001382:	ea4c 0c03 	orr.w	ip, ip, r3
 8001386:	fa24 f607 	lsr.w	r6, r4, r7
 800138a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800138e:	fbb6 f8f9 	udiv	r8, r6, r9
 8001392:	fa1f fe8c 	uxth.w	lr, ip
 8001396:	fb09 6618 	mls	r6, r9, r8, r6
 800139a:	fa20 f307 	lsr.w	r3, r0, r7
 800139e:	408c      	lsls	r4, r1
 80013a0:	fa00 fa01 	lsl.w	sl, r0, r1
 80013a4:	fb08 f00e 	mul.w	r0, r8, lr
 80013a8:	431c      	orrs	r4, r3
 80013aa:	0c23      	lsrs	r3, r4, #16
 80013ac:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80013b0:	4298      	cmp	r0, r3
 80013b2:	fa02 f201 	lsl.w	r2, r2, r1
 80013b6:	d90a      	bls.n	80013ce <__udivmoddi4+0x1a6>
 80013b8:	eb1c 0303 	adds.w	r3, ip, r3
 80013bc:	f108 36ff 	add.w	r6, r8, #4294967295
 80013c0:	f080 8081 	bcs.w	80014c6 <__udivmoddi4+0x29e>
 80013c4:	4298      	cmp	r0, r3
 80013c6:	d97e      	bls.n	80014c6 <__udivmoddi4+0x29e>
 80013c8:	f1a8 0802 	sub.w	r8, r8, #2
 80013cc:	4463      	add	r3, ip
 80013ce:	1a1e      	subs	r6, r3, r0
 80013d0:	fbb6 f3f9 	udiv	r3, r6, r9
 80013d4:	fb09 6613 	mls	r6, r9, r3, r6
 80013d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80013dc:	b2a4      	uxth	r4, r4
 80013de:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80013e2:	45a6      	cmp	lr, r4
 80013e4:	d908      	bls.n	80013f8 <__udivmoddi4+0x1d0>
 80013e6:	eb1c 0404 	adds.w	r4, ip, r4
 80013ea:	f103 30ff 	add.w	r0, r3, #4294967295
 80013ee:	d266      	bcs.n	80014be <__udivmoddi4+0x296>
 80013f0:	45a6      	cmp	lr, r4
 80013f2:	d964      	bls.n	80014be <__udivmoddi4+0x296>
 80013f4:	3b02      	subs	r3, #2
 80013f6:	4464      	add	r4, ip
 80013f8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013fc:	fba0 8302 	umull	r8, r3, r0, r2
 8001400:	eba4 040e 	sub.w	r4, r4, lr
 8001404:	429c      	cmp	r4, r3
 8001406:	46c6      	mov	lr, r8
 8001408:	461e      	mov	r6, r3
 800140a:	d350      	bcc.n	80014ae <__udivmoddi4+0x286>
 800140c:	d04d      	beq.n	80014aa <__udivmoddi4+0x282>
 800140e:	b155      	cbz	r5, 8001426 <__udivmoddi4+0x1fe>
 8001410:	ebba 030e 	subs.w	r3, sl, lr
 8001414:	eb64 0406 	sbc.w	r4, r4, r6
 8001418:	fa04 f707 	lsl.w	r7, r4, r7
 800141c:	40cb      	lsrs	r3, r1
 800141e:	431f      	orrs	r7, r3
 8001420:	40cc      	lsrs	r4, r1
 8001422:	e9c5 7400 	strd	r7, r4, [r5]
 8001426:	2100      	movs	r1, #0
 8001428:	e751      	b.n	80012ce <__udivmoddi4+0xa6>
 800142a:	fa0c fc02 	lsl.w	ip, ip, r2
 800142e:	f1c2 0320 	rsb	r3, r2, #32
 8001432:	40d9      	lsrs	r1, r3
 8001434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001438:	fa20 f303 	lsr.w	r3, r0, r3
 800143c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001440:	fbb1 f0f8 	udiv	r0, r1, r8
 8001444:	fb08 1110 	mls	r1, r8, r0, r1
 8001448:	4094      	lsls	r4, r2
 800144a:	431c      	orrs	r4, r3
 800144c:	fa1f f78c 	uxth.w	r7, ip
 8001450:	0c23      	lsrs	r3, r4, #16
 8001452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001456:	fb00 f107 	mul.w	r1, r0, r7
 800145a:	4299      	cmp	r1, r3
 800145c:	d908      	bls.n	8001470 <__udivmoddi4+0x248>
 800145e:	eb1c 0303 	adds.w	r3, ip, r3
 8001462:	f100 36ff 	add.w	r6, r0, #4294967295
 8001466:	d22c      	bcs.n	80014c2 <__udivmoddi4+0x29a>
 8001468:	4299      	cmp	r1, r3
 800146a:	d92a      	bls.n	80014c2 <__udivmoddi4+0x29a>
 800146c:	3802      	subs	r0, #2
 800146e:	4463      	add	r3, ip
 8001470:	1a5b      	subs	r3, r3, r1
 8001472:	fbb3 f1f8 	udiv	r1, r3, r8
 8001476:	fb08 3311 	mls	r3, r8, r1, r3
 800147a:	b2a4      	uxth	r4, r4
 800147c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001480:	fb01 f307 	mul.w	r3, r1, r7
 8001484:	42a3      	cmp	r3, r4
 8001486:	d908      	bls.n	800149a <__udivmoddi4+0x272>
 8001488:	eb1c 0404 	adds.w	r4, ip, r4
 800148c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001490:	d213      	bcs.n	80014ba <__udivmoddi4+0x292>
 8001492:	42a3      	cmp	r3, r4
 8001494:	d911      	bls.n	80014ba <__udivmoddi4+0x292>
 8001496:	3902      	subs	r1, #2
 8001498:	4464      	add	r4, ip
 800149a:	1ae4      	subs	r4, r4, r3
 800149c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80014a0:	e73b      	b.n	800131a <__udivmoddi4+0xf2>
 80014a2:	4604      	mov	r4, r0
 80014a4:	e6f2      	b.n	800128c <__udivmoddi4+0x64>
 80014a6:	4608      	mov	r0, r1
 80014a8:	e708      	b.n	80012bc <__udivmoddi4+0x94>
 80014aa:	45c2      	cmp	sl, r8
 80014ac:	d2af      	bcs.n	800140e <__udivmoddi4+0x1e6>
 80014ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80014b2:	eb63 060c 	sbc.w	r6, r3, ip
 80014b6:	3801      	subs	r0, #1
 80014b8:	e7a9      	b.n	800140e <__udivmoddi4+0x1e6>
 80014ba:	4631      	mov	r1, r6
 80014bc:	e7ed      	b.n	800149a <__udivmoddi4+0x272>
 80014be:	4603      	mov	r3, r0
 80014c0:	e79a      	b.n	80013f8 <__udivmoddi4+0x1d0>
 80014c2:	4630      	mov	r0, r6
 80014c4:	e7d4      	b.n	8001470 <__udivmoddi4+0x248>
 80014c6:	46b0      	mov	r8, r6
 80014c8:	e781      	b.n	80013ce <__udivmoddi4+0x1a6>
 80014ca:	4463      	add	r3, ip
 80014cc:	3802      	subs	r0, #2
 80014ce:	e74f      	b.n	8001370 <__udivmoddi4+0x148>
 80014d0:	4606      	mov	r6, r0
 80014d2:	4623      	mov	r3, r4
 80014d4:	4608      	mov	r0, r1
 80014d6:	e711      	b.n	80012fc <__udivmoddi4+0xd4>
 80014d8:	3e02      	subs	r6, #2
 80014da:	4463      	add	r3, ip
 80014dc:	e732      	b.n	8001344 <__udivmoddi4+0x11c>
 80014de:	bf00      	nop

080014e0 <__aeabi_idiv0>:
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <setToggle>:
int counter = 0;
uint8_t set_buzzer_on[] = "!ID:000000:SET_BUZZER_ON#";
uint8_t set_buzzer_off[] = "!ID:000000:SET_BUZZER_OFF#";
uint8_t set_buzzer_error[] = "!ID:000000:SET_BUZZER_ERROR#";

void setToggle() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    counter++;
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <setToggle+0x18>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a03      	ldr	r2, [pc, #12]	@ (80014fc <setToggle+0x18>)
 80014f0:	6013      	str	r3, [r2, #0]
    toggleBuzzer();
 80014f2:	f000 fb11 	bl	8001b18 <toggleBuzzer>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000364 	.word	0x20000364

08001500 <setDeviceID>:

void setDeviceID() {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
    // Copy ID vào các mảng dữ liệu một cách an toàn
    for (int i = 0; i < ID_SIZE && i + 4 < sizeof(set_buzzer_on) - 1; i++) {
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e01a      	b.n	8001542 <setDeviceID+0x42>
        set_buzzer_on[i + 4] = id_device[i];
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3304      	adds	r3, #4
 8001510:	4912      	ldr	r1, [pc, #72]	@ (800155c <setDeviceID+0x5c>)
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	440a      	add	r2, r1
 8001516:	7811      	ldrb	r1, [r2, #0]
 8001518:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <setDeviceID+0x60>)
 800151a:	54d1      	strb	r1, [r2, r3]
        set_buzzer_off[i + 4] = id_device[i];
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	490e      	ldr	r1, [pc, #56]	@ (800155c <setDeviceID+0x5c>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	440a      	add	r2, r1
 8001526:	7811      	ldrb	r1, [r2, #0]
 8001528:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <setDeviceID+0x64>)
 800152a:	54d1      	strb	r1, [r2, r3]
        set_buzzer_error[i + 4] = id_device[i];
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3304      	adds	r3, #4
 8001530:	490a      	ldr	r1, [pc, #40]	@ (800155c <setDeviceID+0x5c>)
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	440a      	add	r2, r1
 8001536:	7811      	ldrb	r1, [r2, #0]
 8001538:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <setDeviceID+0x68>)
 800153a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < ID_SIZE && i + 4 < sizeof(set_buzzer_on) - 1; i++) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3301      	adds	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b05      	cmp	r3, #5
 8001546:	dc03      	bgt.n	8001550 <setDeviceID+0x50>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	2b18      	cmp	r3, #24
 800154e:	d9dd      	bls.n	800150c <setDeviceID+0xc>
    }
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000005c 	.word	0x2000005c
 8001560:	20000000 	.word	0x20000000
 8001564:	2000001c 	.word	0x2000001c
 8001568:	20000038 	.word	0x20000038

0800156c <sendOn>:

void sendOn(UART_HandleTypeDef *huart) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_IT(huart, set_buzzer_on, strlen((char *)set_buzzer_on));
 8001574:	4806      	ldr	r0, [pc, #24]	@ (8001590 <sendOn+0x24>)
 8001576:	f7fe fe03 	bl	8000180 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	4903      	ldr	r1, [pc, #12]	@ (8001590 <sendOn+0x24>)
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 fb2e 	bl	8007be4 <HAL_UART_Transmit_IT>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000000 	.word	0x20000000

08001594 <sendOff>:

void sendOff(UART_HandleTypeDef *huart) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_IT(huart, set_buzzer_off, strlen((char *)set_buzzer_off));
 800159c:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <sendOff+0x24>)
 800159e:	f7fe fdef 	bl	8000180 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	4903      	ldr	r1, [pc, #12]	@ (80015b8 <sendOff+0x24>)
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f006 fb1a 	bl	8007be4 <HAL_UART_Transmit_IT>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000001c 	.word	0x2000001c

080015bc <fsm_control_buzzer>:

void sendError(UART_HandleTypeDef *huart) {
    HAL_UART_Transmit_IT(huart, set_buzzer_error, strlen((char *)set_buzzer_error));
}

void fsm_control_buzzer(UART_HandleTypeDef *huart) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    switch (control_buzzer_state) {
 80015c4:	4b31      	ldr	r3, [pc, #196]	@ (800168c <fsm_control_buzzer+0xd0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d041      	beq.n	8001650 <fsm_control_buzzer+0x94>
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	dc54      	bgt.n	800167a <fsm_control_buzzer+0xbe>
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d002      	beq.n	80015da <fsm_control_buzzer+0x1e>
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d01f      	beq.n	8001618 <fsm_control_buzzer+0x5c>
        }
        break;

    default:
//        sendError(huart);
        break;
 80015d8:	e04f      	b.n	800167a <fsm_control_buzzer+0xbe>
        setDeviceID();
 80015da:	f7ff ff91 	bl	8001500 <setDeviceID>
        if (buzzer_flag) {
 80015de:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <fsm_control_buzzer+0xd4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00d      	beq.n	8001604 <fsm_control_buzzer+0x48>
            sendOn(huart);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffbf 	bl	800156c <sendOn>
            SCH_Add_Task(setToggle, 1, DELAY_BUZZER);
 80015ee:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80015f2:	461a      	mov	r2, r3
 80015f4:	2101      	movs	r1, #1
 80015f6:	4827      	ldr	r0, [pc, #156]	@ (8001694 <fsm_control_buzzer+0xd8>)
 80015f8:	f001 f858 	bl	80026ac <SCH_Add_Task>
            control_buzzer_state = CONTROL_BUZZER_ON;
 80015fc:	4b23      	ldr	r3, [pc, #140]	@ (800168c <fsm_control_buzzer+0xd0>)
 80015fe:	2202      	movs	r2, #2
 8001600:	701a      	strb	r2, [r3, #0]
        break;
 8001602:	e03f      	b.n	8001684 <fsm_control_buzzer+0xc8>
            counter = 0;
 8001604:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <fsm_control_buzzer+0xdc>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
            sendOff(huart);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffc2 	bl	8001594 <sendOff>
            control_buzzer_state = CONTROL_BUZZER_OFF;
 8001610:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <fsm_control_buzzer+0xd0>)
 8001612:	2203      	movs	r2, #3
 8001614:	701a      	strb	r2, [r3, #0]
        break;
 8001616:	e035      	b.n	8001684 <fsm_control_buzzer+0xc8>
        if (counter >= 100 || !buzzer_flag) {
 8001618:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <fsm_control_buzzer+0xdc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b63      	cmp	r3, #99	@ 0x63
 800161e:	dc07      	bgt.n	8001630 <fsm_control_buzzer+0x74>
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <fsm_control_buzzer+0xd4>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f083 0301 	eor.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d026      	beq.n	800167e <fsm_control_buzzer+0xc2>
            SCH_Delete_Task(setToggle);
 8001630:	4818      	ldr	r0, [pc, #96]	@ (8001694 <fsm_control_buzzer+0xd8>)
 8001632:	f001 f933 	bl	800289c <SCH_Delete_Task>
            buzzer_flag = false;
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <fsm_control_buzzer+0xd4>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
            counter = 0;
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <fsm_control_buzzer+0xdc>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
            sendOff(huart);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa6 	bl	8001594 <sendOff>
            control_buzzer_state = CONTROL_BUZZER_OFF;
 8001648:	4b10      	ldr	r3, [pc, #64]	@ (800168c <fsm_control_buzzer+0xd0>)
 800164a:	2203      	movs	r2, #3
 800164c:	701a      	strb	r2, [r3, #0]
        break;
 800164e:	e016      	b.n	800167e <fsm_control_buzzer+0xc2>
    	offBuzzer();
 8001650:	f000 fa56 	bl	8001b00 <offBuzzer>
        if (buzzer_flag) {
 8001654:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <fsm_control_buzzer+0xd4>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d011      	beq.n	8001682 <fsm_control_buzzer+0xc6>
            sendOn(huart);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff84 	bl	800156c <sendOn>
            SCH_Add_Task(setToggle, 1, DELAY_BUZZER);
 8001664:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001668:	461a      	mov	r2, r3
 800166a:	2101      	movs	r1, #1
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <fsm_control_buzzer+0xd8>)
 800166e:	f001 f81d 	bl	80026ac <SCH_Add_Task>
            control_buzzer_state = CONTROL_BUZZER_ON;
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <fsm_control_buzzer+0xd0>)
 8001674:	2202      	movs	r2, #2
 8001676:	701a      	strb	r2, [r3, #0]
        break;
 8001678:	e003      	b.n	8001682 <fsm_control_buzzer+0xc6>
        break;
 800167a:	bf00      	nop
 800167c:	e002      	b.n	8001684 <fsm_control_buzzer+0xc8>
        break;
 800167e:	bf00      	nop
 8001680:	e000      	b.n	8001684 <fsm_control_buzzer+0xc8>
        break;
 8001682:	bf00      	nop
    }
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200003c3 	.word	0x200003c3
 8001690:	200004cb 	.word	0x200004cb
 8001694:	080014e5 	.word	0x080014e5
 8001698:	20000364 	.word	0x20000364

0800169c <check_id_request>:
 *      Author: anhxa
 */

#include "fsm_find_device.h"

int check_id_request(uint8_t* buffer, uint8_t * id) {
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	if (buffer[1] == 'I' && buffer[2] == 'D') {
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3301      	adds	r3, #1
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b49      	cmp	r3, #73	@ 0x49
 80016ae:	d11a      	bne.n	80016e6 <check_id_request+0x4a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3302      	adds	r3, #2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b44      	cmp	r3, #68	@ 0x44
 80016b8:	d115      	bne.n	80016e6 <check_id_request+0x4a>
		for (int i = 0; i < ID_SIZE; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e00f      	b.n	80016e0 <check_id_request+0x44>
			if (id[i] != buffer[i+4]) return 0;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3304      	adds	r3, #4
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	440b      	add	r3, r1
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <check_id_request+0x3e>
 80016d6:	2300      	movs	r3, #0
 80016d8:	e006      	b.n	80016e8 <check_id_request+0x4c>
		for (int i = 0; i < ID_SIZE; i++) {
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3301      	adds	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	ddec      	ble.n	80016c0 <check_id_request+0x24>
		}
	}
	return 1;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
	...

080016f4 <check_request>:

int check_request(uint8_t* buffer, uint8_t * id) {
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 4; i++) {
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e00f      	b.n	8001724 <check_request+0x30>
		if (action[i] != buffer[i+11]) return 0;
 8001704:	4a0c      	ldr	r2, [pc, #48]	@ (8001738 <check_request+0x44>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	330b      	adds	r3, #11
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	440b      	add	r3, r1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <check_request+0x2a>
 800171a:	2300      	movs	r3, #0
 800171c:	e006      	b.n	800172c <check_request+0x38>
	for(int i = 0; i < 4; i++) {
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3301      	adds	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b03      	cmp	r3, #3
 8001728:	ddec      	ble.n	8001704 <check_request+0x10>
	}
	return 1;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000164 	.word	0x20000164

0800173c <fsm_find_device>:

void fsm_find_device(UART_HandleTypeDef *huart) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	switch(find_device_state) {
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <fsm_find_device+0xa4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d028      	beq.n	800179e <fsm_find_device+0x62>
 800174c:	2b03      	cmp	r3, #3
 800174e:	dc40      	bgt.n	80017d2 <fsm_find_device+0x96>
 8001750:	2b01      	cmp	r3, #1
 8001752:	d002      	beq.n	800175a <fsm_find_device+0x1e>
 8001754:	2b02      	cmp	r3, #2
 8001756:	d00c      	beq.n	8001772 <fsm_find_device+0x36>
		} else {
			find_device_state = FIND_DEVICE_IDLE;
		}
		break;
	default:
		break;
 8001758:	e03b      	b.n	80017d2 <fsm_find_device+0x96>
		if (buffer_flag) {
 800175a:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <fsm_find_device+0xa8>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d038      	beq.n	80017d6 <fsm_find_device+0x9a>
			buffer_flag = false;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <fsm_find_device+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
			find_device_state = FIND_DEVICE_CHECK_REQUEST;
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <fsm_find_device+0xa4>)
 800176c:	2202      	movs	r2, #2
 800176e:	701a      	strb	r2, [r3, #0]
		break;
 8001770:	e031      	b.n	80017d6 <fsm_find_device+0x9a>
		if (check_id_request(buffer, id_device) == 1 && check_request(buffer, id_device) == 1) {
 8001772:	491d      	ldr	r1, [pc, #116]	@ (80017e8 <fsm_find_device+0xac>)
 8001774:	481d      	ldr	r0, [pc, #116]	@ (80017ec <fsm_find_device+0xb0>)
 8001776:	f7ff ff91 	bl	800169c <check_id_request>
 800177a:	4603      	mov	r3, r0
 800177c:	2b01      	cmp	r3, #1
 800177e:	d10a      	bne.n	8001796 <fsm_find_device+0x5a>
 8001780:	4919      	ldr	r1, [pc, #100]	@ (80017e8 <fsm_find_device+0xac>)
 8001782:	481a      	ldr	r0, [pc, #104]	@ (80017ec <fsm_find_device+0xb0>)
 8001784:	f7ff ffb6 	bl	80016f4 <check_request>
 8001788:	4603      	mov	r3, r0
 800178a:	2b01      	cmp	r3, #1
 800178c:	d103      	bne.n	8001796 <fsm_find_device+0x5a>
			find_device_state = FIND_DEVICE_UPDATE_BUZZER;
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <fsm_find_device+0xa4>)
 8001790:	2203      	movs	r2, #3
 8001792:	701a      	strb	r2, [r3, #0]
		break;
 8001794:	e020      	b.n	80017d8 <fsm_find_device+0x9c>
			find_device_state = FIND_DEVICE_IDLE;
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <fsm_find_device+0xa4>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
		break;
 800179c:	e01c      	b.n	80017d8 <fsm_find_device+0x9c>
		if (buffer[16] == '1') {
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <fsm_find_device+0xb0>)
 80017a0:	7c1b      	ldrb	r3, [r3, #16]
 80017a2:	2b31      	cmp	r3, #49	@ 0x31
 80017a4:	d106      	bne.n	80017b4 <fsm_find_device+0x78>
			buzzer_flag = true;
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <fsm_find_device+0xb4>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
			find_device_state = FIND_DEVICE_IDLE;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <fsm_find_device+0xa4>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
		break;
 80017b2:	e011      	b.n	80017d8 <fsm_find_device+0x9c>
		} else if (buffer[16] == '0') {
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <fsm_find_device+0xb0>)
 80017b6:	7c1b      	ldrb	r3, [r3, #16]
 80017b8:	2b30      	cmp	r3, #48	@ 0x30
 80017ba:	d106      	bne.n	80017ca <fsm_find_device+0x8e>
			buzzer_flag = false;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <fsm_find_device+0xb4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
			find_device_state = FIND_DEVICE_IDLE;
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <fsm_find_device+0xa4>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
		break;
 80017c8:	e006      	b.n	80017d8 <fsm_find_device+0x9c>
			find_device_state = FIND_DEVICE_IDLE;
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <fsm_find_device+0xa4>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
		break;
 80017d0:	e002      	b.n	80017d8 <fsm_find_device+0x9c>
		break;
 80017d2:	bf00      	nop
 80017d4:	e000      	b.n	80017d8 <fsm_find_device+0x9c>
		break;
 80017d6:	bf00      	nop
	}
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200003c1 	.word	0x200003c1
 80017e4:	200004c9 	.word	0x200004c9
 80017e8:	2000005c 	.word	0x2000005c
 80017ec:	200003c8 	.word	0x200003c8
 80017f0:	200004cb 	.word	0x200004cb

080017f4 <handleSensorData>:
#include "fsm_handle_data.h"

MPU6050_t MPU6050;


void handleSensorData(I2C_HandleTypeDef* hi2c) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	MPU6050_Read_Accel(hi2c, &MPU6050);
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <handleSensorData+0x3c>)
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fef0 	bl	80025e4 <MPU6050_Read_Accel>
	ax = MPU6050.Ax;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <handleSensorData+0x3c>)
 8001806:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800180a:	490a      	ldr	r1, [pc, #40]	@ (8001834 <handleSensorData+0x40>)
 800180c:	e9c1 2300 	strd	r2, r3, [r1]
	ay = MPU6050.Ay;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <handleSensorData+0x3c>)
 8001812:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001816:	4908      	ldr	r1, [pc, #32]	@ (8001838 <handleSensorData+0x44>)
 8001818:	e9c1 2300 	strd	r2, r3, [r1]
	az = MPU6050.Az;
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <handleSensorData+0x3c>)
 800181e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001822:	4906      	ldr	r1, [pc, #24]	@ (800183c <handleSensorData+0x48>)
 8001824:	e9c1 2300 	strd	r2, r3, [r1]
//	ax = MPU6050.Accel_X_RAW;
//	ay = MPU6050.Accel_Y_RAW;
//	az = MPU6050.Accel_Z_RAW;
//	SENSOR_flag = false;
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000368 	.word	0x20000368
 8001834:	200004d0 	.word	0x200004d0
 8001838:	200004d8 	.word	0x200004d8
 800183c:	200004e0 	.word	0x200004e0

08001840 <handleBatteryData>:

void handleBatteryData(ADC_HandleTypeDef* hadc) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	ADC_value = HAL_ADC_GetValue(hadc);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f001 fd7d 	bl	8003348 <HAL_ADC_GetValue>
 800184e:	4603      	mov	r3, r0
 8001850:	4a02      	ldr	r2, [pc, #8]	@ (800185c <handleBatteryData+0x1c>)
 8001852:	6013      	str	r3, [r2, #0]
//    BATTERY_flag = false;
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000168 	.word	0x20000168

08001860 <send_data>:
 *      Author: anhxa
 */

#include "fsm_send_data.h"

void send_data(UART_HandleTypeDef *huart) {
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	f2ad 4d3c 	subw	sp, sp, #1084	@ 0x43c
 8001866:	af08      	add	r7, sp, #32
 8001868:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800186c:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001870:	6018      	str	r0, [r3, #0]
	char data[1024];
	char id_str[6] = "111111";
 8001872:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001876:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800187a:	4a20      	ldr	r2, [pc, #128]	@ (80018fc <send_data+0x9c>)
 800187c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001880:	6018      	str	r0, [r3, #0]
 8001882:	3304      	adds	r3, #4
 8001884:	8019      	strh	r1, [r3, #0]
	int adc_str;

	uint8_tToChar(id_str, id_device);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	491d      	ldr	r1, [pc, #116]	@ (8001900 <send_data+0xa0>)
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f965 	bl	8001b5c <uint8_tToChar>
	adc_str = (int)ADC_value;
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <send_data+0xa4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
	snprintf(data, sizeof(data),
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <send_data+0xa8>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	491a      	ldr	r1, [pc, #104]	@ (800190c <send_data+0xac>)
 80018a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018a6:	4c1a      	ldr	r4, [pc, #104]	@ (8001910 <send_data+0xb0>)
 80018a8:	cc30      	ldmia	r4, {r4, r5}
 80018aa:	f107 0e0c 	add.w	lr, r7, #12
 80018ae:	f107 0c14 	add.w	ip, r7, #20
 80018b2:	f8d7 6414 	ldr.w	r6, [r7, #1044]	@ 0x414
 80018b6:	9606      	str	r6, [sp, #24]
 80018b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80018bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018c0:	e9cd 2300 	strd	r2, r3, [sp]
 80018c4:	4673      	mov	r3, lr
 80018c6:	4a13      	ldr	r2, [pc, #76]	@ (8001914 <send_data+0xb4>)
 80018c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018cc:	4660      	mov	r0, ip
 80018ce:	f008 fa71 	bl	8009db4 <sniprintf>
			"!ID:%s:Accx:%.3f:Accy:%.3f:Accz:%.3f:POWER:%d#\r\n",
			id_str, ax, ay, az, adc_str);
	HAL_UART_Transmit_IT(huart, (uint8_t *)data, strlen(data));
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fc52 	bl	8000180 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	f107 0114 	add.w	r1, r7, #20
 80018e4:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80018e8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f006 f979 	bl	8007be4 <HAL_UART_Transmit_IT>
}
 80018f2:	bf00      	nop
 80018f4:	f207 471c 	addw	r7, r7, #1052	@ 0x41c
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fc:	0800ca84 	.word	0x0800ca84
 8001900:	2000005c 	.word	0x2000005c
 8001904:	20000168 	.word	0x20000168
 8001908:	200004d0 	.word	0x200004d0
 800190c:	200004d8 	.word	0x200004d8
 8001910:	200004e0 	.word	0x200004e0
 8001914:	0800ca50 	.word	0x0800ca50

08001918 <handle_id>:
#include "fsm_start.h"

int timeout_connect = TIMEOUT_CONNECT;
bool update_id = false;

void handle_id(uint8_t* input, uint8_t* id) {
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
    if(input[3] == 'I' && input[4] == 'D') {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3303      	adds	r3, #3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b49      	cmp	r3, #73	@ 0x49
 800192a:	d126      	bne.n	800197a <handle_id+0x62>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b44      	cmp	r3, #68	@ 0x44
 8001934:	d121      	bne.n	800197a <handle_id+0x62>
        for(int i = 0; i < ID_SIZE; i++) {
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e019      	b.n	8001970 <handle_id+0x58>
            if (input[i+6] >= '0' && input[i+6] <= '9') {
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3306      	adds	r3, #6
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b2f      	cmp	r3, #47	@ 0x2f
 8001948:	d916      	bls.n	8001978 <handle_id+0x60>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3306      	adds	r3, #6
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b39      	cmp	r3, #57	@ 0x39
 8001956:	d80f      	bhi.n	8001978 <handle_id+0x60>
                id[i] = input[i+6];
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3306      	adds	r3, #6
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	441a      	add	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6839      	ldr	r1, [r7, #0]
 8001964:	440b      	add	r3, r1
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < ID_SIZE; i++) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3301      	adds	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b05      	cmp	r3, #5
 8001974:	dde2      	ble.n	800193c <handle_id+0x24>
 8001976:	e000      	b.n	800197a <handle_id+0x62>
            } else {
                return;
 8001978:	bf00      	nop
            }
        }
    }
}
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <init_buzzer_and_led>:

void init_buzzer_and_led() {
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
    onBuzzer();
 8001986:	f000 f8af 	bl	8001ae8 <onBuzzer>
    onLed();
 800198a:	f000 f8cf 	bl	8001b2c <onLed>
    HAL_Delay(200);
 800198e:	20c8      	movs	r0, #200	@ 0xc8
 8001990:	f001 fb72 	bl	8003078 <HAL_Delay>
    offLed();
 8001994:	f000 f8d6 	bl	8001b44 <offLed>
    offBuzzer();
 8001998:	f000 f8b2 	bl	8001b00 <offBuzzer>
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <fsm_start>:

void fsm_start(UART_HandleTypeDef* huart, uint8_t* buffer) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
    switch (start_state) {
 80019aa:	4b43      	ldr	r3, [pc, #268]	@ (8001ab8 <fsm_start+0x118>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d87b      	bhi.n	8001aaa <fsm_start+0x10a>
 80019b2:	a201      	add	r2, pc, #4	@ (adr r2, 80019b8 <fsm_start+0x18>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019df 	.word	0x080019df
 80019c0:	08001a1b 	.word	0x08001a1b
 80019c4:	08001a4f 	.word	0x08001a4f
 80019c8:	08001a67 	.word	0x08001a67
    case START_INIT:
    	handle_GPS_data_flag = false;
 80019cc:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <fsm_start+0x11c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
        init_buzzer_and_led();
 80019d2:	f7ff ffd6 	bl	8001982 <init_buzzer_and_led>
        start_state = START_CONNECTING;
 80019d6:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <fsm_start+0x118>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
        break;
 80019dc:	e068      	b.n	8001ab0 <fsm_start+0x110>

    case START_CONNECTING:
        HAL_UART_Transmit_IT(huart, hello_device, sizeof(hello_device));
 80019de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e2:	4937      	ldr	r1, [pc, #220]	@ (8001ac0 <fsm_start+0x120>)
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f006 f8fd 	bl	8007be4 <HAL_UART_Transmit_IT>
        if (!buffer_flag) {
 80019ea:	4b36      	ldr	r3, [pc, #216]	@ (8001ac4 <fsm_start+0x124>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f083 0301 	eor.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <fsm_start+0x6c>
            timeout_connect = TIMEOUT_CONNECT;
 80019fa:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <fsm_start+0x128>)
 8001a02:	601a      	str	r2, [r3, #0]
            start_state = START_WAIT;
 8001a04:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab8 <fsm_start+0x118>)
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
        } else {
            buffer_flag = false;
            start_state = START_UPDATE_ID;
        }
        break;
 8001a0a:	e051      	b.n	8001ab0 <fsm_start+0x110>
            buffer_flag = false;
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <fsm_start+0x124>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
            start_state = START_UPDATE_ID;
 8001a12:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <fsm_start+0x118>)
 8001a14:	2203      	movs	r2, #3
 8001a16:	701a      	strb	r2, [r3, #0]
        break;
 8001a18:	e04a      	b.n	8001ab0 <fsm_start+0x110>

    case START_WAIT:
        if (buffer_flag) {
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <fsm_start+0x124>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <fsm_start+0x92>
            buffer_flag = false;
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <fsm_start+0x124>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
            start_state = START_UPDATE_ID;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <fsm_start+0x118>)
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	701a      	strb	r2, [r3, #0]
        else if (timeout_connect <= 0) {
            start_state = START_CONNECTING;
        } else {
            timeout_connect--;
        }
        break;
 8001a30:	e03e      	b.n	8001ab0 <fsm_start+0x110>
        else if (timeout_connect <= 0) {
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <fsm_start+0x128>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	dc03      	bgt.n	8001a42 <fsm_start+0xa2>
            start_state = START_CONNECTING;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <fsm_start+0x118>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
        break;
 8001a40:	e036      	b.n	8001ab0 <fsm_start+0x110>
            timeout_connect--;
 8001a42:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <fsm_start+0x128>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac8 <fsm_start+0x128>)
 8001a4a:	6013      	str	r3, [r2, #0]
        break;
 8001a4c:	e030      	b.n	8001ab0 <fsm_start+0x110>

    case START_UPDATE_ID:
    	if (buffer[0] != '\0') {
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d02b      	beq.n	8001aae <fsm_start+0x10e>
    		handle_id(buffer, id_device);
 8001a56:	491d      	ldr	r1, [pc, #116]	@ (8001acc <fsm_start+0x12c>)
 8001a58:	6838      	ldr	r0, [r7, #0]
 8001a5a:	f7ff ff5d 	bl	8001918 <handle_id>
			if (sizeof(id_device) == 6) {
				start_state = START_IDLE;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <fsm_start+0x118>)
 8001a60:	2204      	movs	r2, #4
 8001a62:	701a      	strb	r2, [r3, #0]
			} else {
				start_state = START_CONNECTING;
			}
    	}
        break;
 8001a64:	e023      	b.n	8001aae <fsm_start+0x10e>

    case START_IDLE:
    	init_buzzer_and_led();
 8001a66:	f7ff ff8c 	bl	8001982 <init_buzzer_and_led>
    	HAL_Delay(200);
 8001a6a:	20c8      	movs	r0, #200	@ 0xc8
 8001a6c:	f001 fb04 	bl	8003078 <HAL_Delay>
    	init_buzzer_and_led();
 8001a70:	f7ff ff87 	bl	8001982 <init_buzzer_and_led>

    	HAL_UART_Transmit_IT(huart, id_device, 6);
 8001a74:	2206      	movs	r2, #6
 8001a76:	4915      	ldr	r1, [pc, #84]	@ (8001acc <fsm_start+0x12c>)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f006 f8b3 	bl	8007be4 <HAL_UART_Transmit_IT>
    	find_device_state = FIND_DEVICE_IDLE;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <fsm_start+0x130>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
    	handle_data_state = HANDLE_DATA_IDLE;
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <fsm_start+0x134>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
    	control_buzzer_state = CONTROL_BUZZER_IDLE;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <fsm_start+0x138>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
    	send_data_state = SEND_DATA_IDLE;
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <fsm_start+0x13c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
    	handle_data_flag = true;
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <fsm_start+0x140>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
    	start_idle_flag = true;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <fsm_start+0x144>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
    	handle_GPS_data_flag = true;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <fsm_start+0x11c>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]

        break;
 8001aa8:	e002      	b.n	8001ab0 <fsm_start+0x110>
    default:
        break;
 8001aaa:	bf00      	nop
 8001aac:	e000      	b.n	8001ab0 <fsm_start+0x110>
        break;
 8001aae:	bf00      	nop
    }
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200003c0 	.word	0x200003c0
 8001abc:	200004ce 	.word	0x200004ce
 8001ac0:	20000064 	.word	0x20000064
 8001ac4:	200004c9 	.word	0x200004c9
 8001ac8:	20000058 	.word	0x20000058
 8001acc:	2000005c 	.word	0x2000005c
 8001ad0:	200003c1 	.word	0x200003c1
 8001ad4:	200003c2 	.word	0x200003c2
 8001ad8:	200003c3 	.word	0x200003c3
 8001adc:	200003c4 	.word	0x200003c4
 8001ae0:	200004cf 	.word	0x200004cf
 8001ae4:	200004ca 	.word	0x200004ca

08001ae8 <onBuzzer>:
double az = 0;

uint32_t ADC_value = 123;


void onBuzzer(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2140      	movs	r1, #64	@ 0x40
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <onBuzzer+0x14>)
 8001af2:	f002 f9b9 	bl	8003e68 <HAL_GPIO_WritePin>
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020000 	.word	0x40020000

08001b00 <offBuzzer>:

void offBuzzer(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2140      	movs	r1, #64	@ 0x40
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <offBuzzer+0x14>)
 8001b0a:	f002 f9ad 	bl	8003e68 <HAL_GPIO_WritePin>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020000 	.word	0x40020000

08001b18 <toggleBuzzer>:

void toggleBuzzer(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001b1c:	2140      	movs	r1, #64	@ 0x40
 8001b1e:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <toggleBuzzer+0x10>)
 8001b20:	f002 f9ba 	bl	8003e98 <HAL_GPIO_TogglePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020000 	.word	0x40020000

08001b2c <onLed>:

void onLed(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2120      	movs	r1, #32
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <onLed+0x14>)
 8001b36:	f002 f997 	bl	8003e68 <HAL_GPIO_WritePin>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40020000 	.word	0x40020000

08001b44 <offLed>:

void offLed(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <offLed+0x14>)
 8001b4e:	f002 f98b 	bl	8003e68 <HAL_GPIO_WritePin>
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020000 	.word	0x40020000

08001b5c <uint8_tToChar>:

void toggleLed(void) {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

void uint8_tToChar(char* str, uint8_t* text) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 6; i++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	e00a      	b.n	8001b82 <uint8_tToChar+0x26>
		str[i] = (char)text[i];
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	441a      	add	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	440b      	add	r3, r1
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++) {
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	ddf1      	ble.n	8001b6c <uint8_tToChar+0x10>
	}
	str[6] = '\0';
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3306      	adds	r3, #6
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
	...

08001b9c <filterGPGGA>:
}
void sendTestMessage1() {
    char testMessage[] = "!aaaaaaaaaaaaa#\r\n";
    HAL_UART_Transmit(&huart1, (uint8_t*)testMessage, sizeof(testMessage), HAL_MAX_DELAY);
}
void filterGPGGA(const char* input) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    const char* gpggaStart = strstr(input, "$GNGGA"); // Tìm câu $GPGGA
 8001ba4:	4911      	ldr	r1, [pc, #68]	@ (8001bec <filterGPGGA+0x50>)
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f008 fa04 	bl	8009fb4 <strstr>
 8001bac:	6178      	str	r0, [r7, #20]
    if (gpggaStart != NULL) {
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d016      	beq.n	8001be2 <filterGPGGA+0x46>
        const char* gpggaEnd = strstr(gpggaStart, "\r\n"); // Tìm dấu kết thúc câu
 8001bb4:	490e      	ldr	r1, [pc, #56]	@ (8001bf0 <filterGPGGA+0x54>)
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f008 f9fc 	bl	8009fb4 <strstr>
 8001bbc:	6138      	str	r0, [r7, #16]
        if (gpggaEnd != NULL) {
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00e      	beq.n	8001be2 <filterGPGGA+0x46>
            size_t gpggaLength = gpggaEnd - gpggaStart + 2; // �?ộ dài câu $GPGGA
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	3302      	adds	r3, #2
 8001bcc:	60fb      	str	r3, [r7, #12]
            strncpy(gpggaBuffer, gpggaStart, gpggaLength); // Sao chép câu $GPGGA
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	6979      	ldr	r1, [r7, #20]
 8001bd2:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <filterGPGGA+0x58>)
 8001bd4:	f008 f97f 	bl	8009ed6 <strncpy>
            gpggaBuffer[gpggaLength] = '\0'; // Thêm ký tự kết thúc chuỗi
 8001bd8:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <filterGPGGA+0x58>)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	0800cab4 	.word	0x0800cab4
 8001bf0:	0800cabc 	.word	0x0800cabc
 8001bf4:	20000864 	.word	0x20000864

08001bf8 <parseGPSData>:


void parseGPSData(char* nmea) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    char* token;

    // Tìm chuỗi $GPGGA
    token = strstr(nmea, "$GNGGA");
 8001c00:	4965      	ldr	r1, [pc, #404]	@ (8001d98 <parseGPSData+0x1a0>)
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f008 f9d6 	bl	8009fb4 <strstr>
 8001c08:	6278      	str	r0, [r7, #36]	@ 0x24
//    token =  nmea;
    if (token != NULL) {
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80be 	beq.w	8001d8e <parseGPSData+0x196>
        token = strtok(token, ","); // B�? qua "$GPGGA"
 8001c12:	4962      	ldr	r1, [pc, #392]	@ (8001d9c <parseGPSData+0x1a4>)
 8001c14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c16:	f008 f971 	bl	8009efc <strtok>
 8001c1a:	6278      	str	r0, [r7, #36]	@ 0x24
        token = strtok(NULL, ","); // B�? qua th�?i gian
 8001c1c:	495f      	ldr	r1, [pc, #380]	@ (8001d9c <parseGPSData+0x1a4>)
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f008 f96c 	bl	8009efc <strtok>
 8001c24:	6278      	str	r0, [r7, #36]	@ 0x24
        token = strtok(NULL, ","); // Lấy giá trị vĩ độ (latitude)
 8001c26:	495d      	ldr	r1, [pc, #372]	@ (8001d9c <parseGPSData+0x1a4>)
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f008 f967 	bl	8009efc <strtok>
 8001c2e:	6278      	str	r0, [r7, #36]	@ 0x24

        if (token != NULL) {
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d051      	beq.n	8001cda <parseGPSData+0xe2>
            float rawLatitude = atof(token); // Lấy giá trị DDMM.MMMM
 8001c36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c38:	f006 fd96 	bl	8008768 <atof>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f7fe ff58 	bl	8000af8 <__aeabi_d2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	623b      	str	r3, [r7, #32]
            float degrees = (int)(rawLatitude / 100); // Lấy phần độ
 8001c4c:	4954      	ldr	r1, [pc, #336]	@ (8001da0 <parseGPSData+0x1a8>)
 8001c4e:	6a38      	ldr	r0, [r7, #32]
 8001c50:	f7ff f964 	bl	8000f1c <__aeabi_fdiv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fa72 	bl	8001140 <__aeabi_f2iz>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f854 	bl	8000d0c <__aeabi_i2f>
 8001c64:	4603      	mov	r3, r0
 8001c66:	61fb      	str	r3, [r7, #28]
            float minutes = rawLatitude - (degrees * 100); // Lấy phần phút
 8001c68:	494d      	ldr	r1, [pc, #308]	@ (8001da0 <parseGPSData+0x1a8>)
 8001c6a:	69f8      	ldr	r0, [r7, #28]
 8001c6c:	f7ff f8a2 	bl	8000db4 <__aeabi_fmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4619      	mov	r1, r3
 8001c74:	6a38      	ldr	r0, [r7, #32]
 8001c76:	f7fe ff93 	bl	8000ba0 <__aeabi_fsub>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	61bb      	str	r3, [r7, #24]
            latitude = degrees + (minutes / 60.0); // Chuyển sang decimal degrees
 8001c7e:	69f8      	ldr	r0, [r7, #28]
 8001c80:	f7fe fbea 	bl	8000458 <__aeabi_f2d>
 8001c84:	4604      	mov	r4, r0
 8001c86:	460d      	mov	r5, r1
 8001c88:	69b8      	ldr	r0, [r7, #24]
 8001c8a:	f7fe fbe5 	bl	8000458 <__aeabi_f2d>
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	4b44      	ldr	r3, [pc, #272]	@ (8001da4 <parseGPSData+0x1ac>)
 8001c94:	f7fe fd62 	bl	800075c <__aeabi_ddiv>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f7fe fa7c 	bl	800019c <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ff24 	bl	8000af8 <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a3d      	ldr	r2, [pc, #244]	@ (8001da8 <parseGPSData+0x1b0>)
 8001cb4:	6013      	str	r3, [r2, #0]

            token = strtok(NULL, ","); // Lấy hướng vĩ độ (N/S)
 8001cb6:	4939      	ldr	r1, [pc, #228]	@ (8001d9c <parseGPSData+0x1a4>)
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f008 f91f 	bl	8009efc <strtok>
 8001cbe:	6278      	str	r0, [r7, #36]	@ 0x24
            if (token != NULL && *token == 'S') {
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <parseGPSData+0xe2>
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b53      	cmp	r3, #83	@ 0x53
 8001ccc:	d105      	bne.n	8001cda <parseGPSData+0xe2>
                latitude = -latitude; // Nếu là 'S', đổi sang giá trị âm
 8001cce:	4b36      	ldr	r3, [pc, #216]	@ (8001da8 <parseGPSData+0x1b0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001cd6:	4a34      	ldr	r2, [pc, #208]	@ (8001da8 <parseGPSData+0x1b0>)
 8001cd8:	6013      	str	r3, [r2, #0]
            }
        }

        token = strtok(NULL, ","); // Lấy giá trị kinh độ (longitude)
 8001cda:	4930      	ldr	r1, [pc, #192]	@ (8001d9c <parseGPSData+0x1a4>)
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f008 f90d 	bl	8009efc <strtok>
 8001ce2:	6278      	str	r0, [r7, #36]	@ 0x24
        if (token != NULL) {
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d051      	beq.n	8001d8e <parseGPSData+0x196>
            float rawLongitude = atof(token); // Lấy giá trị DDMM.MMMM
 8001cea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cec:	f006 fd3c 	bl	8008768 <atof>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe fefe 	bl	8000af8 <__aeabi_d2f>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	617b      	str	r3, [r7, #20]
            float degrees = (int)(rawLongitude / 100); // Lấy phần độ
 8001d00:	4927      	ldr	r1, [pc, #156]	@ (8001da0 <parseGPSData+0x1a8>)
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff f90a 	bl	8000f1c <__aeabi_fdiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fa18 	bl	8001140 <__aeabi_f2iz>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fffa 	bl	8000d0c <__aeabi_i2f>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	613b      	str	r3, [r7, #16]
            float minutes = rawLongitude - (degrees * 100); // Lấy phần phút
 8001d1c:	4920      	ldr	r1, [pc, #128]	@ (8001da0 <parseGPSData+0x1a8>)
 8001d1e:	6938      	ldr	r0, [r7, #16]
 8001d20:	f7ff f848 	bl	8000db4 <__aeabi_fmul>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4619      	mov	r1, r3
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f7fe ff39 	bl	8000ba0 <__aeabi_fsub>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	60fb      	str	r3, [r7, #12]
            longitude = degrees + (minutes / 60.0); // Chuyển sang decimal degrees
 8001d32:	6938      	ldr	r0, [r7, #16]
 8001d34:	f7fe fb90 	bl	8000458 <__aeabi_f2d>
 8001d38:	4604      	mov	r4, r0
 8001d3a:	460d      	mov	r5, r1
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7fe fb8b 	bl	8000458 <__aeabi_f2d>
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <parseGPSData+0x1ac>)
 8001d48:	f7fe fd08 	bl	800075c <__aeabi_ddiv>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4620      	mov	r0, r4
 8001d52:	4629      	mov	r1, r5
 8001d54:	f7fe fa22 	bl	800019c <__adddf3>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe feca 	bl	8000af8 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a11      	ldr	r2, [pc, #68]	@ (8001dac <parseGPSData+0x1b4>)
 8001d68:	6013      	str	r3, [r2, #0]
            token = strtok(NULL, ","); // Lấy hướng kinh độ (E/W)
 8001d6a:	490c      	ldr	r1, [pc, #48]	@ (8001d9c <parseGPSData+0x1a4>)
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f008 f8c5 	bl	8009efc <strtok>
 8001d72:	6278      	str	r0, [r7, #36]	@ 0x24

            if (token != NULL && *token == 'W') {
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <parseGPSData+0x196>
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b57      	cmp	r3, #87	@ 0x57
 8001d80:	d105      	bne.n	8001d8e <parseGPSData+0x196>
                longitude = -longitude; // Nếu là 'W', đổi sang giá trị âm
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <parseGPSData+0x1b4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001d8a:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <parseGPSData+0x1b4>)
 8001d8c:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 8001d8e:	bf00      	nop
 8001d90:	3728      	adds	r7, #40	@ 0x28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bdb0      	pop	{r4, r5, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	0800cab4 	.word	0x0800cab4
 8001d9c:	0800cac0 	.word	0x0800cac0
 8001da0:	42c80000 	.word	0x42c80000
 8001da4:	404e0000 	.word	0x404e0000
 8001da8:	20000c68 	.word	0x20000c68
 8001dac:	20000c64 	.word	0x20000c64

08001db0 <sendCoordinates>:


void sendCoordinates() {
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af04      	add	r7, sp, #16
    if (latitude != 0.0 && longitude != 0.0) {
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <sendCoordinates+0xa8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f98c 	bl	80010dc <__aeabi_fcmpeq>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d131      	bne.n	8001e2e <sendCoordinates+0x7e>
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <sendCoordinates+0xac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f982 	bl	80010dc <__aeabi_fcmpeq>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d127      	bne.n	8001e2e <sendCoordinates+0x7e>
    	uint8_tToChar(id, id_device);
 8001dde:	4920      	ldr	r1, [pc, #128]	@ (8001e60 <sendCoordinates+0xb0>)
 8001de0:	4820      	ldr	r0, [pc, #128]	@ (8001e64 <sendCoordinates+0xb4>)
 8001de2:	f7ff febb 	bl	8001b5c <uint8_tToChar>
        snprintf(outputBuffer, sizeof(outputBuffer), "!ID:%s:GPS:%.6f:%.6f#\r\n", id, longitude, latitude);
 8001de6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <sendCoordinates+0xac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb34 	bl	8000458 <__aeabi_f2d>
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <sendCoordinates+0xa8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fb2d 	bl	8000458 <__aeabi_f2d>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e06:	e9cd 4500 	strd	r4, r5, [sp]
 8001e0a:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <sendCoordinates+0xb4>)
 8001e0c:	4a16      	ldr	r2, [pc, #88]	@ (8001e68 <sendCoordinates+0xb8>)
 8001e0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e12:	4816      	ldr	r0, [pc, #88]	@ (8001e6c <sendCoordinates+0xbc>)
 8001e14:	f007 ffce 	bl	8009db4 <sniprintf>
        HAL_UART_Transmit_IT(&huart1, (uint8_t*)outputBuffer, strlen(outputBuffer));
 8001e18:	4814      	ldr	r0, [pc, #80]	@ (8001e6c <sendCoordinates+0xbc>)
 8001e1a:	f7fe f9b1 	bl	8000180 <strlen>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	4911      	ldr	r1, [pc, #68]	@ (8001e6c <sendCoordinates+0xbc>)
 8001e26:	4812      	ldr	r0, [pc, #72]	@ (8001e70 <sendCoordinates+0xc0>)
 8001e28:	f005 fedc 	bl	8007be4 <HAL_UART_Transmit_IT>
 8001e2c:	e010      	b.n	8001e50 <sendCoordinates+0xa0>
    } else {
        snprintf(outputBuffer, sizeof(outputBuffer), "!Invalid GPS Data#\r\n");
 8001e2e:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <sendCoordinates+0xc4>)
 8001e30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e34:	480d      	ldr	r0, [pc, #52]	@ (8001e6c <sendCoordinates+0xbc>)
 8001e36:	f007 ffbd 	bl	8009db4 <sniprintf>
        HAL_UART_Transmit_IT(&huart1, (uint8_t*)outputBuffer, strlen(outputBuffer));
 8001e3a:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <sendCoordinates+0xbc>)
 8001e3c:	f7fe f9a0 	bl	8000180 <strlen>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4909      	ldr	r1, [pc, #36]	@ (8001e6c <sendCoordinates+0xbc>)
 8001e48:	4809      	ldr	r0, [pc, #36]	@ (8001e70 <sendCoordinates+0xc0>)
 8001e4a:	f005 fecb 	bl	8007be4 <HAL_UART_Transmit_IT>
    }
    //memset(outputBuffer, 0, sizeof(outputBuffer));
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bdb0      	pop	{r4, r5, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000c68 	.word	0x20000c68
 8001e5c:	20000c64 	.word	0x20000c64
 8001e60:	2000005c 	.word	0x2000005c
 8001e64:	2000016c 	.word	0x2000016c
 8001e68:	0800cac4 	.word	0x0800cac4
 8001e6c:	20000a64 	.word	0x20000a64
 8001e70:	200005d0 	.word	0x200005d0
 8001e74:	0800cadc 	.word	0x0800cadc

08001e78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a21      	ldr	r2, [pc, #132]	@ (8001f0c <HAL_UART_RxCpltCallback+0x94>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d12b      	bne.n	8001ee2 <HAL_UART_RxCpltCallback+0x6a>
		if (temp != 13) {
 8001e8a:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <HAL_UART_RxCpltCallback+0x98>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b0d      	cmp	r3, #13
 8001e90:	d016      	beq.n	8001ec0 <HAL_UART_RxCpltCallback+0x48>
			if (buffer_index < MAX_BUFFER_SIZE - 1) {
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2bff      	cmp	r3, #255	@ 0xff
 8001e98:	d00b      	beq.n	8001eb2 <HAL_UART_RxCpltCallback+0x3a>
				buffer[buffer_index++] = temp;
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	b2d1      	uxtb	r1, r2
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001ea4:	7011      	strb	r1, [r2, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_UART_RxCpltCallback+0x98>)
 8001eaa:	7819      	ldrb	r1, [r3, #0]
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_UART_RxCpltCallback+0xa0>)
 8001eae:	5499      	strb	r1, [r3, r2]
 8001eb0:	e012      	b.n	8001ed8 <HAL_UART_RxCpltCallback+0x60>
			} else {
				buffer_index = 0;
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
				buffer_flag = 1;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <HAL_UART_RxCpltCallback+0xa4>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_UART_RxCpltCallback+0x60>
			}
		} else {
			buffer[buffer_index] = '\0';
 8001ec0:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <HAL_UART_RxCpltCallback+0xa0>)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]
			buffer_index = 0;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_UART_RxCpltCallback+0x9c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
			buffer_flag = 1;
 8001ed2:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_UART_RxCpltCallback+0xa4>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &temp, 1);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	490d      	ldr	r1, [pc, #52]	@ (8001f10 <HAL_UART_RxCpltCallback+0x98>)
 8001edc:	4810      	ldr	r0, [pc, #64]	@ (8001f20 <HAL_UART_RxCpltCallback+0xa8>)
 8001ede:	f005 feb6 	bl	8007c4e <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART2) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f24 <HAL_UART_RxCpltCallback+0xac>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d10b      	bne.n	8001f04 <HAL_UART_RxCpltCallback+0x8c>
		filterGPGGA(gpsBuffer);
 8001eec:	480e      	ldr	r0, [pc, #56]	@ (8001f28 <HAL_UART_RxCpltCallback+0xb0>)
 8001eee:	f7ff fe55 	bl	8001b9c <filterGPGGA>
		parseGPSData(gpggaBuffer);
 8001ef2:	480e      	ldr	r0, [pc, #56]	@ (8001f2c <HAL_UART_RxCpltCallback+0xb4>)
 8001ef4:	f7ff fe80 	bl	8001bf8 <parseGPSData>
//		sendCoordinates();
		HAL_UART_Receive_IT(&huart2, (uint8_t*)gpsBuffer, BUFFER_SIZE);
 8001ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001efc:	490a      	ldr	r1, [pc, #40]	@ (8001f28 <HAL_UART_RxCpltCallback+0xb0>)
 8001efe:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <HAL_UART_RxCpltCallback+0xb8>)
 8001f00:	f005 fea5 	bl	8007c4e <HAL_UART_Receive_IT>
	}
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40013800 	.word	0x40013800
 8001f10:	200003c5 	.word	0x200003c5
 8001f14:	200004c8 	.word	0x200004c8
 8001f18:	200003c8 	.word	0x200003c8
 8001f1c:	200004c9 	.word	0x200004c9
 8001f20:	200005d0 	.word	0x200005d0
 8001f24:	40004400 	.word	0x40004400
 8001f28:	20000664 	.word	0x20000664
 8001f2c:	20000864 	.word	0x20000864
 8001f30:	20000618 	.word	0x20000618

08001f34 <fsm_start_task>:

void fsm_start_task(void) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	fsm_start(&huart1, buffer);
 8001f38:	4902      	ldr	r1, [pc, #8]	@ (8001f44 <fsm_start_task+0x10>)
 8001f3a:	4803      	ldr	r0, [pc, #12]	@ (8001f48 <fsm_start_task+0x14>)
 8001f3c:	f7ff fd30 	bl	80019a0 <fsm_start>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200003c8 	.word	0x200003c8
 8001f48:	200005d0 	.word	0x200005d0

08001f4c <fsm_find_device_task>:

void fsm_find_device_task(void) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	fsm_find_device(&huart1);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <fsm_find_device_task+0x10>)
 8001f52:	f7ff fbf3 	bl	800173c <fsm_find_device>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200005d0 	.word	0x200005d0

08001f60 <fsm_control_buzzer_task>:

void fsm_control_buzzer_task(void) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	fsm_control_buzzer(&huart1);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <fsm_control_buzzer_task+0x10>)
 8001f66:	f7ff fb29 	bl	80015bc <fsm_control_buzzer>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200005d0 	.word	0x200005d0

08001f74 <fsm_handle_data_task>:

void fsm_handle_data_task(void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	handleBatteryData(&hadc);
 8001f78:	4803      	ldr	r0, [pc, #12]	@ (8001f88 <fsm_handle_data_task+0x14>)
 8001f7a:	f7ff fc61 	bl	8001840 <handleBatteryData>
	handleSensorData(&hi2c1);
 8001f7e:	4803      	ldr	r0, [pc, #12]	@ (8001f8c <fsm_handle_data_task+0x18>)
 8001f80:	f7ff fc38 	bl	80017f4 <handleSensorData>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200004e8 	.word	0x200004e8
 8001f8c:	2000053c 	.word	0x2000053c

08001f90 <fsm_send_data_task>:

void fsm_send_data_task(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	if (handle_data_flag == true) {
 8001f94:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <fsm_send_data_task+0x18>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <fsm_send_data_task+0x14>
		send_data(&huart1);
 8001f9e:	4803      	ldr	r0, [pc, #12]	@ (8001fac <fsm_send_data_task+0x1c>)
 8001fa0:	f7ff fc5e 	bl	8001860 <send_data>
	}
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200004cf 	.word	0x200004cf
 8001fac:	200005d0 	.word	0x200005d0

08001fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb4:	f000 fff1 	bl	8002f9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb8:	f000 f8a0 	bl	80020fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fbc:	f000 fa12 	bl	80023e4 <MX_GPIO_Init>
  MX_ADC_Init();
 8001fc0:	f000 f8ea 	bl	8002198 <MX_ADC_Init>
  MX_I2C1_Init();
 8001fc4:	f000 f940 	bl	8002248 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001fc8:	f000 f96c 	bl	80022a4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001fcc:	f000 f9b6 	bl	800233c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001fd0:	f000 f9de 	bl	8002390 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001fd4:	4836      	ldr	r0, [pc, #216]	@ (80020b0 <main+0x100>)
 8001fd6:	f005 fa45 	bl	8007464 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2101      	movs	r1, #1
 8001fde:	4835      	ldr	r0, [pc, #212]	@ (80020b4 <main+0x104>)
 8001fe0:	f001 ff42 	bl	8003e68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, RESET);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4832      	ldr	r0, [pc, #200]	@ (80020b4 <main+0x104>)
 8001fea:	f001 ff3d 	bl	8003e68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2140      	movs	r1, #64	@ 0x40
 8001ff2:	4831      	ldr	r0, [pc, #196]	@ (80020b8 <main+0x108>)
 8001ff4:	f001 ff38 	bl	8003e68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2120      	movs	r1, #32
 8001ffc:	482e      	ldr	r0, [pc, #184]	@ (80020b8 <main+0x108>)
 8001ffe:	f001 ff33 	bl	8003e68 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, &temp, 1);
 8002002:	2201      	movs	r2, #1
 8002004:	492d      	ldr	r1, [pc, #180]	@ (80020bc <main+0x10c>)
 8002006:	482e      	ldr	r0, [pc, #184]	@ (80020c0 <main+0x110>)
 8002008:	f005 fe21 	bl	8007c4e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)gpsBuffer, BUFFER_SIZE);
 800200c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002010:	492c      	ldr	r1, [pc, #176]	@ (80020c4 <main+0x114>)
 8002012:	482d      	ldr	r0, [pc, #180]	@ (80020c8 <main+0x118>)
 8002014:	f005 fe1b 	bl	8007c4e <HAL_UART_Receive_IT>
  MPU6050_Init(&hi2c1);
 8002018:	482c      	ldr	r0, [pc, #176]	@ (80020cc <main+0x11c>)
 800201a:	f000 fa8b 	bl	8002534 <MPU6050_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(fsm_start_task, 1, 1);
 800201e:	2201      	movs	r2, #1
 8002020:	2101      	movs	r1, #1
 8002022:	482b      	ldr	r0, [pc, #172]	@ (80020d0 <main+0x120>)
 8002024:	f000 fb42 	bl	80026ac <SCH_Add_Task>
  SCH_Add_Task(fsm_find_device_task, 2, 1);
 8002028:	2201      	movs	r2, #1
 800202a:	2102      	movs	r1, #2
 800202c:	4829      	ldr	r0, [pc, #164]	@ (80020d4 <main+0x124>)
 800202e:	f000 fb3d 	bl	80026ac <SCH_Add_Task>
  SCH_Add_Task(fsm_control_buzzer_task, 3, 1);
 8002032:	2201      	movs	r2, #1
 8002034:	2103      	movs	r1, #3
 8002036:	4828      	ldr	r0, [pc, #160]	@ (80020d8 <main+0x128>)
 8002038:	f000 fb38 	bl	80026ac <SCH_Add_Task>
  SCH_Add_Task(fsm_handle_data_task, 5, 1);
 800203c:	2201      	movs	r2, #1
 800203e:	2105      	movs	r1, #5
 8002040:	4826      	ldr	r0, [pc, #152]	@ (80020dc <main+0x12c>)
 8002042:	f000 fb33 	bl	80026ac <SCH_Add_Task>
//  SCH_Add_Task(fsm_send_data_task, 6, 10000);
  setTimer0(1000);
 8002046:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800204a:	f000 fc75 	bl	8002938 <setTimer0>
  setTimer1(5000);
 800204e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002052:	f000 fc85 	bl	8002960 <setTimer1>
  while (1)
  {
	  if (handle_GPS_data_flag == true) {
 8002056:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <main+0x130>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <main+0xc8>
		  if (u8_flag_10ms){
 8002060:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <main+0x134>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <main+0xc8>
			u8_flag_10ms = 0;
 8002068:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <main+0x134>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
			parseGPSData(gpggaBuffer);
 800206e:	481e      	ldr	r0, [pc, #120]	@ (80020e8 <main+0x138>)
 8002070:	f7ff fdc2 	bl	8001bf8 <parseGPSData>
			sendCoordinates();
 8002074:	f7ff fe9c 	bl	8001db0 <sendCoordinates>
		  }
	  }
	  if (timer1_flag == 1) {
 8002078:	4b1c      	ldr	r3, [pc, #112]	@ (80020ec <main+0x13c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d109      	bne.n	8002094 <main+0xe4>
		  SENSOR_flag = true;
 8002080:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <main+0x140>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
		  BATTERY_flag = true;
 8002086:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <main+0x144>)
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
		  setTimer1(5000);
 800208c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002090:	f000 fc66 	bl	8002960 <setTimer1>
	  }

	  if (start_idle_flag) {
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <main+0x148>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <main+0xfa>
		  start_idle_flag = false;
 800209e:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <main+0x148>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
		  SCH_Delete_Task(fsm_start_task);
 80020a4:	480a      	ldr	r0, [pc, #40]	@ (80020d0 <main+0x120>)
 80020a6:	f000 fbf9 	bl	800289c <SCH_Delete_Task>
	  }
	  SCH_Dispatch_Tasks();
 80020aa:	f000 fbb5 	bl	8002818 <SCH_Dispatch_Tasks>
	  if (handle_GPS_data_flag == true) {
 80020ae:	e7d2      	b.n	8002056 <main+0xa6>
 80020b0:	20000590 	.word	0x20000590
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40020000 	.word	0x40020000
 80020bc:	200003c5 	.word	0x200003c5
 80020c0:	200005d0 	.word	0x200005d0
 80020c4:	20000664 	.word	0x20000664
 80020c8:	20000618 	.word	0x20000618
 80020cc:	2000053c 	.word	0x2000053c
 80020d0:	08001f35 	.word	0x08001f35
 80020d4:	08001f4d 	.word	0x08001f4d
 80020d8:	08001f61 	.word	0x08001f61
 80020dc:	08001f75 	.word	0x08001f75
 80020e0:	200004ce 	.word	0x200004ce
 80020e4:	20000660 	.word	0x20000660
 80020e8:	20000864 	.word	0x20000864
 80020ec:	20000e14 	.word	0x20000e14
 80020f0:	200004cd 	.word	0x200004cd
 80020f4:	200004cc 	.word	0x200004cc
 80020f8:	200004ca 	.word	0x200004ca

080020fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b092      	sub	sp, #72	@ 0x48
 8002100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	2234      	movs	r2, #52	@ 0x34
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f007 fec9 	bl	8009ea2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <SystemClock_Config+0x98>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8002126:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <SystemClock_Config+0x98>)
 8002128:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800212c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800212e:	2302      	movs	r3, #2
 8002130:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002132:	2301      	movs	r3, #1
 8002134:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002136:	2310      	movs	r3, #16
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213a:	2302      	movs	r3, #2
 800213c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800213e:	2300      	movs	r3, #0
 8002140:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002142:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002146:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8002148:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800214c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fb92 	bl	800687c <HAL_RCC_OscConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800215e:	f000 f9e3 	bl	8002528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002162:	230f      	movs	r3, #15
 8002164:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002166:	2303      	movs	r3, #3
 8002168:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002176:	463b      	mov	r3, r7
 8002178:	2101      	movs	r1, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f004 feae 	bl	8006edc <HAL_RCC_ClockConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002186:	f000 f9cf 	bl	8002528 <Error_Handler>
  }
}
 800218a:	bf00      	nop
 800218c:	3748      	adds	r7, #72	@ 0x48
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40007000 	.word	0x40007000

08002198 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80021a8:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021aa:	4a26      	ldr	r2, [pc, #152]	@ (8002244 <MX_ADC_Init+0xac>)
 80021ac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80021ae:	4b24      	ldr	r3, [pc, #144]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80021b4:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80021c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80021cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80021d8:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021f6:	2210      	movs	r2, #16
 80021f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021fa:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <MX_ADC_Init+0xa8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002200:	4b0f      	ldr	r3, [pc, #60]	@ (8002240 <MX_ADC_Init+0xa8>)
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002208:	480d      	ldr	r0, [pc, #52]	@ (8002240 <MX_ADC_Init+0xa8>)
 800220a:	f000 ff57 	bl	80030bc <HAL_ADC_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8002214:	f000 f988 	bl	8002528 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002218:	2300      	movs	r3, #0
 800221a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800221c:	2301      	movs	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	@ (8002240 <MX_ADC_Init+0xa8>)
 800222a:	f001 f9ab 	bl	8003584 <HAL_ADC_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8002234:	f000 f978 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200004e8 	.word	0x200004e8
 8002244:	40012400 	.word	0x40012400

08002248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <MX_I2C1_Init+0x50>)
 800224e:	4a13      	ldr	r2, [pc, #76]	@ (800229c <MX_I2C1_Init+0x54>)
 8002250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <MX_I2C1_Init+0x50>)
 8002254:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <MX_I2C1_Init+0x58>)
 8002256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <MX_I2C1_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <MX_I2C1_Init+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <MX_I2C1_Init+0x50>)
 8002266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800226a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <MX_I2C1_Init+0x50>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <MX_I2C1_Init+0x50>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002278:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <MX_I2C1_Init+0x50>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <MX_I2C1_Init+0x50>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002284:	4804      	ldr	r0, [pc, #16]	@ (8002298 <MX_I2C1_Init+0x50>)
 8002286:	f001 fe21 	bl	8003ecc <HAL_I2C_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002290:	f000 f94a 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000053c 	.word	0x2000053c
 800229c:	40005400 	.word	0x40005400
 80022a0:	00061a80 	.word	0x00061a80

080022a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b8:	463b      	mov	r3, r7
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022ca:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80022ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022d8:	2207      	movs	r2, #7
 80022da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022e8:	4813      	ldr	r0, [pc, #76]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022ea:	f005 f87b 	bl	80073e4 <HAL_TIM_Base_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022f4:	f000 f918 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	4619      	mov	r1, r3
 8002304:	480c      	ldr	r0, [pc, #48]	@ (8002338 <MX_TIM2_Init+0x94>)
 8002306:	f005 f9db 	bl	80076c0 <HAL_TIM_ConfigClockSource>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002310:	f000 f90a 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800231c:	463b      	mov	r3, r7
 800231e:	4619      	mov	r1, r3
 8002320:	4805      	ldr	r0, [pc, #20]	@ (8002338 <MX_TIM2_Init+0x94>)
 8002322:	f005 fbb1 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800232c:	f000 f8fc 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002330:	bf00      	nop
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000590 	.word	0x20000590

0800233c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002342:	4a12      	ldr	r2, [pc, #72]	@ (800238c <MX_USART1_UART_Init+0x50>)
 8002344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002348:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800234c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800235a:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002362:	220c      	movs	r2, #12
 8002364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002372:	4805      	ldr	r0, [pc, #20]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002374:	f005 fbe6 	bl	8007b44 <HAL_UART_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800237e:	f000 f8d3 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200005d0 	.word	0x200005d0
 800238c:	40013800 	.word	0x40013800

08002390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <MX_USART2_UART_Init+0x4c>)
 8002396:	4a12      	ldr	r2, [pc, #72]	@ (80023e0 <MX_USART2_UART_Init+0x50>)
 8002398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <MX_USART2_UART_Init+0x4c>)
 800239c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <MX_USART2_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <MX_USART2_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <MX_USART2_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023b4:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <MX_USART2_UART_Init+0x4c>)
 80023b6:	220c      	movs	r2, #12
 80023b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <MX_USART2_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <MX_USART2_UART_Init+0x4c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	@ (80023dc <MX_USART2_UART_Init+0x4c>)
 80023c8:	f005 fbbc 	bl	8007b44 <HAL_UART_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023d2:	f000 f8a9 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000618 	.word	0x20000618
 80023e0:	40004400 	.word	0x40004400

080023e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fa:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <MX_GPIO_Init+0xb4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a26      	ldr	r2, [pc, #152]	@ (8002498 <MX_GPIO_Init+0xb4>)
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <MX_GPIO_Init+0xb4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	4b21      	ldr	r3, [pc, #132]	@ (8002498 <MX_GPIO_Init+0xb4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a20      	ldr	r2, [pc, #128]	@ (8002498 <MX_GPIO_Init+0xb4>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <MX_GPIO_Init+0xb4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <MX_GPIO_Init+0xb4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a1a      	ldr	r2, [pc, #104]	@ (8002498 <MX_GPIO_Init+0xb4>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <MX_GPIO_Init+0xb4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2160      	movs	r1, #96	@ 0x60
 8002446:	4815      	ldr	r0, [pc, #84]	@ (800249c <MX_GPIO_Init+0xb8>)
 8002448:	f001 fd0e 	bl	8003e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	2103      	movs	r1, #3
 8002450:	4813      	ldr	r0, [pc, #76]	@ (80024a0 <MX_GPIO_Init+0xbc>)
 8002452:	f001 fd09 	bl	8003e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZER_Pin;
 8002456:	2360      	movs	r3, #96	@ 0x60
 8002458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245a:	2301      	movs	r3, #1
 800245c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	4619      	mov	r1, r3
 800246c:	480b      	ldr	r0, [pc, #44]	@ (800249c <MX_GPIO_Init+0xb8>)
 800246e:	f001 fb7b 	bl	8003b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 8002472:	2303      	movs	r3, #3
 8002474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <MX_GPIO_Init+0xbc>)
 800248a:	f001 fb6d 	bl	8003b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800248e:	bf00      	nop
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40020400 	.word	0x40020400

080024a4 <HAL_TIM_PeriodElapsedCallback>:
//	timerRun();
//}

int counter_s = 0;
int counter_gps = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80024ac:	f000 f954 	bl	8002758 <SCH_Update>
	timerRun();
 80024b0:	f000 fa6a 	bl	8002988 <timerRun>
	if(htim->Instance==TIM2) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024bc:	d126      	bne.n	800250c <HAL_TIM_PeriodElapsedCallback+0x68>
		if (counter_gps >= 5000) {
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80024c6:	4293      	cmp	r3, r2
 80024c8:	dd05      	ble.n	80024d6 <HAL_TIM_PeriodElapsedCallback+0x32>
			counter_gps = 0;
 80024ca:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
			u8_flag_10ms = 1;
 80024d0:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
		}
		if (counter_s >= 5123) {
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f241 4202 	movw	r2, #5122	@ 0x1402
 80024de:	4293      	cmp	r3, r2
 80024e0:	dd0a      	ble.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x54>
			counter_s = 0;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
			handleSensorData(&hi2c1);
 80024e8:	480d      	ldr	r0, [pc, #52]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80024ea:	f7ff f983 	bl	80017f4 <handleSensorData>
			handleBatteryData(&hadc);
 80024ee:	480d      	ldr	r0, [pc, #52]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80024f0:	f7ff f9a6 	bl	8001840 <handleBatteryData>
			fsm_send_data_task();
 80024f4:	f7ff fd4c 	bl	8001f90 <fsm_send_data_task>
		}
		counter_gps++;
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002500:	6013      	str	r3, [r2, #0]
		counter_s++;
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800250a:	6013      	str	r3, [r2, #0]
	}
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000c70 	.word	0x20000c70
 8002518:	20000660 	.word	0x20000660
 800251c:	20000c6c 	.word	0x20000c6c
 8002520:	2000053c 	.word	0x2000053c
 8002524:	200004e8 	.word	0x200004e8

08002528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800252c:	b672      	cpsid	i
}
 800252e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <Error_Handler+0x8>

08002534 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af04      	add	r7, sp, #16
 800253a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800253c:	2364      	movs	r3, #100	@ 0x64
 800253e:	9302      	str	r3, [sp, #8]
 8002540:	2301      	movs	r3, #1
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	f107 030f 	add.w	r3, r7, #15
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	2275      	movs	r2, #117	@ 0x75
 800254e:	21d0      	movs	r1, #208	@ 0xd0
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f001 ff0d 	bl	8004370 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b68      	cmp	r3, #104	@ 0x68
 800255a:	d13d      	bne.n	80025d8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002560:	2364      	movs	r3, #100	@ 0x64
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	2301      	movs	r3, #1
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	f107 030e 	add.w	r3, r7, #14
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2301      	movs	r3, #1
 8002570:	226b      	movs	r2, #107	@ 0x6b
 8002572:	21d0      	movs	r1, #208	@ 0xd0
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f001 fe01 	bl	800417c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800257a:	2307      	movs	r3, #7
 800257c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800257e:	2364      	movs	r3, #100	@ 0x64
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	2301      	movs	r3, #1
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	f107 030e 	add.w	r3, r7, #14
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2301      	movs	r3, #1
 800258e:	2219      	movs	r2, #25
 8002590:	21d0      	movs	r1, #208	@ 0xd0
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f001 fdf2 	bl	800417c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002598:	2300      	movs	r3, #0
 800259a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800259c:	2364      	movs	r3, #100	@ 0x64
 800259e:	9302      	str	r3, [sp, #8]
 80025a0:	2301      	movs	r3, #1
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	f107 030e 	add.w	r3, r7, #14
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2301      	movs	r3, #1
 80025ac:	221c      	movs	r2, #28
 80025ae:	21d0      	movs	r1, #208	@ 0xd0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f001 fde3 	bl	800417c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80025ba:	2364      	movs	r3, #100	@ 0x64
 80025bc:	9302      	str	r3, [sp, #8]
 80025be:	2301      	movs	r3, #1
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	f107 030e 	add.w	r3, r7, #14
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2301      	movs	r3, #1
 80025ca:	221b      	movs	r2, #27
 80025cc:	21d0      	movs	r1, #208	@ 0xd0
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f001 fdd4 	bl	800417c <HAL_I2C_Mem_Write>
        return 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <MPU6050_Init+0xa6>
    }
    return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af04      	add	r7, sp, #16
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80025ee:	2364      	movs	r3, #100	@ 0x64
 80025f0:	9302      	str	r3, [sp, #8]
 80025f2:	2306      	movs	r3, #6
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	223b      	movs	r2, #59	@ 0x3b
 8002600:	21d0      	movs	r1, #208	@ 0xd0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f001 feb4 	bl	8004370 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002608:	7a3b      	ldrb	r3, [r7, #8]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	b21a      	sxth	r2, r3
 800260e:	7a7b      	ldrb	r3, [r7, #9]
 8002610:	b21b      	sxth	r3, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	b21a      	sxth	r2, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800261a:	7abb      	ldrb	r3, [r7, #10]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	b21a      	sxth	r2, r3
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	b21b      	sxth	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b21a      	sxth	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800262c:	7b3b      	ldrb	r3, [r7, #12]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	b21a      	sxth	r2, r3
 8002632:	7b7b      	ldrb	r3, [r7, #13]
 8002634:	b21b      	sxth	r3, r3
 8002636:	4313      	orrs	r3, r2
 8002638:	b21a      	sxth	r2, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd fef5 	bl	8000434 <__aeabi_i2d>
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <MPU6050_Read_Accel+0xc4>)
 8002650:	f7fe f884 	bl	800075c <__aeabi_ddiv>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	6839      	ldr	r1, [r7, #0]
 800265a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd fee5 	bl	8000434 <__aeabi_i2d>
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	4b0e      	ldr	r3, [pc, #56]	@ (80026a8 <MPU6050_Read_Accel+0xc4>)
 8002670:	f7fe f874 	bl	800075c <__aeabi_ddiv>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd fed5 	bl	8000434 <__aeabi_i2d>
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <MPU6050_Read_Accel+0xc4>)
 8002690:	f7fe f864 	bl	800075c <__aeabi_ddiv>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40d00000 	.word	0x40d00000

080026ac <SCH_Add_Task>:

void SCH_Init(void) {
	current_index_task = 0;
}

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASKS) {
 80026b8:	4b25      	ldr	r3, [pc, #148]	@ (8002750 <SCH_Add_Task+0xa4>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b13      	cmp	r3, #19
 80026be:	d842      	bhi.n	8002746 <SCH_Add_Task+0x9a>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 80026c0:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <SCH_Add_Task+0xa4>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4a23      	ldr	r2, [pc, #140]	@ (8002754 <SCH_Add_Task+0xa8>)
 80026c8:	460b      	mov	r3, r1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 80026d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <SCH_Add_Task+0xa4>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <SCH_Add_Task+0xa8>)
 80026de:	460b      	mov	r3, r1
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD;
 80026ee:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <SCH_Add_Task+0xa4>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4a17      	ldr	r2, [pc, #92]	@ (8002754 <SCH_Add_Task+0xa8>)
 80026f6:	460b      	mov	r3, r1
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	3308      	adds	r3, #8
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8002706:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <SCH_Add_Task+0xa4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4a11      	ldr	r2, [pc, #68]	@ (8002754 <SCH_Add_Task+0xa8>)
 800270e:	460b      	mov	r3, r1
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	330c      	adds	r3, #12
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <SCH_Add_Task+0xa4>)
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <SCH_Add_Task+0xa4>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <SCH_Add_Task+0xa8>)
 800272c:	460b      	mov	r3, r1
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	3310      	adds	r3, #16
 8002738:	6018      	str	r0, [r3, #0]
		current_index_task++;
 800273a:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <SCH_Add_Task+0xa4>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <SCH_Add_Task+0xa4>)
 8002744:	701a      	strb	r2, [r3, #0]
	}
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	20000e04 	.word	0x20000e04
 8002754:	20000c74 	.word	0x20000c74

08002758 <SCH_Update>:

void SCH_Update(void) {
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	e048      	b.n	80027f6 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0) {
 8002764:	492a      	ldr	r1, [pc, #168]	@ (8002810 <SCH_Update+0xb8>)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3304      	adds	r3, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d013      	beq.n	80027a2 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 800277a:	4925      	ldr	r1, [pc, #148]	@ (8002810 <SCH_Update+0xb8>)
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3304      	adds	r3, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	1e59      	subs	r1, r3, #1
 800278e:	4820      	ldr	r0, [pc, #128]	@ (8002810 <SCH_Update+0xb8>)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4403      	add	r3, r0
 800279c:	3304      	adds	r3, #4
 800279e:	6019      	str	r1, [r3, #0]
 80027a0:	e026      	b.n	80027f0 <SCH_Update+0x98>
		} else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80027a2:	491b      	ldr	r1, [pc, #108]	@ (8002810 <SCH_Update+0xb8>)
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	3308      	adds	r3, #8
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	4816      	ldr	r0, [pc, #88]	@ (8002810 <SCH_Update+0xb8>)
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4403      	add	r3, r0
 80027c2:	3304      	adds	r3, #4
 80027c4:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 80027c6:	4912      	ldr	r1, [pc, #72]	@ (8002810 <SCH_Update+0xb8>)
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	330c      	adds	r3, #12
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	b2d8      	uxtb	r0, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	@ (8002810 <SCH_Update+0xb8>)
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	330c      	adds	r3, #12
 80027ec:	4602      	mov	r2, r0
 80027ee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < current_index_task; i++) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3301      	adds	r3, #1
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <SCH_Update+0xbc>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4293      	cmp	r3, r2
 8002800:	dbb0      	blt.n	8002764 <SCH_Update+0xc>
		}
	}
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000c74 	.word	0x20000c74
 8002814:	20000e04 	.word	0x20000e04

08002818 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	e02b      	b.n	800287c <SCH_Dispatch_Tasks+0x64>
		if (SCH_tasks_G[i].RunMe > 0) {
 8002824:	491b      	ldr	r1, [pc, #108]	@ (8002894 <SCH_Dispatch_Tasks+0x7c>)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	330c      	adds	r3, #12
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01d      	beq.n	8002876 <SCH_Dispatch_Tasks+0x5e>
			SCH_tasks_G[i].RunMe--;
 800283a:	4916      	ldr	r1, [pc, #88]	@ (8002894 <SCH_Dispatch_Tasks+0x7c>)
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	330c      	adds	r3, #12
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	3b01      	subs	r3, #1
 800284e:	b2d8      	uxtb	r0, r3
 8002850:	4910      	ldr	r1, [pc, #64]	@ (8002894 <SCH_Dispatch_Tasks+0x7c>)
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	330c      	adds	r3, #12
 8002860:	4602      	mov	r2, r0
 8002862:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8002864:	490b      	ldr	r1, [pc, #44]	@ (8002894 <SCH_Dispatch_Tasks+0x7c>)
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4798      	blx	r3
	for (int i = 0; i < current_index_task; i++) {
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3301      	adds	r3, #1
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <SCH_Dispatch_Tasks+0x80>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4293      	cmp	r3, r2
 8002886:	dbcd      	blt.n	8002824 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000c74 	.word	0x20000c74
 8002898:	20000e04 	.word	0x20000e04

0800289c <SCH_Delete_Task>:

void SCH_Delete_Task(void (*pFunction)()) {
 800289c:	b4b0      	push	{r4, r5, r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < current_index_task; i++) {
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e035      	b.n	8002916 <SCH_Delete_Task+0x7a>
        if (SCH_tasks_G[i].pTask == pFunction) {
 80028aa:	4921      	ldr	r1, [pc, #132]	@ (8002930 <SCH_Delete_Task+0x94>)
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d127      	bne.n	8002910 <SCH_Delete_Task+0x74>
            for (int j = i; j < current_index_task - 1; j++) {
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	e017      	b.n	80028f6 <SCH_Delete_Task+0x5a>
                SCH_tasks_G[j] = SCH_tasks_G[j + 1];
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	4819      	ldr	r0, [pc, #100]	@ (8002930 <SCH_Delete_Task+0x94>)
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	460b      	mov	r3, r1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4418      	add	r0, r3
 80028d8:	4915      	ldr	r1, [pc, #84]	@ (8002930 <SCH_Delete_Task+0x94>)
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	4604      	mov	r4, r0
 80028e6:	461d      	mov	r5, r3
 80028e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ec:	682b      	ldr	r3, [r5, #0]
 80028ee:	6023      	str	r3, [r4, #0]
            for (int j = i; j < current_index_task - 1; j++) {
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <SCH_Delete_Task+0x98>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	dbe1      	blt.n	80028c6 <SCH_Delete_Task+0x2a>
            }
            current_index_task--;
 8002902:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <SCH_Delete_Task+0x98>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3b01      	subs	r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b0a      	ldr	r3, [pc, #40]	@ (8002934 <SCH_Delete_Task+0x98>)
 800290c:	701a      	strb	r2, [r3, #0]
            break;
 800290e:	e009      	b.n	8002924 <SCH_Delete_Task+0x88>
    for (int i = 0; i < current_index_task; i++) {
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3301      	adds	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <SCH_Delete_Task+0x98>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4293      	cmp	r3, r2
 8002920:	dbc3      	blt.n	80028aa <SCH_Delete_Task+0xe>
        }
    }
}
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bcb0      	pop	{r4, r5, r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000c74 	.word	0x20000c74
 8002934:	20000e04 	.word	0x20000e04

08002938 <setTimer0>:
int timer2_counter = 0;
int timer2_flag = 0;

// Ham khoi tao timer

void setTimer0(int duration) {
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    timer0_counter = duration;
 8002940:	4a05      	ldr	r2, [pc, #20]	@ (8002958 <setTimer0+0x20>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 8002946:	4b05      	ldr	r3, [pc, #20]	@ (800295c <setTimer0+0x24>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000e08 	.word	0x20000e08
 800295c:	20000e0c 	.word	0x20000e0c

08002960 <setTimer1>:

void setTimer1(int duration) {
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
    timer1_counter = duration;
 8002968:	4a05      	ldr	r2, [pc, #20]	@ (8002980 <setTimer1+0x20>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 800296e:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <setTimer1+0x24>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000e10 	.word	0x20000e10
 8002984:	20000e14 	.word	0x20000e14

08002988 <timerRun>:
    timer2_flag = 0;
}

// Ham chay timer

void timerRun() {
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
    if (timer0_counter > 0) {
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <timerRun+0x6c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	dd0b      	ble.n	80029ac <timerRun+0x24>
        timer0_counter--;
 8002994:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <timerRun+0x6c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3b01      	subs	r3, #1
 800299a:	4a16      	ldr	r2, [pc, #88]	@ (80029f4 <timerRun+0x6c>)
 800299c:	6013      	str	r3, [r2, #0]
        if (timer0_counter <= 0) {
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <timerRun+0x6c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	dc02      	bgt.n	80029ac <timerRun+0x24>
            timer0_flag = 1;
 80029a6:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <timerRun+0x70>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer1_counter > 0) {
 80029ac:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <timerRun+0x74>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	dd0b      	ble.n	80029cc <timerRun+0x44>
        timer1_counter--;
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <timerRun+0x74>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	4a10      	ldr	r2, [pc, #64]	@ (80029fc <timerRun+0x74>)
 80029bc:	6013      	str	r3, [r2, #0]
        if (timer1_counter <= 0) {
 80029be:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <timerRun+0x74>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	dc02      	bgt.n	80029cc <timerRun+0x44>
            timer1_flag = 1;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <timerRun+0x78>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
        }
    }

    if (timer2_counter > 0) {
 80029cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <timerRun+0x7c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	dd0b      	ble.n	80029ec <timerRun+0x64>
        timer2_counter--;
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <timerRun+0x7c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3b01      	subs	r3, #1
 80029da:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <timerRun+0x7c>)
 80029dc:	6013      	str	r3, [r2, #0]
        if (timer2_counter <= 0) {
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <timerRun+0x7c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	dc02      	bgt.n	80029ec <timerRun+0x64>
            timer2_flag = 1;
 80029e6:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <timerRun+0x80>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
        }
    }
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	20000e08 	.word	0x20000e08
 80029f8:	20000e0c 	.word	0x20000e0c
 80029fc:	20000e10 	.word	0x20000e10
 8002a00:	20000e14 	.word	0x20000e14
 8002a04:	20000e18 	.word	0x20000e18
 8002a08:	20000e1c 	.word	0x20000e1c

08002a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002a12:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <HAL_MspInit+0x58>)
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <HAL_MspInit+0x58>)
 8002a18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a1c:	6253      	str	r3, [r2, #36]	@ 0x24
 8002a1e:	4b11      	ldr	r3, [pc, #68]	@ (8002a64 <HAL_MspInit+0x58>)
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a64 <HAL_MspInit+0x58>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <HAL_MspInit+0x58>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_MspInit+0x58>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b08      	ldr	r3, [pc, #32]	@ (8002a64 <HAL_MspInit+0x58>)
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	4a07      	ldr	r2, [pc, #28]	@ (8002a64 <HAL_MspInit+0x58>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	6253      	str	r3, [r2, #36]	@ 0x24
 8002a4e:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <HAL_MspInit+0x58>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40023800 	.word	0x40023800

08002a68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	@ 0x28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a19      	ldr	r2, [pc, #100]	@ (8002aec <HAL_ADC_MspInit+0x84>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d12b      	bne.n	8002ae2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a8a:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <HAL_ADC_MspInit+0x88>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a18      	ldr	r2, [pc, #96]	@ (8002af0 <HAL_ADC_MspInit+0x88>)
 8002a90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a94:	6213      	str	r3, [r2, #32]
 8002a96:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <HAL_ADC_MspInit+0x88>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <HAL_ADC_MspInit+0x88>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <HAL_ADC_MspInit+0x88>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	61d3      	str	r3, [r2, #28]
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_ADC_MspInit+0x88>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002aba:	2301      	movs	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	4619      	mov	r1, r3
 8002acc:	4809      	ldr	r0, [pc, #36]	@ (8002af4 <HAL_ADC_MspInit+0x8c>)
 8002ace:	f001 f84b 	bl	8003b68 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2012      	movs	r0, #18
 8002ad8:	f000 ff85 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002adc:	2012      	movs	r0, #18
 8002ade:	f000 ff9e 	bl	8003a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3728      	adds	r7, #40	@ 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40012400 	.word	0x40012400
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020000 	.word	0x40020000

08002af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	@ 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <HAL_I2C_MspInit+0x9c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d137      	bne.n	8002b8a <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b98 <HAL_I2C_MspInit+0xa0>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b98 <HAL_I2C_MspInit+0xa0>)
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	61d3      	str	r3, [r2, #28]
 8002b26:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <HAL_I2C_MspInit+0xa0>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b32:	23c0      	movs	r3, #192	@ 0xc0
 8002b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b36:	2312      	movs	r3, #18
 8002b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b42:	2304      	movs	r3, #4
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4813      	ldr	r0, [pc, #76]	@ (8002b9c <HAL_I2C_MspInit+0xa4>)
 8002b4e:	f001 f80b 	bl	8003b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b52:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_I2C_MspInit+0xa0>)
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	4a10      	ldr	r2, [pc, #64]	@ (8002b98 <HAL_I2C_MspInit+0xa0>)
 8002b58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b5c:	6253      	str	r3, [r2, #36]	@ 0x24
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <HAL_I2C_MspInit+0xa0>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	201f      	movs	r0, #31
 8002b70:	f000 ff39 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b74:	201f      	movs	r0, #31
 8002b76:	f000 ff52 	bl	8003a1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2020      	movs	r0, #32
 8002b80:	f000 ff31 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002b84:	2020      	movs	r0, #32
 8002b86:	f000 ff4a 	bl	8003a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b8a:	bf00      	nop
 8002b8c:	3728      	adds	r7, #40	@ 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40005400 	.word	0x40005400
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb0:	d113      	bne.n	8002bda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <HAL_TIM_Base_MspInit+0x44>)
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8002be4 <HAL_TIM_Base_MspInit+0x44>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6253      	str	r3, [r2, #36]	@ 0x24
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_TIM_Base_MspInit+0x44>)
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	201c      	movs	r0, #28
 8002bd0:	f000 ff09 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bd4:	201c      	movs	r0, #28
 8002bd6:	f000 ff22 	bl	8003a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800

08002be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	@ 0x30
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 031c 	add.w	r3, r7, #28
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a36      	ldr	r2, [pc, #216]	@ (8002ce0 <HAL_UART_MspInit+0xf8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d131      	bne.n	8002c6e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a35      	ldr	r2, [pc, #212]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c14:	6213      	str	r3, [r2, #32]
 8002c16:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c22:	4b30      	ldr	r3, [pc, #192]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	61d3      	str	r3, [r2, #28]
 8002c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c3a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	4619      	mov	r1, r3
 8002c56:	4824      	ldr	r0, [pc, #144]	@ (8002ce8 <HAL_UART_MspInit+0x100>)
 8002c58:	f000 ff86 	bl	8003b68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	2025      	movs	r0, #37	@ 0x25
 8002c62:	f000 fec0 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c66:	2025      	movs	r0, #37	@ 0x25
 8002c68:	f000 fed9 	bl	8003a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c6c:	e034      	b.n	8002cd8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1e      	ldr	r2, [pc, #120]	@ (8002cec <HAL_UART_MspInit+0x104>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d12f      	bne.n	8002cd8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	4a19      	ldr	r2, [pc, #100]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c82:	6253      	str	r3, [r2, #36]	@ 0x24
 8002c84:	4b17      	ldr	r3, [pc, #92]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c90:	4b14      	ldr	r3, [pc, #80]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	4a13      	ldr	r2, [pc, #76]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	61d3      	str	r3, [r2, #28]
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <HAL_UART_MspInit+0xfc>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ca8:	230c      	movs	r3, #12
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cb8:	2307      	movs	r3, #7
 8002cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	f107 031c 	add.w	r3, r7, #28
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4809      	ldr	r0, [pc, #36]	@ (8002ce8 <HAL_UART_MspInit+0x100>)
 8002cc4:	f000 ff50 	bl	8003b68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2026      	movs	r0, #38	@ 0x26
 8002cce:	f000 fe8a 	bl	80039e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cd2:	2026      	movs	r0, #38	@ 0x26
 8002cd4:	f000 fea3 	bl	8003a1e <HAL_NVIC_EnableIRQ>
}
 8002cd8:	bf00      	nop
 8002cda:	3730      	adds	r7, #48	@ 0x30
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40013800 	.word	0x40013800
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	40004400 	.word	0x40004400

08002cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <NMI_Handler+0x4>

08002cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <HardFault_Handler+0x4>

08002d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <MemManage_Handler+0x4>

08002d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <BusFault_Handler+0x4>

08002d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <UsageFault_Handler+0x4>

08002d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d40:	f000 f97e 	bl	8003040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002d4c:	4802      	ldr	r0, [pc, #8]	@ (8002d58 <ADC1_IRQHandler+0x10>)
 8002d4e:	f000 fb07 	bl	8003360 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200004e8 	.word	0x200004e8

08002d5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d60:	4802      	ldr	r0, [pc, #8]	@ (8002d6c <TIM2_IRQHandler+0x10>)
 8002d62:	f004 fbd1 	bl	8007508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000590 	.word	0x20000590

08002d70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d74:	4802      	ldr	r0, [pc, #8]	@ (8002d80 <I2C1_EV_IRQHandler+0x10>)
 8002d76:	f001 fd21 	bl	80047bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000053c 	.word	0x2000053c

08002d84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d88:	4802      	ldr	r0, [pc, #8]	@ (8002d94 <I2C1_ER_IRQHandler+0x10>)
 8002d8a:	f001 fe6a 	bl	8004a62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000053c 	.word	0x2000053c

08002d98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d9c:	4802      	ldr	r0, [pc, #8]	@ (8002da8 <USART1_IRQHandler+0x10>)
 8002d9e:	f004 ff7b 	bl	8007c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200005d0 	.word	0x200005d0

08002dac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002db0:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <USART2_IRQHandler+0x10>)
 8002db2:	f004 ff71 	bl	8007c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000618 	.word	0x20000618

08002dc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return 1;
 8002dc4:	2301      	movs	r3, #1
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <_kill>:

int _kill(int pid, int sig)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dd8:	f007 f94c 	bl	800a074 <__errno>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2216      	movs	r2, #22
 8002de0:	601a      	str	r2, [r3, #0]
  return -1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_exit>:

void _exit (int status)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002df6:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffe7 	bl	8002dce <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <_exit+0x12>

08002e04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e00a      	b.n	8002e2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e16:	f3af 8000 	nop.w
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	60ba      	str	r2, [r7, #8]
 8002e22:	b2ca      	uxtb	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	dbf0      	blt.n	8002e16 <_read+0x12>
  }

  return len;
 8002e34:	687b      	ldr	r3, [r7, #4]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e009      	b.n	8002e64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	60ba      	str	r2, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3301      	adds	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dbf1      	blt.n	8002e50 <_write+0x12>
  }
  return len;
 8002e6c:	687b      	ldr	r3, [r7, #4]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_close>:

int _close(int file)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e9c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <_isatty>:

int _isatty(int file)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee0:	4a14      	ldr	r2, [pc, #80]	@ (8002f34 <_sbrk+0x5c>)
 8002ee2:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <_sbrk+0x60>)
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eec:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <_sbrk+0x64>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <_sbrk+0x64>)
 8002ef6:	4a12      	ldr	r2, [pc, #72]	@ (8002f40 <_sbrk+0x68>)
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d207      	bcs.n	8002f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f08:	f007 f8b4 	bl	800a074 <__errno>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	220c      	movs	r2, #12
 8002f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	e009      	b.n	8002f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f18:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1e:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <_sbrk+0x64>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	4a05      	ldr	r2, [pc, #20]	@ (8002f3c <_sbrk+0x64>)
 8002f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20008000 	.word	0x20008000
 8002f38:	00000400 	.word	0x00000400
 8002f3c:	20000e20 	.word	0x20000e20
 8002f40:	20000f78 	.word	0x20000f78

08002f44 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f50:	f7ff fff8 	bl	8002f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f54:	480b      	ldr	r0, [pc, #44]	@ (8002f84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f56:	490c      	ldr	r1, [pc, #48]	@ (8002f88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f58:	4a0c      	ldr	r2, [pc, #48]	@ (8002f8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f5c:	e002      	b.n	8002f64 <LoopCopyDataInit>

08002f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f62:	3304      	adds	r3, #4

08002f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f68:	d3f9      	bcc.n	8002f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f6c:	4c09      	ldr	r4, [pc, #36]	@ (8002f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f70:	e001      	b.n	8002f76 <LoopFillZerobss>

08002f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f74:	3204      	adds	r2, #4

08002f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f78:	d3fb      	bcc.n	8002f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f7a:	f007 f881 	bl	800a080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f7e:	f7ff f817 	bl	8001fb0 <main>
  bx lr
 8002f82:	4770      	bx	lr
  ldr r0, =_sdata
 8002f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f88:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8002f8c:	0800cfac 	.word	0x0800cfac
  ldr r2, =_sbss
 8002f90:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8002f94:	20000f74 	.word	0x20000f74

08002f98 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f98:	e7fe      	b.n	8002f98 <COMP_IRQHandler>

08002f9a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f000 fd13 	bl	80039d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002faa:	200f      	movs	r0, #15
 8002fac:	f000 f80e 	bl	8002fcc <HAL_InitTick>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	71fb      	strb	r3, [r7, #7]
 8002fba:	e001      	b.n	8002fc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fbc:	f7ff fd26 	bl	8002a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002fd8:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <HAL_InitTick+0x68>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d022      	beq.n	8003026 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002fe0:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <HAL_InitTick+0x6c>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <HAL_InitTick+0x68>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fd20 	bl	8003a3a <HAL_SYSTICK_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10f      	bne.n	8003020 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	d809      	bhi.n	800301a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003006:	2200      	movs	r2, #0
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	f04f 30ff 	mov.w	r0, #4294967295
 800300e:	f000 fcea 	bl	80039e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003012:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <HAL_InitTick+0x70>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e007      	b.n	800302a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	e004      	b.n	800302a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	e001      	b.n	800302a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	2000017c 	.word	0x2000017c
 8003038:	20000174 	.word	0x20000174
 800303c:	20000178 	.word	0x20000178

08003040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <HAL_IncTick+0x1c>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_IncTick+0x20>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4413      	add	r3, r2
 800304e:	4a03      	ldr	r2, [pc, #12]	@ (800305c <HAL_IncTick+0x1c>)
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000e24 	.word	0x20000e24
 8003060:	2000017c 	.word	0x2000017c

08003064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return uwTick;
 8003068:	4b02      	ldr	r3, [pc, #8]	@ (8003074 <HAL_GetTick+0x10>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	20000e24 	.word	0x20000e24

08003078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff fff0 	bl	8003064 <HAL_GetTick>
 8003084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d004      	beq.n	800309c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003092:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <HAL_Delay+0x40>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309c:	bf00      	nop
 800309e:	f7ff ffe1 	bl	8003064 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d8f7      	bhi.n	800309e <HAL_Delay+0x26>
  {
  }
}
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	2000017c 	.word	0x2000017c

080030bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08e      	sub	sp, #56	@ 0x38
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e127      	b.n	800332c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d115      	bne.n	8003116 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003334 <HAL_ADC_Init+0x278>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4a8d      	ldr	r2, [pc, #564]	@ (8003334 <HAL_ADC_Init+0x278>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6213      	str	r3, [r2, #32]
 8003104:	4b8b      	ldr	r3, [pc, #556]	@ (8003334 <HAL_ADC_Init+0x278>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff fca9 	bl	8002a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 80ff 	bne.w	8003322 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003128:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800312c:	f023 0302 	bic.w	r3, r3, #2
 8003130:	f043 0202 	orr.w	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8003138:	4b7f      	ldr	r3, [pc, #508]	@ (8003338 <HAL_ADC_Init+0x27c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	497c      	ldr	r1, [pc, #496]	@ (8003338 <HAL_ADC_Init+0x27c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8003152:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800315a:	4619      	mov	r1, r3
 800315c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003160:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8003176:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800317c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003184:	4619      	mov	r1, r3
 8003186:	2302      	movs	r3, #2
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800319e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80031a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031a2:	4313      	orrs	r3, r2
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d007      	beq.n	80031be <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80031b6:	4313      	orrs	r3, r2
 80031b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ba:	4313      	orrs	r3, r2
 80031bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c8:	2b40      	cmp	r3, #64	@ 0x40
 80031ca:	d04f      	beq.n	800326c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d2:	4313      	orrs	r3, r2
 80031d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80031de:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6912      	ldr	r2, [r2, #16]
 80031e4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80031e8:	d003      	beq.n	80031f2 <HAL_ADC_Init+0x136>
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6912      	ldr	r2, [r2, #16]
 80031ee:	2a01      	cmp	r2, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_ADC_Init+0x13c>
 80031f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031f6:	e000      	b.n	80031fa <HAL_ADC_Init+0x13e>
 80031f8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80031fa:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80031fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031fe:	4313      	orrs	r3, r2
 8003200:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d125      	bne.n	8003258 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d114      	bne.n	8003240 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	3b01      	subs	r3, #1
 800321c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003220:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	fa92 f2a2 	rbit	r2, r2
 8003228:	617a      	str	r2, [r7, #20]
  return result;
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	fab2 f282 	clz	r2, r2
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	4093      	lsls	r3, r2
 8003234:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800323a:	4313      	orrs	r3, r2
 800323c:	633b      	str	r3, [r7, #48]	@ 0x30
 800323e:	e00b      	b.n	8003258 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	4b37      	ldr	r3, [pc, #220]	@ (800333c <HAL_ADC_Init+0x280>)
 8003260:	4013      	ands	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003268:	430b      	orrs	r3, r1
 800326a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	4b33      	ldr	r3, [pc, #204]	@ (8003340 <HAL_ADC_Init+0x284>)
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800327c:	430b      	orrs	r3, r1
 800327e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003288:	d003      	beq.n	8003292 <HAL_ADC_Init+0x1d6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d119      	bne.n	80032c6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 80032a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	fa92 f2a2 	rbit	r2, r2
 80032ae:	60fa      	str	r2, [r7, #12]
  return result;
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	fab2 f282 	clz	r2, r2
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	fa03 f202 	lsl.w	r2, r3, r2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80032c4:	e007      	b.n	80032d6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80032d4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b19      	ldr	r3, [pc, #100]	@ (8003344 <HAL_ADC_Init+0x288>)
 80032de:	4013      	ands	r3, r2
 80032e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d10b      	bne.n	80032fe <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f0:	f023 0303 	bic.w	r3, r3, #3
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032fc:	e014      	b.n	8003328 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003302:	f023 0312 	bic.w	r3, r3, #18
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003312:	f043 0201 	orr.w	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003320:	e002      	b.n	8003328 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003328:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800332c:	4618      	mov	r0, r3
 800332e:	3738      	adds	r7, #56	@ 0x38
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	40012700 	.word	0x40012700
 800333c:	fcfc16ff 	.word	0xfcfc16ff
 8003340:	c0fff18d 	.word	0xc0fff18d
 8003344:	bf80fffe 	.word	0xbf80fffe

08003348 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d04c      	beq.n	800341c <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d047      	beq.n	800341c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d12c      	bne.n	800340c <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d127      	bne.n	800340c <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d119      	bne.n	800340c <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0220 	bic.w	r2, r2, #32
 80033e6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f89e 	bl	800354e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0212 	mvn.w	r2, #18
 800341a:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d05a      	beq.n	80034dc <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d055      	beq.n	80034dc <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003440:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d13a      	bne.n	80034cc <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003460:	2b00      	cmp	r3, #0
 8003462:	d006      	beq.n	8003472 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800346e:	2b00      	cmp	r3, #0
 8003470:	d12c      	bne.n	80034cc <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800347c:	2b00      	cmp	r3, #0
 800347e:	d125      	bne.n	80034cc <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11e      	bne.n	80034cc <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003494:	2b00      	cmp	r3, #0
 8003496:	d119      	bne.n	80034cc <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034a6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c4:	f043 0201 	orr.w	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f9a9 	bl	8003824 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 020c 	mvn.w	r2, #12
 80034da:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f82f 	bl	8003560 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0201 	mvn.w	r2, #1
 800350a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d017      	beq.n	8003546 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d012      	beq.n	8003546 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003524:	f043 0202 	orr.w	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0220 	mvn.w	r2, #32
 8003534:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f81b 	bl	8003572 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0220 	mvn.w	r2, #32
 8003544:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr

08003572 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x20>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e134      	b.n	800380e <HAL_ADC_ConfigChannel+0x28a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	d81c      	bhi.n	80035ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	3b05      	subs	r3, #5
 80035c6:	221f      	movs	r2, #31
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	4019      	ands	r1, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	3b05      	subs	r3, #5
 80035e0:	fa00 f203 	lsl.w	r2, r0, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80035ec:	e07e      	b.n	80036ec <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d81c      	bhi.n	8003630 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3b23      	subs	r3, #35	@ 0x23
 8003608:	221f      	movs	r2, #31
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	4019      	ands	r1, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	3b23      	subs	r3, #35	@ 0x23
 8003622:	fa00 f203 	lsl.w	r2, r0, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800362e:	e05d      	b.n	80036ec <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b12      	cmp	r3, #18
 8003636:	d81c      	bhi.n	8003672 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	3b41      	subs	r3, #65	@ 0x41
 800364a:	221f      	movs	r2, #31
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	4019      	ands	r1, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	3b41      	subs	r3, #65	@ 0x41
 8003664:	fa00 f203 	lsl.w	r2, r0, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003670:	e03c      	b.n	80036ec <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b18      	cmp	r3, #24
 8003678:	d81c      	bhi.n	80036b4 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	3b5f      	subs	r3, #95	@ 0x5f
 800368c:	221f      	movs	r2, #31
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	4019      	ands	r1, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	3b5f      	subs	r3, #95	@ 0x5f
 80036a6:	fa00 f203 	lsl.w	r2, r0, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80036b2:	e01b      	b.n	80036ec <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	3b7d      	subs	r3, #125	@ 0x7d
 80036c6:	221f      	movs	r2, #31
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	4019      	ands	r1, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	3b7d      	subs	r3, #125	@ 0x7d
 80036e0:	fa00 f203 	lsl.w	r2, r0, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b09      	cmp	r3, #9
 80036f2:	d81a      	bhi.n	800372a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6959      	ldr	r1, [r3, #20]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	2207      	movs	r2, #7
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	4019      	ands	r1, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6898      	ldr	r0, [r3, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	fa00 f203 	lsl.w	r2, r0, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	615a      	str	r2, [r3, #20]
 8003728:	e042      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b13      	cmp	r3, #19
 8003730:	d81c      	bhi.n	800376c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6919      	ldr	r1, [r3, #16]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	3b1e      	subs	r3, #30
 8003744:	2207      	movs	r2, #7
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	4019      	ands	r1, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6898      	ldr	r0, [r3, #8]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	3b1e      	subs	r3, #30
 800375e:	fa00 f203 	lsl.w	r2, r0, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	611a      	str	r2, [r3, #16]
 800376a:	e021      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b1a      	cmp	r3, #26
 8003772:	d81c      	bhi.n	80037ae <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68d9      	ldr	r1, [r3, #12]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	3b3c      	subs	r3, #60	@ 0x3c
 8003786:	2207      	movs	r2, #7
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	4019      	ands	r1, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6898      	ldr	r0, [r3, #8]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	3b3c      	subs	r3, #60	@ 0x3c
 80037a0:	fa00 f203 	lsl.w	r2, r0, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	60da      	str	r2, [r3, #12]
 80037ac:	e000      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80037ae:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d003      	beq.n	80037c0 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037bc:	2b11      	cmp	r3, #17
 80037be:	d121      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80037c0:	4b15      	ldr	r3, [pc, #84]	@ (8003818 <HAL_ADC_ConfigChannel+0x294>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d11b      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80037cc:	4b12      	ldr	r3, [pc, #72]	@ (8003818 <HAL_ADC_ConfigChannel+0x294>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a11      	ldr	r2, [pc, #68]	@ (8003818 <HAL_ADC_ConfigChannel+0x294>)
 80037d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037d6:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d111      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80037e0:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <HAL_ADC_ConfigChannel+0x298>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003820 <HAL_ADC_ConfigChannel+0x29c>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	0c9a      	lsrs	r2, r3, #18
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80037f6:	e002      	b.n	80037fe <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f9      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	40012700 	.word	0x40012700
 800381c:	20000174 	.word	0x20000174
 8003820:	431bde83 	.word	0x431bde83

08003824 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
	...

08003838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003848:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <__NVIC_SetPriorityGrouping+0x44>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003854:	4013      	ands	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800386a:	4a04      	ldr	r2, [pc, #16]	@ (800387c <__NVIC_SetPriorityGrouping+0x44>)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	60d3      	str	r3, [r2, #12]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <__NVIC_GetPriorityGrouping+0x18>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	f003 0307 	and.w	r3, r3, #7
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	db0b      	blt.n	80038c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	f003 021f 	and.w	r2, r3, #31
 80038b4:	4906      	ldr	r1, [pc, #24]	@ (80038d0 <__NVIC_EnableIRQ+0x34>)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2001      	movs	r0, #1
 80038be:	fa00 f202 	lsl.w	r2, r0, r2
 80038c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	@ (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	@ (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	@ 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	@ 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800399c:	d301      	bcc.n	80039a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399e:	2301      	movs	r3, #1
 80039a0:	e00f      	b.n	80039c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a2:	4a0a      	ldr	r2, [pc, #40]	@ (80039cc <SysTick_Config+0x40>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039aa:	210f      	movs	r1, #15
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f7ff ff90 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <SysTick_Config+0x40>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <SysTick_Config+0x40>)
 80039bc:	2207      	movs	r2, #7
 80039be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	e000e010 	.word	0xe000e010

080039d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff2d 	bl	8003838 <__NVIC_SetPriorityGrouping>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f8:	f7ff ff42 	bl	8003880 <__NVIC_GetPriorityGrouping>
 80039fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f7ff ff90 	bl	8003928 <NVIC_EncodePriority>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff5f 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff35 	bl	800389c <__NVIC_EnableIRQ>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ffa2 	bl	800398c <SysTick_Config>
 8003a48:	4603      	mov	r3, r0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d008      	beq.n	8003a7c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e022      	b.n	8003ac2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 020e 	bic.w	r2, r2, #14
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	f003 021c 	and.w	r2, r3, #28
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d005      	beq.n	8003af0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
 8003aee:	e029      	b.n	8003b44 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 020e 	bic.w	r2, r2, #14
 8003afe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	f003 021c 	and.w	r2, r3, #28
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
    }
  }
  return status;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b5c:	b2db      	uxtb	r3, r3
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003b7e:	e154      	b.n	8003e2a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8146 	beq.w	8003e24 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d005      	beq.n	8003bb0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d130      	bne.n	8003c12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003be6:	2201      	movs	r2, #1
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f003 0201 	and.w	r2, r3, #1
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d017      	beq.n	8003c4e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d123      	bne.n	8003ca2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	08da      	lsrs	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3208      	adds	r2, #8
 8003c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c66:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	220f      	movs	r2, #15
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	08da      	lsrs	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3208      	adds	r2, #8
 8003c9c:	6939      	ldr	r1, [r7, #16]
 8003c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2203      	movs	r2, #3
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 0203 	and.w	r2, r3, #3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80a0 	beq.w	8003e24 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce4:	4b58      	ldr	r3, [pc, #352]	@ (8003e48 <HAL_GPIO_Init+0x2e0>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4a57      	ldr	r2, [pc, #348]	@ (8003e48 <HAL_GPIO_Init+0x2e0>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6213      	str	r3, [r2, #32]
 8003cf0:	4b55      	ldr	r3, [pc, #340]	@ (8003e48 <HAL_GPIO_Init+0x2e0>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cfc:	4a53      	ldr	r2, [pc, #332]	@ (8003e4c <HAL_GPIO_Init+0x2e4>)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3302      	adds	r3, #2
 8003d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	220f      	movs	r2, #15
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a4b      	ldr	r2, [pc, #300]	@ (8003e50 <HAL_GPIO_Init+0x2e8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d019      	beq.n	8003d5c <HAL_GPIO_Init+0x1f4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e54 <HAL_GPIO_Init+0x2ec>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <HAL_GPIO_Init+0x1f0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a49      	ldr	r2, [pc, #292]	@ (8003e58 <HAL_GPIO_Init+0x2f0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00d      	beq.n	8003d54 <HAL_GPIO_Init+0x1ec>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a48      	ldr	r2, [pc, #288]	@ (8003e5c <HAL_GPIO_Init+0x2f4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <HAL_GPIO_Init+0x1e8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a47      	ldr	r2, [pc, #284]	@ (8003e60 <HAL_GPIO_Init+0x2f8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_GPIO_Init+0x1e4>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	e008      	b.n	8003d5e <HAL_GPIO_Init+0x1f6>
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	e006      	b.n	8003d5e <HAL_GPIO_Init+0x1f6>
 8003d50:	2303      	movs	r3, #3
 8003d52:	e004      	b.n	8003d5e <HAL_GPIO_Init+0x1f6>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e002      	b.n	8003d5e <HAL_GPIO_Init+0x1f6>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_GPIO_Init+0x1f6>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	f002 0203 	and.w	r2, r2, #3
 8003d64:	0092      	lsls	r2, r2, #2
 8003d66:	4093      	lsls	r3, r2
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d6e:	4937      	ldr	r1, [pc, #220]	@ (8003e4c <HAL_GPIO_Init+0x2e4>)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d7c:	4b39      	ldr	r3, [pc, #228]	@ (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003da0:	4a30      	ldr	r2, [pc, #192]	@ (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dca:	4a26      	ldr	r2, [pc, #152]	@ (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dd0:	4b24      	ldr	r3, [pc, #144]	@ (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003df4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e1e:	4a11      	ldr	r2, [pc, #68]	@ (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f47f aea3 	bne.w	8003b80 <HAL_GPIO_Init+0x18>
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40020000 	.word	0x40020000
 8003e54:	40020400 	.word	0x40020400
 8003e58:	40020800 	.word	0x40020800
 8003e5c:	40020c00 	.word	0x40020c00
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40010400 	.word	0x40010400

08003e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
 8003e74:	4613      	mov	r3, r2
 8003e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e78:	787b      	ldrb	r3, [r7, #1]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e7e:	887a      	ldrh	r2, [r7, #2]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003e84:	e003      	b.n	8003e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003e86:	887b      	ldrh	r3, [r7, #2]
 8003e88:	041a      	lsls	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	619a      	str	r2, [r3, #24]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	041a      	lsls	r2, r3, #16
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	43d9      	mvns	r1, r3
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	400b      	ands	r3, r1
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e12b      	b.n	8004136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fe fe00 	bl	8002af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	@ 0x24
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f30:	f003 f9d0 	bl	80072d4 <HAL_RCC_GetPCLK1Freq>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4a81      	ldr	r2, [pc, #516]	@ (8004140 <HAL_I2C_Init+0x274>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d807      	bhi.n	8003f50 <HAL_I2C_Init+0x84>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a80      	ldr	r2, [pc, #512]	@ (8004144 <HAL_I2C_Init+0x278>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bf94      	ite	ls
 8003f48:	2301      	movls	r3, #1
 8003f4a:	2300      	movhi	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e006      	b.n	8003f5e <HAL_I2C_Init+0x92>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a7d      	ldr	r2, [pc, #500]	@ (8004148 <HAL_I2C_Init+0x27c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bf94      	ite	ls
 8003f58:	2301      	movls	r3, #1
 8003f5a:	2300      	movhi	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0e7      	b.n	8004136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a78      	ldr	r2, [pc, #480]	@ (800414c <HAL_I2C_Init+0x280>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	0c9b      	lsrs	r3, r3, #18
 8003f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a6a      	ldr	r2, [pc, #424]	@ (8004140 <HAL_I2C_Init+0x274>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d802      	bhi.n	8003fa0 <HAL_I2C_Init+0xd4>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	e009      	b.n	8003fb4 <HAL_I2C_Init+0xe8>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	4a69      	ldr	r2, [pc, #420]	@ (8004150 <HAL_I2C_Init+0x284>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003fc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	495c      	ldr	r1, [pc, #368]	@ (8004140 <HAL_I2C_Init+0x274>)
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	d819      	bhi.n	8004008 <HAL_I2C_Init+0x13c>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1e59      	subs	r1, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fe8:	400b      	ands	r3, r1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_I2C_Init+0x138>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e59      	subs	r1, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004002:	e051      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004004:	2304      	movs	r3, #4
 8004006:	e04f      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d111      	bne.n	8004034 <HAL_I2C_Init+0x168>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e58      	subs	r0, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e012      	b.n	800405a <HAL_I2C_Init+0x18e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e58      	subs	r0, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	0099      	lsls	r1, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	fbb0 f3f3 	udiv	r3, r0, r3
 800404a:	3301      	adds	r3, #1
 800404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Init+0x196>
 800405e:	2301      	movs	r3, #1
 8004060:	e022      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10e      	bne.n	8004088 <HAL_I2C_Init+0x1bc>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1e58      	subs	r0, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	440b      	add	r3, r1
 8004078:	fbb0 f3f3 	udiv	r3, r0, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004086:	e00f      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	0099      	lsls	r1, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	fbb0 f3f3 	udiv	r3, r0, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	6809      	ldr	r1, [r1, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80040d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6911      	ldr	r1, [r2, #16]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	4311      	orrs	r1, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	000186a0 	.word	0x000186a0
 8004144:	001e847f 	.word	0x001e847f
 8004148:	003d08ff 	.word	0x003d08ff
 800414c:	431bde83 	.word	0x431bde83
 8004150:	10624dd3 	.word	0x10624dd3

08004154 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004166:	2b80      	cmp	r3, #128	@ 0x80
 8004168:	d103      	bne.n	8004172 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
  }
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	4603      	mov	r3, r0
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	460b      	mov	r3, r1
 8004190:	813b      	strh	r3, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004196:	f7fe ff65 	bl	8003064 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	f040 80d9 	bne.w	800435c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2319      	movs	r3, #25
 80041b0:	2201      	movs	r2, #1
 80041b2:	496d      	ldr	r1, [pc, #436]	@ (8004368 <HAL_I2C_Mem_Write+0x1ec>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f002 f8df 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
 80041c2:	e0cc      	b.n	800435e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_I2C_Mem_Write+0x56>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e0c5      	b.n	800435e <HAL_I2C_Mem_Write+0x1e2>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d007      	beq.n	80041f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004206:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2221      	movs	r2, #33	@ 0x21
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2240      	movs	r2, #64	@ 0x40
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a3a      	ldr	r2, [r7, #32]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004228:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a4d      	ldr	r2, [pc, #308]	@ (800436c <HAL_I2C_Mem_Write+0x1f0>)
 8004238:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800423a:	88f8      	ldrh	r0, [r7, #6]
 800423c:	893a      	ldrh	r2, [r7, #8]
 800423e:	8979      	ldrh	r1, [r7, #10]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	4603      	mov	r3, r0
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f001 fe6e 	bl	8005f2c <I2C_RequestMemoryWrite>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d052      	beq.n	80042fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e081      	b.n	800435e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f002 f9a4 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00d      	beq.n	8004286 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	2b04      	cmp	r3, #4
 8004270:	d107      	bne.n	8004282 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e06b      	b.n	800435e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d11b      	bne.n	80042fc <HAL_I2C_Mem_Write+0x180>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d017      	beq.n	80042fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1aa      	bne.n	800425a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f002 f997 	bl	800663c <I2C_WaitOnBTFFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00d      	beq.n	8004330 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	2b04      	cmp	r3, #4
 800431a:	d107      	bne.n	800432c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e016      	b.n	800435e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800433e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	00100002 	.word	0x00100002
 800436c:	ffff0000 	.word	0xffff0000

08004370 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08c      	sub	sp, #48	@ 0x30
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	461a      	mov	r2, r3
 800437e:	4603      	mov	r3, r0
 8004380:	817b      	strh	r3, [r7, #10]
 8004382:	460b      	mov	r3, r1
 8004384:	813b      	strh	r3, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800438a:	f7fe fe6b 	bl	8003064 <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b20      	cmp	r3, #32
 800439a:	f040 8208 	bne.w	80047ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2319      	movs	r3, #25
 80043a4:	2201      	movs	r2, #1
 80043a6:	497b      	ldr	r1, [pc, #492]	@ (8004594 <HAL_I2C_Mem_Read+0x224>)
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f001 ffe5 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
 80043b6:	e1fb      	b.n	80047b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_I2C_Mem_Read+0x56>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e1f4      	b.n	80047b0 <HAL_I2C_Mem_Read+0x440>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d007      	beq.n	80043ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2222      	movs	r2, #34	@ 0x22
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2240      	movs	r2, #64	@ 0x40
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800441c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a5b      	ldr	r2, [pc, #364]	@ (8004598 <HAL_I2C_Mem_Read+0x228>)
 800442c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800442e:	88f8      	ldrh	r0, [r7, #6]
 8004430:	893a      	ldrh	r2, [r7, #8]
 8004432:	8979      	ldrh	r1, [r7, #10]
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	4603      	mov	r3, r0
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f001 fe0a 	bl	8006058 <I2C_RequestMemoryRead>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e1b0      	b.n	80047b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004456:	2300      	movs	r3, #0
 8004458:	623b      	str	r3, [r7, #32]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e184      	b.n	8004788 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004482:	2b01      	cmp	r3, #1
 8004484:	d11b      	bne.n	80044be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004494:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e164      	b.n	8004788 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d11b      	bne.n	80044fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e6:	2300      	movs	r3, #0
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	e144      	b.n	8004788 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004514:	e138      	b.n	8004788 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451a:	2b03      	cmp	r3, #3
 800451c:	f200 80f1 	bhi.w	8004702 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004524:	2b01      	cmp	r3, #1
 8004526:	d123      	bne.n	8004570 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f002 f8ff 	bl	8006730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e139      	b.n	80047b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800456e:	e10b      	b.n	8004788 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004574:	2b02      	cmp	r3, #2
 8004576:	d14e      	bne.n	8004616 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457e:	2200      	movs	r2, #0
 8004580:	4906      	ldr	r1, [pc, #24]	@ (800459c <HAL_I2C_Mem_Read+0x22c>)
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f001 fef8 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d008      	beq.n	80045a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e10e      	b.n	80047b0 <HAL_I2C_Mem_Read+0x440>
 8004592:	bf00      	nop
 8004594:	00100002 	.word	0x00100002
 8004598:	ffff0000 	.word	0xffff0000
 800459c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004614:	e0b8      	b.n	8004788 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461c:	2200      	movs	r2, #0
 800461e:	4966      	ldr	r1, [pc, #408]	@ (80047b8 <HAL_I2C_Mem_Read+0x448>)
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f001 fea9 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0bf      	b.n	80047b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800463e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004678:	2200      	movs	r2, #0
 800467a:	494f      	ldr	r1, [pc, #316]	@ (80047b8 <HAL_I2C_Mem_Read+0x448>)
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f001 fe7b 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e091      	b.n	80047b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004700:	e042      	b.n	8004788 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004704:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f002 f812 	bl	8006730 <I2C_WaitOnRXNEFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e04c      	b.n	80047b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b04      	cmp	r3, #4
 8004754:	d118      	bne.n	8004788 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478c:	2b00      	cmp	r3, #0
 800478e:	f47f aec2 	bne.w	8004516 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3728      	adds	r7, #40	@ 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	00010004 	.word	0x00010004

080047bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d003      	beq.n	80047f4 <HAL_I2C_EV_IRQHandler+0x38>
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b40      	cmp	r3, #64	@ 0x40
 80047f0:	f040 80b1 	bne.w	8004956 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <HAL_I2C_EV_IRQHandler+0x6e>
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004814:	d003      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x62>
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800481c:	d101      	bne.n	8004822 <HAL_I2C_EV_IRQHandler+0x66>
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <HAL_I2C_EV_IRQHandler+0x68>
 8004822:	2300      	movs	r3, #0
 8004824:	2b01      	cmp	r3, #1
 8004826:	f000 8114 	beq.w	8004a52 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <HAL_I2C_EV_IRQHandler+0x90>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f002 f801 	bl	8006846 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fd58 	bl	80052fa <I2C_Master_SB>
 800484a:	e083      	b.n	8004954 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d008      	beq.n	8004868 <HAL_I2C_EV_IRQHandler+0xac>
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fdcf 	bl	8005404 <I2C_Master_ADD10>
 8004866:	e075      	b.n	8004954 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_I2C_EV_IRQHandler+0xc8>
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fdea 	bl	8005456 <I2C_Master_ADDR>
 8004882:	e067      	b.n	8004954 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d036      	beq.n	80048fc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800489c:	f000 80db 	beq.w	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <HAL_I2C_EV_IRQHandler+0x10a>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_I2C_EV_IRQHandler+0x10a>
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9cc 	bl	8004c5c <I2C_MasterTransmit_TXE>
 80048c4:	e046      	b.n	8004954 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80c2 	beq.w	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80bc 	beq.w	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048de:	7bbb      	ldrb	r3, [r7, #14]
 80048e0:	2b21      	cmp	r3, #33	@ 0x21
 80048e2:	d103      	bne.n	80048ec <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fa55 	bl	8004d94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ea:	e0b4      	b.n	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	f040 80b1 	bne.w	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fac3 	bl	8004e80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048fa:	e0ac      	b.n	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800490a:	f000 80a4 	beq.w	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00d      	beq.n	8004934 <HAL_I2C_EV_IRQHandler+0x178>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491e:	2b00      	cmp	r3, #0
 8004920:	d008      	beq.n	8004934 <HAL_I2C_EV_IRQHandler+0x178>
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fb3f 	bl	8004fb0 <I2C_MasterReceive_RXNE>
 8004932:	e00f      	b.n	8004954 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 808b 	beq.w	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8085 	beq.w	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fbea 	bl	8005126 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004952:	e080      	b.n	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
 8004954:	e07f      	b.n	8004a56 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e007      	b.n	8004978 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d011      	beq.n	80049a6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00c      	beq.n	80049a6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800499c:	69b9      	ldr	r1, [r7, #24]
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 ffa5 	bl	80058ee <I2C_Slave_ADDR>
 80049a4:	e05a      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_I2C_EV_IRQHandler+0x206>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 ffe0 	bl	8005980 <I2C_Slave_STOPF>
 80049c0:	e04c      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049c2:	7bbb      	ldrb	r3, [r7, #14]
 80049c4:	2b21      	cmp	r3, #33	@ 0x21
 80049c6:	d002      	beq.n	80049ce <HAL_I2C_EV_IRQHandler+0x212>
 80049c8:	7bbb      	ldrb	r3, [r7, #14]
 80049ca:	2b29      	cmp	r3, #41	@ 0x29
 80049cc:	d120      	bne.n	8004a10 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <HAL_I2C_EV_IRQHandler+0x238>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_I2C_EV_IRQHandler+0x238>
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d103      	bne.n	80049f4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fec2 	bl	8005776 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049f2:	e032      	b.n	8004a5a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d02d      	beq.n	8004a5a <HAL_I2C_EV_IRQHandler+0x29e>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d028      	beq.n	8004a5a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fef1 	bl	80057f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a0e:	e024      	b.n	8004a5a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <HAL_I2C_EV_IRQHandler+0x27a>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_I2C_EV_IRQHandler+0x27a>
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fefe 	bl	8005830 <I2C_SlaveReceive_RXNE>
 8004a34:	e012      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 ff2e 	bl	80058ac <I2C_SlaveReceive_BTF>
 8004a50:	e004      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004a52:	bf00      	nop
 8004a54:	e002      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b08a      	sub	sp, #40	@ 0x28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a84:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00d      	beq.n	8004aac <HAL_I2C_ER_IRQHandler+0x4a>
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004aaa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <HAL_I2C_ER_IRQHandler+0x70>
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	f043 0302 	orr.w	r3, r3, #2
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004ad0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d03e      	beq.n	8004b5a <HAL_I2C_ER_IRQHandler+0xf8>
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d039      	beq.n	8004b5a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004ae6:	7efb      	ldrb	r3, [r7, #27]
 8004ae8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004b00:	7ebb      	ldrb	r3, [r7, #26]
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d112      	bne.n	8004b2c <HAL_I2C_ER_IRQHandler+0xca>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <HAL_I2C_ER_IRQHandler+0xca>
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	2b21      	cmp	r3, #33	@ 0x21
 8004b10:	d008      	beq.n	8004b24 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	2b29      	cmp	r3, #41	@ 0x29
 8004b16:	d005      	beq.n	8004b24 <HAL_I2C_ER_IRQHandler+0xc2>
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	2b28      	cmp	r3, #40	@ 0x28
 8004b1c:	d106      	bne.n	8004b2c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b21      	cmp	r3, #33	@ 0x21
 8004b22:	d103      	bne.n	8004b2c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f001 f85b 	bl	8005be0 <I2C_Slave_AF>
 8004b2a:	e016      	b.n	8004b5a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b34:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	f043 0304 	orr.w	r3, r3, #4
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b3e:	7efb      	ldrb	r3, [r7, #27]
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d002      	beq.n	8004b4a <HAL_I2C_ER_IRQHandler+0xe8>
 8004b44:	7efb      	ldrb	r3, [r7, #27]
 8004b46:	2b40      	cmp	r3, #64	@ 0x40
 8004b48:	d107      	bne.n	8004b5a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b58:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <HAL_I2C_ER_IRQHandler+0x11e>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	f043 0308 	orr.w	r3, r3, #8
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004b7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 f898 	bl	8005cc8 <I2C_ITError>
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3728      	adds	r7, #40	@ 0x28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr

08004c4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d150      	bne.n	8004d24 <I2C_MasterTransmit_TXE+0xc8>
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b21      	cmp	r3, #33	@ 0x21
 8004c86:	d14d      	bne.n	8004d24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d01d      	beq.n	8004cca <I2C_MasterTransmit_TXE+0x6e>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d01a      	beq.n	8004cca <I2C_MasterTransmit_TXE+0x6e>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c9a:	d016      	beq.n	8004cca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004caa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2211      	movs	r2, #17
 8004cb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff ff6c 	bl	8004ba0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cc8:	e060      	b.n	8004d8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b40      	cmp	r3, #64	@ 0x40
 8004d02:	d107      	bne.n	8004d14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff ff81 	bl	8004c14 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d12:	e03b      	b.n	8004d8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ff3f 	bl	8004ba0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d22:	e033      	b.n	8004d8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b21      	cmp	r3, #33	@ 0x21
 8004d28:	d005      	beq.n	8004d36 <I2C_MasterTransmit_TXE+0xda>
 8004d2a:	7bbb      	ldrb	r3, [r7, #14]
 8004d2c:	2b40      	cmp	r3, #64	@ 0x40
 8004d2e:	d12d      	bne.n	8004d8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b22      	cmp	r3, #34	@ 0x22
 8004d34:	d12a      	bne.n	8004d8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d108      	bne.n	8004d52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d50:	e01c      	b.n	8004d8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b40      	cmp	r3, #64	@ 0x40
 8004d5c:	d103      	bne.n	8004d66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f88e 	bl	8004e80 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d64:	e012      	b.n	8004d8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d8a:	e7ff      	b.n	8004d8c <I2C_MasterTransmit_TXE+0x130>
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b21      	cmp	r3, #33	@ 0x21
 8004dac:	d164      	bne.n	8004e78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d012      	beq.n	8004dde <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	781a      	ldrb	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ddc:	e04c      	b.n	8004e78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d01d      	beq.n	8004e20 <I2C_MasterTransmit_BTF+0x8c>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d01a      	beq.n	8004e20 <I2C_MasterTransmit_BTF+0x8c>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df0:	d016      	beq.n	8004e20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2211      	movs	r2, #17
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff fec1 	bl	8004ba0 <HAL_I2C_MasterTxCpltCallback>
}
 8004e1e:	e02b      	b.n	8004e78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	d107      	bne.n	8004e6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff fed6 	bl	8004c14 <HAL_I2C_MemTxCpltCallback>
}
 8004e68:	e006      	b.n	8004e78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fe94 	bl	8004ba0 <HAL_I2C_MasterTxCpltCallback>
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11d      	bne.n	8004ed4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10b      	bne.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb0:	1c9a      	adds	r2, r3, #2
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004eb6:	e077      	b.n	8004fa8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	121b      	asrs	r3, r3, #8
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ed2:	e069      	b.n	8004fa8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d10b      	bne.n	8004ef4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ef2:	e059      	b.n	8004fa8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d152      	bne.n	8004fa2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b22      	cmp	r3, #34	@ 0x22
 8004f00:	d10d      	bne.n	8004f1e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f10:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004f1c:	e044      	b.n	8004fa8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d015      	beq.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b21      	cmp	r3, #33	@ 0x21
 8004f2c:	d112      	bne.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004f52:	e029      	b.n	8004fa8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d124      	bne.n	8004fa8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b21      	cmp	r3, #33	@ 0x21
 8004f62:	d121      	bne.n	8004fa8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f72:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff fe3a 	bl	8004c14 <HAL_I2C_MemTxCpltCallback>
}
 8004fa0:	e002      	b.n	8004fa8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff f8d6 	bl	8004154 <I2C_Flush_DR>
}
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b22      	cmp	r3, #34	@ 0x22
 8004fc2:	f040 80ac 	bne.w	800511e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d921      	bls.n	8005018 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b03      	cmp	r3, #3
 8005002:	f040 808c 	bne.w	800511e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005014:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005016:	e082      	b.n	800511e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	2b02      	cmp	r3, #2
 800501e:	d075      	beq.n	800510c <I2C_MasterReceive_RXNE+0x15c>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d002      	beq.n	800502c <I2C_MasterReceive_RXNE+0x7c>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d16f      	bne.n	800510c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f001 fb4d 	bl	80066cc <I2C_WaitOnSTOPRequestThroughIT>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d142      	bne.n	80050be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005046:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005056:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b40      	cmp	r3, #64	@ 0x40
 8005090:	d10a      	bne.n	80050a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff fdc0 	bl	8004c26 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050a6:	e03a      	b.n	800511e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2212      	movs	r2, #18
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fd7b 	bl	8004bb2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050bc:	e02f      	b.n	800511e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff fd97 	bl	8004c38 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800510a:	e008      	b.n	800511e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800511a:	605a      	str	r2, [r3, #4]
}
 800511c:	e7ff      	b.n	800511e <I2C_MasterReceive_RXNE+0x16e>
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005132:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b04      	cmp	r3, #4
 800513c:	d11b      	bne.n	8005176 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800514c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005174:	e0bd      	b.n	80052f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b03      	cmp	r3, #3
 800517e:	d129      	bne.n	80051d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800518e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b04      	cmp	r3, #4
 8005194:	d00a      	beq.n	80051ac <I2C_MasterReceive_BTF+0x86>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d007      	beq.n	80051ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80051d2:	e08e      	b.n	80052f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d176      	bne.n	80052cc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d002      	beq.n	80051ea <I2C_MasterReceive_BTF+0xc4>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d108      	bne.n	80051fc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e019      	b.n	8005230 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d002      	beq.n	8005208 <I2C_MasterReceive_BTF+0xe2>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d108      	bne.n	800521a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e00a      	b.n	8005230 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b10      	cmp	r3, #16
 800521e:	d007      	beq.n	8005230 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800522e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800528a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b40      	cmp	r3, #64	@ 0x40
 800529e:	d10a      	bne.n	80052b6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fcb9 	bl	8004c26 <HAL_I2C_MemRxCpltCallback>
}
 80052b4:	e01d      	b.n	80052f2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2212      	movs	r2, #18
 80052c2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff fc74 	bl	8004bb2 <HAL_I2C_MasterRxCpltCallback>
}
 80052ca:	e012      	b.n	80052f2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b40      	cmp	r3, #64	@ 0x40
 800530c:	d117      	bne.n	800533e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005326:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005328:	e067      	b.n	80053fa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]
}
 800533c:	e05d      	b.n	80053fa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005346:	d133      	bne.n	80053b0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b21      	cmp	r3, #33	@ 0x21
 8005352:	d109      	bne.n	8005368 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005364:	611a      	str	r2, [r3, #16]
 8005366:	e008      	b.n	800537a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	b2da      	uxtb	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <I2C_Master_SB+0x92>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	2b00      	cmp	r3, #0
 800538a:	d108      	bne.n	800539e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	2b00      	cmp	r3, #0
 8005392:	d032      	beq.n	80053fa <I2C_Master_SB+0x100>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02d      	beq.n	80053fa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ac:	605a      	str	r2, [r3, #4]
}
 80053ae:	e024      	b.n	80053fa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10e      	bne.n	80053d6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053bc:	b29b      	uxth	r3, r3
 80053be:	11db      	asrs	r3, r3, #7
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	f003 0306 	and.w	r3, r3, #6
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	f063 030f 	orn	r3, r3, #15
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]
}
 80053d4:	e011      	b.n	80053fa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d10d      	bne.n	80053fa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	11db      	asrs	r3, r3, #7
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f003 0306 	and.w	r3, r3, #6
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f063 030e 	orn	r3, r3, #14
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	611a      	str	r2, [r3, #16]
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005410:	b2da      	uxtb	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <I2C_Master_ADD10+0x26>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d108      	bne.n	800543c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <I2C_Master_ADD10+0x48>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800544a:	605a      	str	r2, [r3, #4]
  }
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005456:	b480      	push	{r7}
 8005458:	b091      	sub	sp, #68	@ 0x44
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005464:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b22      	cmp	r3, #34	@ 0x22
 800547e:	f040 8169 	bne.w	8005754 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10f      	bne.n	80054aa <I2C_Master_ADDR+0x54>
 800548a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800548e:	2b40      	cmp	r3, #64	@ 0x40
 8005490:	d10b      	bne.n	80054aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005492:	2300      	movs	r3, #0
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	633b      	str	r3, [r7, #48]	@ 0x30
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	e160      	b.n	800576c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d11d      	bne.n	80054ee <I2C_Master_ADDR+0x98>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80054ba:	d118      	bne.n	80054ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054bc:	2300      	movs	r3, #0
 80054be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80054ec:	e13e      	b.n	800576c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d113      	bne.n	8005520 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054f8:	2300      	movs	r3, #0
 80054fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e115      	b.n	800574c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	f040 808a 	bne.w	8005640 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005532:	d137      	bne.n	80055a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005542:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800554e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005552:	d113      	bne.n	800557c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005562:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005564:	2300      	movs	r3, #0
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	e0e7      	b.n	800574c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557c:	2300      	movs	r3, #0
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	623b      	str	r3, [r7, #32]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	623b      	str	r3, [r7, #32]
 8005590:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e0d3      	b.n	800574c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80055a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d02e      	beq.n	8005608 <I2C_Master_ADDR+0x1b2>
 80055aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d02b      	beq.n	8005608 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80055b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b2:	2b12      	cmp	r3, #18
 80055b4:	d102      	bne.n	80055bc <I2C_Master_ADDR+0x166>
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d125      	bne.n	8005608 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d00e      	beq.n	80055e0 <I2C_Master_ADDR+0x18a>
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d00b      	beq.n	80055e0 <I2C_Master_ADDR+0x18a>
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d008      	beq.n	80055e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e007      	b.n	80055f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	61fb      	str	r3, [r7, #28]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	e0a1      	b.n	800574c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005616:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005618:	2300      	movs	r3, #0
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e085      	b.n	800574c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d14d      	bne.n	80056e6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800564a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564c:	2b04      	cmp	r3, #4
 800564e:	d016      	beq.n	800567e <I2C_Master_ADDR+0x228>
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	2b02      	cmp	r3, #2
 8005654:	d013      	beq.n	800567e <I2C_Master_ADDR+0x228>
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	2b10      	cmp	r3, #16
 800565a:	d010      	beq.n	800567e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800566a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e007      	b.n	800568e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800568c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800569c:	d117      	bne.n	80056ce <I2C_Master_ADDR+0x278>
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056a4:	d00b      	beq.n	80056be <I2C_Master_ADDR+0x268>
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d008      	beq.n	80056be <I2C_Master_ADDR+0x268>
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d005      	beq.n	80056be <I2C_Master_ADDR+0x268>
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d002      	beq.n	80056be <I2C_Master_ADDR+0x268>
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d107      	bne.n	80056ce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	e032      	b.n	800574c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005704:	d117      	bne.n	8005736 <I2C_Master_ADDR+0x2e0>
 8005706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005708:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800570c:	d00b      	beq.n	8005726 <I2C_Master_ADDR+0x2d0>
 800570e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005710:	2b01      	cmp	r3, #1
 8005712:	d008      	beq.n	8005726 <I2C_Master_ADDR+0x2d0>
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	2b08      	cmp	r3, #8
 8005718:	d005      	beq.n	8005726 <I2C_Master_ADDR+0x2d0>
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	2b10      	cmp	r3, #16
 800571e:	d002      	beq.n	8005726 <I2C_Master_ADDR+0x2d0>
 8005720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005722:	2b20      	cmp	r3, #32
 8005724:	d107      	bne.n	8005736 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005734:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005752:	e00b      	b.n	800576c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
}
 800576a:	e7ff      	b.n	800576c <I2C_Master_ADDR+0x316>
 800576c:	bf00      	nop
 800576e:	3744      	adds	r7, #68	@ 0x44
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005784:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d02b      	beq.n	80057e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d114      	bne.n	80057e8 <I2C_SlaveTransmit_TXE+0x72>
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	2b29      	cmp	r3, #41	@ 0x29
 80057c2:	d111      	bne.n	80057e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2221      	movs	r2, #33	@ 0x21
 80057d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2228      	movs	r2, #40	@ 0x28
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff f9ee 	bl	8004bc4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057e8:	bf00      	nop
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d011      	beq.n	8005826 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr

08005830 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d02c      	beq.n	80058a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d114      	bne.n	80058a4 <I2C_SlaveReceive_RXNE+0x74>
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	2b2a      	cmp	r3, #42	@ 0x2a
 800587e:	d111      	bne.n	80058a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2222      	movs	r2, #34	@ 0x22
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2228      	movs	r2, #40	@ 0x28
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff f999 	bl	8004bd6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d012      	beq.n	80058e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005908:	2b28      	cmp	r3, #40	@ 0x28
 800590a:	d125      	bne.n	8005958 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800591a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005926:	2301      	movs	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	81bb      	strh	r3, [r7, #12]
 800593a:	e002      	b.n	8005942 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800594a:	89ba      	ldrh	r2, [r7, #12]
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff f949 	bl	8004be8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005956:	e00e      	b.n	8005976 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005958:	2300      	movs	r3, #0
 800595a:	60bb      	str	r3, [r7, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	60bb      	str	r3, [r7, #8]
 800596c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800599e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80059a0:	2300      	movs	r3, #0
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	60bb      	str	r3, [r7, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059dc:	d172      	bne.n	8005ac4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	2b22      	cmp	r3, #34	@ 0x22
 80059e2:	d002      	beq.n	80059ea <I2C_Slave_STOPF+0x6a>
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80059e8:	d135      	bne.n	8005a56 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a06:	f043 0204 	orr.w	r2, r3, #4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe f893 	bl	8003b4e <HAL_DMA_GetState>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d049      	beq.n	8005ac2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a32:	4a69      	ldr	r2, [pc, #420]	@ (8005bd8 <I2C_Slave_STOPF+0x258>)
 8005a34:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe f846 	bl	8003acc <HAL_DMA_Abort_IT>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d03d      	beq.n	8005ac2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a54:	e035      	b.n	8005ac2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a72:	f043 0204 	orr.w	r2, r3, #4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe f85d 	bl	8003b4e <HAL_DMA_GetState>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d014      	beq.n	8005ac4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8005bd8 <I2C_Slave_STOPF+0x258>)
 8005aa0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe f810 	bl	8003acc <HAL_DMA_Abort_IT>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d008      	beq.n	8005ac4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
 8005ac0:	e000      	b.n	8005ac4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ac2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d03e      	beq.n	8005b4c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d112      	bne.n	8005b02 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b40      	cmp	r3, #64	@ 0x40
 8005b0e:	d112      	bne.n	8005b36 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b44:	f043 0204 	orr.w	r2, r3, #4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f8b7 	bl	8005cc8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b5a:	e039      	b.n	8005bd0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b60:	d109      	bne.n	8005b76 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2228      	movs	r2, #40	@ 0x28
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff f830 	bl	8004bd6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b28      	cmp	r3, #40	@ 0x28
 8005b80:	d111      	bne.n	8005ba6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a15      	ldr	r2, [pc, #84]	@ (8005bdc <I2C_Slave_STOPF+0x25c>)
 8005b86:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff f82f 	bl	8004c02 <HAL_I2C_ListenCpltCallback>
}
 8005ba4:	e014      	b.n	8005bd0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005baa:	2b22      	cmp	r3, #34	@ 0x22
 8005bac:	d002      	beq.n	8005bb4 <I2C_Slave_STOPF+0x234>
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	2b22      	cmp	r3, #34	@ 0x22
 8005bb2:	d10d      	bne.n	8005bd0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff f803 	bl	8004bd6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	08006229 	.word	0x08006229
 8005bdc:	ffff0000 	.word	0xffff0000

08005be0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d002      	beq.n	8005c02 <I2C_Slave_AF+0x22>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d129      	bne.n	8005c56 <I2C_Slave_AF+0x76>
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b28      	cmp	r3, #40	@ 0x28
 8005c06:	d126      	bne.n	8005c56 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc4 <I2C_Slave_AF+0xe4>)
 8005c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c1c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c26:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c36:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fe ffd7 	bl	8004c02 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005c54:	e031      	b.n	8005cba <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b21      	cmp	r3, #33	@ 0x21
 8005c5a:	d129      	bne.n	8005cb0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a19      	ldr	r2, [pc, #100]	@ (8005cc4 <I2C_Slave_AF+0xe4>)
 8005c60:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2221      	movs	r2, #33	@ 0x21
 8005c66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c86:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c90:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ca0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fe fa56 	bl	8004154 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7fe ff8b 	bl	8004bc4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005cae:	e004      	b.n	8005cba <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cb8:	615a      	str	r2, [r3, #20]
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	ffff0000 	.word	0xffff0000

08005cc8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d002      	beq.n	8005cec <I2C_ITError+0x24>
 8005ce6:	7bbb      	ldrb	r3, [r7, #14]
 8005ce8:	2b40      	cmp	r3, #64	@ 0x40
 8005cea:	d10a      	bne.n	8005d02 <I2C_ITError+0x3a>
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b22      	cmp	r3, #34	@ 0x22
 8005cf0:	d107      	bne.n	8005d02 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d08:	2b28      	cmp	r3, #40	@ 0x28
 8005d0a:	d107      	bne.n	8005d1c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2228      	movs	r2, #40	@ 0x28
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d1a:	e015      	b.n	8005d48 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d2a:	d00a      	beq.n	8005d42 <I2C_ITError+0x7a>
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b60      	cmp	r3, #96	@ 0x60
 8005d30:	d007      	beq.n	8005d42 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d56:	d162      	bne.n	8005e1e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d020      	beq.n	8005db8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d7a:	4a6a      	ldr	r2, [pc, #424]	@ (8005f24 <I2C_ITError+0x25c>)
 8005d7c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fd fea2 	bl	8003acc <HAL_DMA_Abort_IT>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8089 	beq.w	8005ea2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005db2:	4610      	mov	r0, r2
 8005db4:	4798      	blx	r3
 8005db6:	e074      	b.n	8005ea2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbc:	4a59      	ldr	r2, [pc, #356]	@ (8005f24 <I2C_ITError+0x25c>)
 8005dbe:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fd fe81 	bl	8003acc <HAL_DMA_Abort_IT>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d068      	beq.n	8005ea2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dda:	2b40      	cmp	r3, #64	@ 0x40
 8005ddc:	d10b      	bne.n	8005df6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
 8005e1c:	e041      	b.n	8005ea2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b60      	cmp	r3, #96	@ 0x60
 8005e28:	d125      	bne.n	8005e76 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e42:	2b40      	cmp	r3, #64	@ 0x40
 8005e44:	d10b      	bne.n	8005e5e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fe feeb 	bl	8004c4a <HAL_I2C_AbortCpltCallback>
 8005e74:	e015      	b.n	8005ea2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e80:	2b40      	cmp	r3, #64	@ 0x40
 8005e82:	d10b      	bne.n	8005e9c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7fe fecb 	bl	8004c38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10e      	bne.n	8005ed0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d104      	bne.n	8005ed0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ede:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d113      	bne.n	8005f1c <I2C_ITError+0x254>
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b28      	cmp	r3, #40	@ 0x28
 8005ef8:	d110      	bne.n	8005f1c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a0a      	ldr	r2, [pc, #40]	@ (8005f28 <I2C_ITError+0x260>)
 8005efe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fe fe73 	bl	8004c02 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	08006229 	.word	0x08006229
 8005f28:	ffff0000 	.word	0xffff0000

08005f2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	817b      	strh	r3, [r7, #10]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	813b      	strh	r3, [r7, #8]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fa08 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00d      	beq.n	8005f8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f7c:	d103      	bne.n	8005f86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e05f      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f8a:	897b      	ldrh	r3, [r7, #10]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	492d      	ldr	r1, [pc, #180]	@ (8006054 <I2C_RequestMemoryWrite+0x128>)
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fa63 	bl	800646c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e04c      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc8:	6a39      	ldr	r1, [r7, #32]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 faee 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00d      	beq.n	8005ff2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d107      	bne.n	8005fee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e02b      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d105      	bne.n	8006004 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff8:	893b      	ldrh	r3, [r7, #8]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	611a      	str	r2, [r3, #16]
 8006002:	e021      	b.n	8006048 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006004:	893b      	ldrh	r3, [r7, #8]
 8006006:	0a1b      	lsrs	r3, r3, #8
 8006008:	b29b      	uxth	r3, r3
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006014:	6a39      	ldr	r1, [r7, #32]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fac8 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006026:	2b04      	cmp	r3, #4
 8006028:	d107      	bne.n	800603a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e005      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800603e:	893b      	ldrh	r3, [r7, #8]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	00010002 	.word	0x00010002

08006058 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	460b      	mov	r3, r1
 800606c:	813b      	strh	r3, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006080:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	2200      	movs	r2, #0
 800609a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f96a 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b8:	d103      	bne.n	80060c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e0aa      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060c6:	897b      	ldrh	r3, [r7, #10]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	6a3a      	ldr	r2, [r7, #32]
 80060da:	4952      	ldr	r1, [pc, #328]	@ (8006224 <I2C_RequestMemoryRead+0x1cc>)
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f9c5 	bl	800646c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e097      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006104:	6a39      	ldr	r1, [r7, #32]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fa50 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	2b04      	cmp	r3, #4
 8006118:	d107      	bne.n	800612a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e076      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d105      	bne.n	8006140 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006134:	893b      	ldrh	r3, [r7, #8]
 8006136:	b2da      	uxtb	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	611a      	str	r2, [r3, #16]
 800613e:	e021      	b.n	8006184 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006140:	893b      	ldrh	r3, [r7, #8]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b29b      	uxth	r3, r3
 8006146:	b2da      	uxtb	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006150:	6a39      	ldr	r1, [r7, #32]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 fa2a 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00d      	beq.n	800617a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	2b04      	cmp	r3, #4
 8006164:	d107      	bne.n	8006176 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e050      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800617a:	893b      	ldrh	r3, [r7, #8]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006186:	6a39      	ldr	r1, [r7, #32]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fa0f 	bl	80065ac <I2C_WaitOnTXEFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	2b04      	cmp	r3, #4
 800619a:	d107      	bne.n	80061ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e035      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f8d3 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e6:	d103      	bne.n	80061f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e013      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061f4:	897b      	ldrh	r3, [r7, #10]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	6a3a      	ldr	r2, [r7, #32]
 8006208:	4906      	ldr	r1, [pc, #24]	@ (8006224 <I2C_RequestMemoryRead+0x1cc>)
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f92e 	bl	800646c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	00010002 	.word	0x00010002

08006228 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006238:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006240:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006242:	4b4b      	ldr	r3, [pc, #300]	@ (8006370 <I2C_DMAAbort+0x148>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	08db      	lsrs	r3, r3, #3
 8006248:	4a4a      	ldr	r2, [pc, #296]	@ (8006374 <I2C_DMAAbort+0x14c>)
 800624a:	fba2 2303 	umull	r2, r3, r2, r3
 800624e:	0a1a      	lsrs	r2, r3, #8
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	00da      	lsls	r2, r3, #3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006266:	f043 0220 	orr.w	r2, r3, #32
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800626e:	e00a      	b.n	8006286 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3b01      	subs	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006284:	d0ea      	beq.n	800625c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006292:	2200      	movs	r2, #0
 8006294:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a2:	2200      	movs	r2, #0
 80062a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2200      	movs	r2, #0
 80062ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c8:	2200      	movs	r2, #0
 80062ca:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d8:	2200      	movs	r2, #0
 80062da:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b60      	cmp	r3, #96	@ 0x60
 80062f6:	d10e      	bne.n	8006316 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2200      	movs	r2, #0
 800630c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800630e:	6978      	ldr	r0, [r7, #20]
 8006310:	f7fe fc9b 	bl	8004c4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006314:	e027      	b.n	8006366 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006316:	7cfb      	ldrb	r3, [r7, #19]
 8006318:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800631c:	2b28      	cmp	r3, #40	@ 0x28
 800631e:	d117      	bne.n	8006350 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800633e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2200      	movs	r2, #0
 8006344:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2228      	movs	r2, #40	@ 0x28
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800634e:	e007      	b.n	8006360 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006360:	6978      	ldr	r0, [r7, #20]
 8006362:	f7fe fc69 	bl	8004c38 <HAL_I2C_ErrorCallback>
}
 8006366:	bf00      	nop
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000174 	.word	0x20000174
 8006374:	14f8b589 	.word	0x14f8b589

08006378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006388:	e048      	b.n	800641c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d044      	beq.n	800641c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7fc fe67 	bl	8003064 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d139      	bne.n	800641c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d10d      	bne.n	80063ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	43da      	mvns	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4013      	ands	r3, r2
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	e00c      	b.n	80063e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	43da      	mvns	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4013      	ands	r3, r2
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d116      	bne.n	800641c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e023      	b.n	8006464 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	0c1b      	lsrs	r3, r3, #16
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10d      	bne.n	8006442 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	43da      	mvns	r2, r3
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4013      	ands	r3, r2
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	bf0c      	ite	eq
 8006438:	2301      	moveq	r3, #1
 800643a:	2300      	movne	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	461a      	mov	r2, r3
 8006440:	e00c      	b.n	800645c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	43da      	mvns	r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	4013      	ands	r3, r2
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	bf0c      	ite	eq
 8006454:	2301      	moveq	r3, #1
 8006456:	2300      	movne	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	429a      	cmp	r2, r3
 8006460:	d093      	beq.n	800638a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800647a:	e071      	b.n	8006560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800648a:	d123      	bne.n	80064d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800649a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c0:	f043 0204 	orr.w	r2, r3, #4
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e067      	b.n	80065a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d041      	beq.n	8006560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064dc:	f7fc fdc2 	bl	8003064 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d136      	bne.n	8006560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	0c1b      	lsrs	r3, r3, #16
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d10c      	bne.n	8006516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	43da      	mvns	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4013      	ands	r3, r2
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	bf14      	ite	ne
 800650e:	2301      	movne	r3, #1
 8006510:	2300      	moveq	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	e00b      	b.n	800652e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	43da      	mvns	r2, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4013      	ands	r3, r2
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	bf14      	ite	ne
 8006528:	2301      	movne	r3, #1
 800652a:	2300      	moveq	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d016      	beq.n	8006560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654c:	f043 0220 	orr.w	r2, r3, #32
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e021      	b.n	80065a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	0c1b      	lsrs	r3, r3, #16
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b01      	cmp	r3, #1
 8006568:	d10c      	bne.n	8006584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	43da      	mvns	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4013      	ands	r3, r2
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	e00b      	b.n	800659c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	43da      	mvns	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	bf14      	ite	ne
 8006596:	2301      	movne	r3, #1
 8006598:	2300      	moveq	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	f47f af6d 	bne.w	800647c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b8:	e034      	b.n	8006624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f915 	bl	80067ea <I2C_IsAcknowledgeFailed>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e034      	b.n	8006634 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d028      	beq.n	8006624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d2:	f7fc fd47 	bl	8003064 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11d      	bne.n	8006624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f2:	2b80      	cmp	r3, #128	@ 0x80
 80065f4:	d016      	beq.n	8006624 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006610:	f043 0220 	orr.w	r2, r3, #32
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e007      	b.n	8006634 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662e:	2b80      	cmp	r3, #128	@ 0x80
 8006630:	d1c3      	bne.n	80065ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006648:	e034      	b.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f8cd 	bl	80067ea <I2C_IsAcknowledgeFailed>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e034      	b.n	80066c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d028      	beq.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006662:	f7fc fcff 	bl	8003064 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d11d      	bne.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b04      	cmp	r3, #4
 8006684:	d016      	beq.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a0:	f043 0220 	orr.w	r2, r3, #32
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e007      	b.n	80066c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d1c3      	bne.n	800664a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80066d8:	4b13      	ldr	r3, [pc, #76]	@ (8006728 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	08db      	lsrs	r3, r3, #3
 80066de:	4a13      	ldr	r2, [pc, #76]	@ (800672c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	0a1a      	lsrs	r2, r3, #8
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d107      	bne.n	800670a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e008      	b.n	800671c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006718:	d0e9      	beq.n	80066ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20000174 	.word	0x20000174
 800672c:	14f8b589 	.word	0x14f8b589

08006730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800673c:	e049      	b.n	80067d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b10      	cmp	r3, #16
 800674a:	d119      	bne.n	8006780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0210 	mvn.w	r2, #16
 8006754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e030      	b.n	80067e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006780:	f7fc fc70 	bl	8003064 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	d302      	bcc.n	8006796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d11d      	bne.n	80067d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a0:	2b40      	cmp	r3, #64	@ 0x40
 80067a2:	d016      	beq.n	80067d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067be:	f043 0220 	orr.w	r2, r3, #32
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e007      	b.n	80067e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067dc:	2b40      	cmp	r3, #64	@ 0x40
 80067de:	d1ae      	bne.n	800673e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006800:	d11b      	bne.n	800683a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800680a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	f043 0204 	orr.w	r2, r3, #4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr

08006846 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006852:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006856:	d103      	bne.n	8006860 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800685e:	e007      	b.n	8006870 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006868:	d102      	bne.n	8006870 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2208      	movs	r2, #8
 800686e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr
	...

0800687c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e31d      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800688e:	4b94      	ldr	r3, [pc, #592]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 030c 	and.w	r3, r3, #12
 8006896:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006898:	4b91      	ldr	r3, [pc, #580]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068a0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d07b      	beq.n	80069a6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d006      	beq.n	80068c2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b0c      	cmp	r3, #12
 80068b8:	d10f      	bne.n	80068da <HAL_RCC_OscConfig+0x5e>
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c0:	d10b      	bne.n	80068da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068c2:	4b87      	ldr	r3, [pc, #540]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d06a      	beq.n	80069a4 <HAL_RCC_OscConfig+0x128>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d166      	bne.n	80069a4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e2f7      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d106      	bne.n	80068f0 <HAL_RCC_OscConfig+0x74>
 80068e2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 80068e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	e02d      	b.n	800694c <HAL_RCC_OscConfig+0xd0>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10c      	bne.n	8006912 <HAL_RCC_OscConfig+0x96>
 80068f8:	4b79      	ldr	r3, [pc, #484]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a78      	ldr	r2, [pc, #480]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 80068fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	4b76      	ldr	r3, [pc, #472]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a75      	ldr	r2, [pc, #468]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 800690a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	e01c      	b.n	800694c <HAL_RCC_OscConfig+0xd0>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b05      	cmp	r3, #5
 8006918:	d10c      	bne.n	8006934 <HAL_RCC_OscConfig+0xb8>
 800691a:	4b71      	ldr	r3, [pc, #452]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a70      	ldr	r2, [pc, #448]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	4b6e      	ldr	r3, [pc, #440]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a6d      	ldr	r2, [pc, #436]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 800692c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e00b      	b.n	800694c <HAL_RCC_OscConfig+0xd0>
 8006934:	4b6a      	ldr	r3, [pc, #424]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a69      	ldr	r2, [pc, #420]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 800693a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4b67      	ldr	r3, [pc, #412]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a66      	ldr	r2, [pc, #408]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800694a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d013      	beq.n	800697c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006954:	f7fc fb86 	bl	8003064 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800695c:	f7fc fb82 	bl	8003064 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b64      	cmp	r3, #100	@ 0x64
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e2ad      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800696e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0xe0>
 800697a:	e014      	b.n	80069a6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800697c:	f7fc fb72 	bl	8003064 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006984:	f7fc fb6e 	bl	8003064 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b64      	cmp	r3, #100	@ 0x64
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e299      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006996:	4b52      	ldr	r3, [pc, #328]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x108>
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d05a      	beq.n	8006a68 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d005      	beq.n	80069c4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b0c      	cmp	r3, #12
 80069bc:	d119      	bne.n	80069f2 <HAL_RCC_OscConfig+0x176>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d116      	bne.n	80069f2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069c4:	4b46      	ldr	r3, [pc, #280]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_RCC_OscConfig+0x160>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d001      	beq.n	80069dc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e276      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069dc:	4b40      	ldr	r3, [pc, #256]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	493d      	ldr	r1, [pc, #244]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f0:	e03a      	b.n	8006a68 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d020      	beq.n	8006a3c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069fa:	4b3a      	ldr	r3, [pc, #232]	@ (8006ae4 <HAL_RCC_OscConfig+0x268>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a00:	f7fc fb30 	bl	8003064 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a08:	f7fc fb2c 	bl	8003064 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e257      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a1a:	4b31      	ldr	r3, [pc, #196]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a26:	4b2e      	ldr	r3, [pc, #184]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	492a      	ldr	r1, [pc, #168]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	604b      	str	r3, [r1, #4]
 8006a3a:	e015      	b.n	8006a68 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a3c:	4b29      	ldr	r3, [pc, #164]	@ (8006ae4 <HAL_RCC_OscConfig+0x268>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a42:	f7fc fb0f 	bl	8003064 <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a4a:	f7fc fb0b 	bl	8003064 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e236      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a5c:	4b20      	ldr	r3, [pc, #128]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f0      	bne.n	8006a4a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80b8 	beq.w	8006be6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d170      	bne.n	8006b5e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a7c:	4b18      	ldr	r3, [pc, #96]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <HAL_RCC_OscConfig+0x218>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e21a      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1a      	ldr	r2, [r3, #32]
 8006a98:	4b11      	ldr	r3, [pc, #68]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d921      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fc3b 	bl	8007324 <RCC_SetFlashLatencyFromMSIRange>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e208      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ab8:	4b09      	ldr	r3, [pc, #36]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	4906      	ldr	r1, [pc, #24]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006aca:	4b05      	ldr	r3, [pc, #20]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	061b      	lsls	r3, r3, #24
 8006ad8:	4901      	ldr	r1, [pc, #4]	@ (8006ae0 <HAL_RCC_OscConfig+0x264>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	604b      	str	r3, [r1, #4]
 8006ade:	e020      	b.n	8006b22 <HAL_RCC_OscConfig+0x2a6>
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ae8:	4b99      	ldr	r3, [pc, #612]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	4996      	ldr	r1, [pc, #600]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006afa:	4b95      	ldr	r3, [pc, #596]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	061b      	lsls	r3, r3, #24
 8006b08:	4991      	ldr	r1, [pc, #580]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fc06 	bl	8007324 <RCC_SetFlashLatencyFromMSIRange>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e1d3      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	0b5b      	lsrs	r3, r3, #13
 8006b28:	3301      	adds	r3, #1
 8006b2a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006b32:	4a87      	ldr	r2, [pc, #540]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006b34:	6892      	ldr	r2, [r2, #8]
 8006b36:	0912      	lsrs	r2, r2, #4
 8006b38:	f002 020f 	and.w	r2, r2, #15
 8006b3c:	4985      	ldr	r1, [pc, #532]	@ (8006d54 <HAL_RCC_OscConfig+0x4d8>)
 8006b3e:	5c8a      	ldrb	r2, [r1, r2]
 8006b40:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006b42:	4a85      	ldr	r2, [pc, #532]	@ (8006d58 <HAL_RCC_OscConfig+0x4dc>)
 8006b44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006b46:	4b85      	ldr	r3, [pc, #532]	@ (8006d5c <HAL_RCC_OscConfig+0x4e0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fc fa3e 	bl	8002fcc <HAL_InitTick>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d045      	beq.n	8006be6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	e1b5      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d029      	beq.n	8006bba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b66:	4b7e      	ldr	r3, [pc, #504]	@ (8006d60 <HAL_RCC_OscConfig+0x4e4>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6c:	f7fc fa7a 	bl	8003064 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b74:	f7fc fa76 	bl	8003064 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e1a1      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006b86:	4b72      	ldr	r3, [pc, #456]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0f0      	beq.n	8006b74 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b92:	4b6f      	ldr	r3, [pc, #444]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	496c      	ldr	r1, [pc, #432]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	061b      	lsls	r3, r3, #24
 8006bb2:	4967      	ldr	r1, [pc, #412]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	604b      	str	r3, [r1, #4]
 8006bb8:	e015      	b.n	8006be6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006bba:	4b69      	ldr	r3, [pc, #420]	@ (8006d60 <HAL_RCC_OscConfig+0x4e4>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc0:	f7fc fa50 	bl	8003064 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bc8:	f7fc fa4c 	bl	8003064 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e177      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006bda:	4b5d      	ldr	r3, [pc, #372]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d030      	beq.n	8006c54 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8006d64 <HAL_RCC_OscConfig+0x4e8>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c00:	f7fc fa30 	bl	8003064 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c08:	f7fc fa2c 	bl	8003064 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e157      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x38c>
 8006c26:	e015      	b.n	8006c54 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c28:	4b4e      	ldr	r3, [pc, #312]	@ (8006d64 <HAL_RCC_OscConfig+0x4e8>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c2e:	f7fc fa19 	bl	8003064 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c36:	f7fc fa15 	bl	8003064 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e140      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c48:	4b41      	ldr	r3, [pc, #260]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f0      	bne.n	8006c36 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80b5 	beq.w	8006dcc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c62:	2300      	movs	r3, #0
 8006c64:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c66:	4b3a      	ldr	r3, [pc, #232]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10d      	bne.n	8006c8e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c72:	4b37      	ldr	r3, [pc, #220]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c76:	4a36      	ldr	r2, [pc, #216]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c7c:	6253      	str	r3, [r2, #36]	@ 0x24
 8006c7e:	4b34      	ldr	r3, [pc, #208]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c86:	60bb      	str	r3, [r7, #8]
 8006c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c8e:	4b36      	ldr	r3, [pc, #216]	@ (8006d68 <HAL_RCC_OscConfig+0x4ec>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d118      	bne.n	8006ccc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c9a:	4b33      	ldr	r3, [pc, #204]	@ (8006d68 <HAL_RCC_OscConfig+0x4ec>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a32      	ldr	r2, [pc, #200]	@ (8006d68 <HAL_RCC_OscConfig+0x4ec>)
 8006ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ca6:	f7fc f9dd 	bl	8003064 <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cae:	f7fc f9d9 	bl	8003064 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b64      	cmp	r3, #100	@ 0x64
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e104      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc0:	4b29      	ldr	r3, [pc, #164]	@ (8006d68 <HAL_RCC_OscConfig+0x4ec>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d106      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x466>
 8006cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cde:	6353      	str	r3, [r2, #52]	@ 0x34
 8006ce0:	e02d      	b.n	8006d3e <HAL_RCC_OscConfig+0x4c2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10c      	bne.n	8006d04 <HAL_RCC_OscConfig+0x488>
 8006cea:	4b19      	ldr	r3, [pc, #100]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cee:	4a18      	ldr	r2, [pc, #96]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cf4:	6353      	str	r3, [r2, #52]	@ 0x34
 8006cf6:	4b16      	ldr	r3, [pc, #88]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfa:	4a15      	ldr	r2, [pc, #84]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006cfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d00:	6353      	str	r3, [r2, #52]	@ 0x34
 8006d02:	e01c      	b.n	8006d3e <HAL_RCC_OscConfig+0x4c2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	2b05      	cmp	r3, #5
 8006d0a:	d10c      	bne.n	8006d26 <HAL_RCC_OscConfig+0x4aa>
 8006d0c:	4b10      	ldr	r3, [pc, #64]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d10:	4a0f      	ldr	r2, [pc, #60]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d16:	6353      	str	r3, [r2, #52]	@ 0x34
 8006d18:	4b0d      	ldr	r3, [pc, #52]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d22:	6353      	str	r3, [r2, #52]	@ 0x34
 8006d24:	e00b      	b.n	8006d3e <HAL_RCC_OscConfig+0x4c2>
 8006d26:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d2a:	4a09      	ldr	r2, [pc, #36]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d30:	6353      	str	r3, [r2, #52]	@ 0x34
 8006d32:	4b07      	ldr	r3, [pc, #28]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d36:	4a06      	ldr	r2, [pc, #24]	@ (8006d50 <HAL_RCC_OscConfig+0x4d4>)
 8006d38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d3c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d024      	beq.n	8006d90 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d46:	f7fc f98d 	bl	8003064 <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d4c:	e019      	b.n	8006d82 <HAL_RCC_OscConfig+0x506>
 8006d4e:	bf00      	nop
 8006d50:	40023800 	.word	0x40023800
 8006d54:	0800cb00 	.word	0x0800cb00
 8006d58:	20000174 	.word	0x20000174
 8006d5c:	20000178 	.word	0x20000178
 8006d60:	42470020 	.word	0x42470020
 8006d64:	42470680 	.word	0x42470680
 8006d68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d6c:	f7fc f97a 	bl	8003064 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e0a3      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d82:	4b54      	ldr	r3, [pc, #336]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0ee      	beq.n	8006d6c <HAL_RCC_OscConfig+0x4f0>
 8006d8e:	e014      	b.n	8006dba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d90:	f7fc f968 	bl	8003064 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d96:	e00a      	b.n	8006dae <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d98:	f7fc f964 	bl	8003064 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e08d      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dae:	4b49      	ldr	r3, [pc, #292]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006db2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1ee      	bne.n	8006d98 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006dba:	7ffb      	ldrb	r3, [r7, #31]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d105      	bne.n	8006dcc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dc0:	4b44      	ldr	r3, [pc, #272]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	4a43      	ldr	r2, [pc, #268]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d079      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2b0c      	cmp	r3, #12
 8006dd8:	d056      	beq.n	8006e88 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d13b      	bne.n	8006e5a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ed8 <HAL_RCC_OscConfig+0x65c>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de8:	f7fc f93c 	bl	8003064 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006df0:	f7fc f938 	bl	8003064 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e063      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e02:	4b34      	ldr	r3, [pc, #208]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e0e:	4b31      	ldr	r3, [pc, #196]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1e:	4319      	orrs	r1, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e24:	430b      	orrs	r3, r1
 8006e26:	492b      	ldr	r1, [pc, #172]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ed8 <HAL_RCC_OscConfig+0x65c>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e32:	f7fc f917 	bl	8003064 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e3a:	f7fc f913 	bl	8003064 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e03e      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e4c:	4b21      	ldr	r3, [pc, #132]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0f0      	beq.n	8006e3a <HAL_RCC_OscConfig+0x5be>
 8006e58:	e036      	b.n	8006ec8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed8 <HAL_RCC_OscConfig+0x65c>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e60:	f7fc f900 	bl	8003064 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e68:	f7fc f8fc 	bl	8003064 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e027      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e7a:	4b16      	ldr	r3, [pc, #88]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f0      	bne.n	8006e68 <HAL_RCC_OscConfig+0x5ec>
 8006e86:	e01f      	b.n	8006ec8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e01a      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e94:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed4 <HAL_RCC_OscConfig+0x658>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d10d      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d106      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d001      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	42470060 	.word	0x42470060

08006edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e11a      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef0:	4b8f      	ldr	r3, [pc, #572]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d919      	bls.n	8006f32 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d105      	bne.n	8006f10 <HAL_RCC_ClockConfig+0x34>
 8006f04:	4b8a      	ldr	r3, [pc, #552]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a89      	ldr	r2, [pc, #548]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 8006f0a:	f043 0304 	orr.w	r3, r3, #4
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	4b87      	ldr	r3, [pc, #540]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f023 0201 	bic.w	r2, r3, #1
 8006f18:	4985      	ldr	r1, [pc, #532]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f20:	4b83      	ldr	r3, [pc, #524]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d001      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e0f9      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d008      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f3e:	4b7d      	ldr	r3, [pc, #500]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	497a      	ldr	r1, [pc, #488]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 808e 	beq.w	800707a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d107      	bne.n	8006f76 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f66:	4b73      	ldr	r3, [pc, #460]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d121      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e0d7      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d107      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d115      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e0cb      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d107      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f96:	4b67      	ldr	r3, [pc, #412]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e0bf      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006fa6:	4b63      	ldr	r3, [pc, #396]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e0b7      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f023 0203 	bic.w	r2, r3, #3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	495c      	ldr	r1, [pc, #368]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fc8:	f7fc f84c 	bl	8003064 <HAL_GetTick>
 8006fcc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d112      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fd6:	e00a      	b.n	8006fee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fd8:	f7fc f844 	bl	8003064 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e09b      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fee:	4b51      	ldr	r3, [pc, #324]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 030c 	and.w	r3, r3, #12
 8006ff6:	2b08      	cmp	r3, #8
 8006ff8:	d1ee      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0xfc>
 8006ffa:	e03e      	b.n	800707a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d112      	bne.n	800702a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007004:	e00a      	b.n	800701c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007006:	f7fc f82d 	bl	8003064 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007014:	4293      	cmp	r3, r2
 8007016:	d901      	bls.n	800701c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e084      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800701c:	4b45      	ldr	r3, [pc, #276]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f003 030c 	and.w	r3, r3, #12
 8007024:	2b0c      	cmp	r3, #12
 8007026:	d1ee      	bne.n	8007006 <HAL_RCC_ClockConfig+0x12a>
 8007028:	e027      	b.n	800707a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d11d      	bne.n	800706e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007032:	e00a      	b.n	800704a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007034:	f7fc f816 	bl	8003064 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007042:	4293      	cmp	r3, r2
 8007044:	d901      	bls.n	800704a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e06d      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800704a:	4b3a      	ldr	r3, [pc, #232]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 030c 	and.w	r3, r3, #12
 8007052:	2b04      	cmp	r3, #4
 8007054:	d1ee      	bne.n	8007034 <HAL_RCC_ClockConfig+0x158>
 8007056:	e010      	b.n	800707a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007058:	f7fc f804 	bl	8003064 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007066:	4293      	cmp	r3, r2
 8007068:	d901      	bls.n	800706e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e05b      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800706e:	4b31      	ldr	r3, [pc, #196]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 030c 	and.w	r3, r3, #12
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1ee      	bne.n	8007058 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800707a:	4b2d      	ldr	r3, [pc, #180]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d219      	bcs.n	80070bc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d105      	bne.n	800709a <HAL_RCC_ClockConfig+0x1be>
 800708e:	4b28      	ldr	r3, [pc, #160]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a27      	ldr	r2, [pc, #156]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 8007094:	f043 0304 	orr.w	r3, r3, #4
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	4b25      	ldr	r3, [pc, #148]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 0201 	bic.w	r2, r3, #1
 80070a2:	4923      	ldr	r1, [pc, #140]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070aa:	4b21      	ldr	r3, [pc, #132]	@ (8007130 <HAL_RCC_ClockConfig+0x254>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d001      	beq.n	80070bc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e034      	b.n	8007126 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4917      	ldr	r1, [pc, #92]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070e6:	4b13      	ldr	r3, [pc, #76]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	490f      	ldr	r1, [pc, #60]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070fa:	f000 f823 	bl	8007144 <HAL_RCC_GetSysClockFreq>
 80070fe:	4602      	mov	r2, r0
 8007100:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <HAL_RCC_ClockConfig+0x258>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	091b      	lsrs	r3, r3, #4
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	490b      	ldr	r1, [pc, #44]	@ (8007138 <HAL_RCC_ClockConfig+0x25c>)
 800710c:	5ccb      	ldrb	r3, [r1, r3]
 800710e:	fa22 f303 	lsr.w	r3, r2, r3
 8007112:	4a0a      	ldr	r2, [pc, #40]	@ (800713c <HAL_RCC_ClockConfig+0x260>)
 8007114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007116:	4b0a      	ldr	r3, [pc, #40]	@ (8007140 <HAL_RCC_ClockConfig+0x264>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fb ff56 	bl	8002fcc <HAL_InitTick>
 8007120:	4603      	mov	r3, r0
 8007122:	72fb      	strb	r3, [r7, #11]

  return status;
 8007124:	7afb      	ldrb	r3, [r7, #11]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40023c00 	.word	0x40023c00
 8007134:	40023800 	.word	0x40023800
 8007138:	0800cb00 	.word	0x0800cb00
 800713c:	20000174 	.word	0x20000174
 8007140:	20000178 	.word	0x20000178

08007144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007148:	b08e      	sub	sp, #56	@ 0x38
 800714a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800714c:	4b58      	ldr	r3, [pc, #352]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x16c>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007154:	f003 030c 	and.w	r3, r3, #12
 8007158:	2b0c      	cmp	r3, #12
 800715a:	d00d      	beq.n	8007178 <HAL_RCC_GetSysClockFreq+0x34>
 800715c:	2b0c      	cmp	r3, #12
 800715e:	f200 8092 	bhi.w	8007286 <HAL_RCC_GetSysClockFreq+0x142>
 8007162:	2b04      	cmp	r3, #4
 8007164:	d002      	beq.n	800716c <HAL_RCC_GetSysClockFreq+0x28>
 8007166:	2b08      	cmp	r3, #8
 8007168:	d003      	beq.n	8007172 <HAL_RCC_GetSysClockFreq+0x2e>
 800716a:	e08c      	b.n	8007286 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800716c:	4b51      	ldr	r3, [pc, #324]	@ (80072b4 <HAL_RCC_GetSysClockFreq+0x170>)
 800716e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007170:	e097      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007172:	4b51      	ldr	r3, [pc, #324]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x174>)
 8007174:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007176:	e094      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717a:	0c9b      	lsrs	r3, r3, #18
 800717c:	f003 020f 	and.w	r2, r3, #15
 8007180:	4b4e      	ldr	r3, [pc, #312]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x178>)
 8007182:	5c9b      	ldrb	r3, [r3, r2]
 8007184:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007188:	0d9b      	lsrs	r3, r3, #22
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	3301      	adds	r3, #1
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007192:	4b47      	ldr	r3, [pc, #284]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d021      	beq.n	80071e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	2200      	movs	r2, #0
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	61fa      	str	r2, [r7, #28]
 80071a6:	4b44      	ldr	r3, [pc, #272]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x174>)
 80071a8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80071ac:	464a      	mov	r2, r9
 80071ae:	fb03 f202 	mul.w	r2, r3, r2
 80071b2:	2300      	movs	r3, #0
 80071b4:	4644      	mov	r4, r8
 80071b6:	fb04 f303 	mul.w	r3, r4, r3
 80071ba:	4413      	add	r3, r2
 80071bc:	4a3e      	ldr	r2, [pc, #248]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x174>)
 80071be:	4644      	mov	r4, r8
 80071c0:	fba4 0102 	umull	r0, r1, r4, r2
 80071c4:	440b      	add	r3, r1
 80071c6:	4619      	mov	r1, r3
 80071c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ca:	2200      	movs	r2, #0
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	617a      	str	r2, [r7, #20]
 80071d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071d4:	f7f9 ffda 	bl	800118c <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4613      	mov	r3, r2
 80071de:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e0:	e04e      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	2200      	movs	r2, #0
 80071e6:	469a      	mov	sl, r3
 80071e8:	4693      	mov	fp, r2
 80071ea:	4652      	mov	r2, sl
 80071ec:	465b      	mov	r3, fp
 80071ee:	f04f 0000 	mov.w	r0, #0
 80071f2:	f04f 0100 	mov.w	r1, #0
 80071f6:	0159      	lsls	r1, r3, #5
 80071f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071fc:	0150      	lsls	r0, r2, #5
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	ebb2 080a 	subs.w	r8, r2, sl
 8007206:	eb63 090b 	sbc.w	r9, r3, fp
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007216:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800721a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800721e:	ebb2 0408 	subs.w	r4, r2, r8
 8007222:	eb63 0509 	sbc.w	r5, r3, r9
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	00eb      	lsls	r3, r5, #3
 8007230:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007234:	00e2      	lsls	r2, r4, #3
 8007236:	4614      	mov	r4, r2
 8007238:	461d      	mov	r5, r3
 800723a:	eb14 030a 	adds.w	r3, r4, sl
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	eb45 030b 	adc.w	r3, r5, fp
 8007244:	607b      	str	r3, [r7, #4]
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007252:	4629      	mov	r1, r5
 8007254:	028b      	lsls	r3, r1, #10
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	4604      	mov	r4, r0
 800725c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8007260:	4601      	mov	r1, r0
 8007262:	028a      	lsls	r2, r1, #10
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	2200      	movs	r2, #0
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	60fa      	str	r2, [r7, #12]
 8007270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007274:	f7f9 ff8a 	bl	800118c <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4613      	mov	r3, r2
 800727e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8007280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007282:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007284:	e00d      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007286:	4b0a      	ldr	r3, [pc, #40]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	0b5b      	lsrs	r3, r3, #13
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	3301      	adds	r3, #1
 8007296:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80072a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3738      	adds	r7, #56	@ 0x38
 80072a8:	46bd      	mov	sp, r7
 80072aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ae:	bf00      	nop
 80072b0:	40023800 	.word	0x40023800
 80072b4:	00f42400 	.word	0x00f42400
 80072b8:	016e3600 	.word	0x016e3600
 80072bc:	0800caf4 	.word	0x0800caf4

080072c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c4:	4b02      	ldr	r3, [pc, #8]	@ (80072d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80072c6:	681b      	ldr	r3, [r3, #0]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr
 80072d0:	20000174 	.word	0x20000174

080072d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072d8:	f7ff fff2 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 80072dc:	4602      	mov	r2, r0
 80072de:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	0a1b      	lsrs	r3, r3, #8
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	4903      	ldr	r1, [pc, #12]	@ (80072f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ea:	5ccb      	ldrb	r3, [r1, r3]
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40023800 	.word	0x40023800
 80072f8:	0800cb10 	.word	0x0800cb10

080072fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007300:	f7ff ffde 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 8007304:	4602      	mov	r2, r0
 8007306:	4b05      	ldr	r3, [pc, #20]	@ (800731c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	0adb      	lsrs	r3, r3, #11
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	4903      	ldr	r1, [pc, #12]	@ (8007320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007312:	5ccb      	ldrb	r3, [r1, r3]
 8007314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007318:	4618      	mov	r0, r3
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40023800 	.word	0x40023800
 8007320:	0800cb10 	.word	0x0800cb10

08007324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007330:	4b29      	ldr	r3, [pc, #164]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d12c      	bne.n	8007396 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800733c:	4b26      	ldr	r3, [pc, #152]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800733e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007348:	4b24      	ldr	r3, [pc, #144]	@ (80073dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e016      	b.n	8007382 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007354:	4b20      	ldr	r3, [pc, #128]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007358:	4a1f      	ldr	r2, [pc, #124]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800735a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800735e:	6253      	str	r3, [r2, #36]	@ 0x24
 8007360:	4b1d      	ldr	r3, [pc, #116]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800736c:	4b1b      	ldr	r3, [pc, #108]	@ (80073dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8007374:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8007376:	4b18      	ldr	r3, [pc, #96]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	4a17      	ldr	r2, [pc, #92]	@ (80073d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800737c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007380:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8007388:	d105      	bne.n	8007396 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007390:	d101      	bne.n	8007396 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8007392:	2301      	movs	r3, #1
 8007394:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d105      	bne.n	80073a8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800739c:	4b10      	ldr	r3, [pc, #64]	@ (80073e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a0f      	ldr	r2, [pc, #60]	@ (80073e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073a2:	f043 0304 	orr.w	r3, r3, #4
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	4b0d      	ldr	r3, [pc, #52]	@ (80073e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f023 0201 	bic.w	r2, r3, #1
 80073b0:	490b      	ldr	r1, [pc, #44]	@ (80073e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80073b8:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d001      	beq.n	80073ca <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	40023800 	.word	0x40023800
 80073dc:	40007000 	.word	0x40007000
 80073e0:	40023c00 	.word	0x40023c00

080073e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e031      	b.n	800745a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fb fbc8 	bl	8002ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f000 fa38 	bl	8007898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d001      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e03a      	b.n	80074f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749c:	d00e      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x58>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a16      	ldr	r2, [pc, #88]	@ (80074fc <HAL_TIM_Base_Start_IT+0x98>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d009      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x58>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a14      	ldr	r2, [pc, #80]	@ (8007500 <HAL_TIM_Base_Start_IT+0x9c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x58>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a13      	ldr	r2, [pc, #76]	@ (8007504 <HAL_TIM_Base_Start_IT+0xa0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d111      	bne.n	80074e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b06      	cmp	r3, #6
 80074cc:	d010      	beq.n	80074f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f042 0201 	orr.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074de:	e007      	b.n	80074f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800
 8007504:	40010800 	.word	0x40010800

08007508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b02      	cmp	r3, #2
 800751c:	d122      	bne.n	8007564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b02      	cmp	r3, #2
 800752a:	d11b      	bne.n	8007564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0202 	mvn.w	r2, #2
 8007534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f988 	bl	8007860 <HAL_TIM_IC_CaptureCallback>
 8007550:	e005      	b.n	800755e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f97b 	bl	800784e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f98a 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b04      	cmp	r3, #4
 8007570:	d122      	bne.n	80075b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b04      	cmp	r3, #4
 800757e:	d11b      	bne.n	80075b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0204 	mvn.w	r2, #4
 8007588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f95e 	bl	8007860 <HAL_TIM_IC_CaptureCallback>
 80075a4:	e005      	b.n	80075b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f951 	bl	800784e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f960 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d122      	bne.n	800760c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d11b      	bne.n	800760c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0208 	mvn.w	r2, #8
 80075dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2204      	movs	r2, #4
 80075e2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f934 	bl	8007860 <HAL_TIM_IC_CaptureCallback>
 80075f8:	e005      	b.n	8007606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f927 	bl	800784e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f936 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b10      	cmp	r3, #16
 8007618:	d122      	bne.n	8007660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b10      	cmp	r3, #16
 8007626:	d11b      	bne.n	8007660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0210 	mvn.w	r2, #16
 8007630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2208      	movs	r2, #8
 8007636:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f90a 	bl	8007860 <HAL_TIM_IC_CaptureCallback>
 800764c:	e005      	b.n	800765a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f8fd 	bl	800784e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f90c 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b01      	cmp	r3, #1
 800766c:	d10e      	bne.n	800768c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b01      	cmp	r3, #1
 800767a:	d107      	bne.n	800768c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0201 	mvn.w	r2, #1
 8007684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fa ff0c 	bl	80024a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007696:	2b40      	cmp	r3, #64	@ 0x40
 8007698:	d10e      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a4:	2b40      	cmp	r3, #64	@ 0x40
 80076a6:	d107      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f8e6 	bl	8007884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIM_ConfigClockSource+0x1c>
 80076d8:	2302      	movs	r3, #2
 80076da:	e0b4      	b.n	8007846 <HAL_TIM_ConfigClockSource+0x186>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007714:	d03e      	beq.n	8007794 <HAL_TIM_ConfigClockSource+0xd4>
 8007716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800771a:	f200 8087 	bhi.w	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800771e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007722:	f000 8086 	beq.w	8007832 <HAL_TIM_ConfigClockSource+0x172>
 8007726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800772a:	d87f      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800772c:	2b70      	cmp	r3, #112	@ 0x70
 800772e:	d01a      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0xa6>
 8007730:	2b70      	cmp	r3, #112	@ 0x70
 8007732:	d87b      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007734:	2b60      	cmp	r3, #96	@ 0x60
 8007736:	d050      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x11a>
 8007738:	2b60      	cmp	r3, #96	@ 0x60
 800773a:	d877      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800773c:	2b50      	cmp	r3, #80	@ 0x50
 800773e:	d03c      	beq.n	80077ba <HAL_TIM_ConfigClockSource+0xfa>
 8007740:	2b50      	cmp	r3, #80	@ 0x50
 8007742:	d873      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007744:	2b40      	cmp	r3, #64	@ 0x40
 8007746:	d058      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x13a>
 8007748:	2b40      	cmp	r3, #64	@ 0x40
 800774a:	d86f      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800774c:	2b30      	cmp	r3, #48	@ 0x30
 800774e:	d064      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007750:	2b30      	cmp	r3, #48	@ 0x30
 8007752:	d86b      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007754:	2b20      	cmp	r3, #32
 8007756:	d060      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007758:	2b20      	cmp	r3, #32
 800775a:	d867      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d05c      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007760:	2b10      	cmp	r3, #16
 8007762:	d05a      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007764:	e062      	b.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007776:	f000 f968 	bl	8007a4a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	609a      	str	r2, [r3, #8]
      break;
 8007792:	e04f      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077a4:	f000 f951 	bl	8007a4a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077b6:	609a      	str	r2, [r3, #8]
      break;
 80077b8:	e03c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077c6:	461a      	mov	r2, r3
 80077c8:	f000 f8c8 	bl	800795c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2150      	movs	r1, #80	@ 0x50
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 f91f 	bl	8007a16 <TIM_ITRx_SetConfig>
      break;
 80077d8:	e02c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077e6:	461a      	mov	r2, r3
 80077e8:	f000 f8e6 	bl	80079b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2160      	movs	r1, #96	@ 0x60
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f90f 	bl	8007a16 <TIM_ITRx_SetConfig>
      break;
 80077f8:	e01c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007806:	461a      	mov	r2, r3
 8007808:	f000 f8a8 	bl	800795c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2140      	movs	r1, #64	@ 0x40
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f8ff 	bl	8007a16 <TIM_ITRx_SetConfig>
      break;
 8007818:	e00c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f000 f8f6 	bl	8007a16 <TIM_ITRx_SetConfig>
      break;
 800782a:	e003      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
      break;
 8007830:	e000      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr

08007860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr

08007872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr

08007884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr
	...

08007898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ae:	d007      	beq.n	80078c0 <TIM_Base_SetConfig+0x28>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a25      	ldr	r2, [pc, #148]	@ (8007948 <TIM_Base_SetConfig+0xb0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_Base_SetConfig+0x28>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a24      	ldr	r2, [pc, #144]	@ (800794c <TIM_Base_SetConfig+0xb4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d108      	bne.n	80078d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d8:	d013      	beq.n	8007902 <TIM_Base_SetConfig+0x6a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007948 <TIM_Base_SetConfig+0xb0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_Base_SetConfig+0x6a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a19      	ldr	r2, [pc, #100]	@ (800794c <TIM_Base_SetConfig+0xb4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_Base_SetConfig+0x6a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a18      	ldr	r2, [pc, #96]	@ (8007950 <TIM_Base_SetConfig+0xb8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_Base_SetConfig+0x6a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a17      	ldr	r2, [pc, #92]	@ (8007954 <TIM_Base_SetConfig+0xbc>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_Base_SetConfig+0x6a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a16      	ldr	r2, [pc, #88]	@ (8007958 <TIM_Base_SetConfig+0xc0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d108      	bne.n	8007914 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	615a      	str	r2, [r3, #20]
}
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr
 8007948:	40000400 	.word	0x40000400
 800794c:	40000800 	.word	0x40000800
 8007950:	40010800 	.word	0x40010800
 8007954:	40010c00 	.word	0x40010c00
 8007958:	40011000 	.word	0x40011000

0800795c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f023 0201 	bic.w	r2, r3, #1
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f023 030a 	bic.w	r3, r3, #10
 8007998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	621a      	str	r2, [r3, #32]
}
 80079ae:	bf00      	nop
 80079b0:	371c      	adds	r7, #28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr

080079b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f023 0210 	bic.w	r2, r3, #16
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	031b      	lsls	r3, r3, #12
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	621a      	str	r2, [r3, #32]
}
 8007a0c:	bf00      	nop
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc80      	pop	{r7}
 8007a14:	4770      	bx	lr

08007a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	f043 0307 	orr.w	r3, r3, #7
 8007a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	609a      	str	r2, [r3, #8]
}
 8007a40:	bf00      	nop
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr

08007a4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b087      	sub	sp, #28
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	607a      	str	r2, [r7, #4]
 8007a56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	021a      	lsls	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	609a      	str	r2, [r3, #8]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bc80      	pop	{r7}
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e046      	b.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ae2:	d00e      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a13      	ldr	r2, [pc, #76]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d009      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a12      	ldr	r2, [pc, #72]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d004      	beq.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a10      	ldr	r2, [pc, #64]	@ (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d10c      	bne.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr
 8007b38:	40000400 	.word	0x40000400
 8007b3c:	40000800 	.word	0x40000800
 8007b40:	40010800 	.word	0x40010800

08007b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e042      	b.n	8007bdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fb f83c 	bl	8002be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2224      	movs	r2, #36	@ 0x24
 8007b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fd09 	bl	80085a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	691a      	ldr	r2, [r3, #16]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	695a      	ldr	r2, [r3, #20]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d121      	bne.n	8007c42 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <HAL_UART_Transmit_IT+0x26>
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e01a      	b.n	8007c44 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	88fa      	ldrh	r2, [r7, #6]
 8007c18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	88fa      	ldrh	r2, [r7, #6]
 8007c1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2221      	movs	r2, #33	@ 0x21
 8007c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007c3c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e000      	b.n	8007c44 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007c42:	2302      	movs	r3, #2
  }
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr

08007c4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d112      	bne.n	8007c8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <HAL_UART_Receive_IT+0x26>
 8007c6e:	88fb      	ldrh	r3, [r7, #6]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e00b      	b.n	8007c90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	461a      	mov	r2, r3
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fab6 	bl	80081f6 <UART_Start_Receive_IT>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	e000      	b.n	8007c90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007c8e:	2302      	movs	r3, #2
  }
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b0ba      	sub	sp, #232	@ 0xe8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10f      	bne.n	8007cfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <HAL_UART_IRQHandler+0x66>
 8007cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fb93 	bl	8008422 <UART_Receive_IT>
      return;
 8007cfc:	e25b      	b.n	80081b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 80de 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x22c>
 8007d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d106      	bne.n	8007d22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 80d1 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <HAL_UART_IRQHandler+0xae>
 8007d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d005      	beq.n	8007d46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d3e:	f043 0201 	orr.w	r2, r3, #1
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <HAL_UART_IRQHandler+0xd2>
 8007d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d005      	beq.n	8007d6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d62:	f043 0202 	orr.w	r2, r3, #2
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <HAL_UART_IRQHandler+0xf6>
 8007d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d86:	f043 0204 	orr.w	r2, r3, #4
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d011      	beq.n	8007dbe <HAL_UART_IRQHandler+0x126>
 8007d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d105      	bne.n	8007db2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007db6:	f043 0208 	orr.w	r2, r3, #8
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 81f2 	beq.w	80081ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d008      	beq.n	8007de6 <HAL_UART_IRQHandler+0x14e>
 8007dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fb1e 	bl	8008422 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df0:	2b40      	cmp	r3, #64	@ 0x40
 8007df2:	bf0c      	ite	eq
 8007df4:	2301      	moveq	r3, #1
 8007df6:	2300      	movne	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e02:	f003 0308 	and.w	r3, r3, #8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <HAL_UART_IRQHandler+0x17a>
 8007e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d04f      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa28 	bl	8008268 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e22:	2b40      	cmp	r3, #64	@ 0x40
 8007e24:	d141      	bne.n	8007eaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3314      	adds	r3, #20
 8007e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3314      	adds	r3, #20
 8007e4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1d9      	bne.n	8007e26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d013      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8008078 <HAL_UART_IRQHandler+0x3e0>)
 8007e80:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fb fe20 	bl	8003acc <HAL_DMA_Abort_IT>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d016      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea0:	e00e      	b.n	8007ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f993 	bl	80081ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea8:	e00a      	b.n	8007ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f98f 	bl	80081ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb0:	e006      	b.n	8007ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f98b 	bl	80081ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007ebe:	e175      	b.n	80081ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec0:	bf00      	nop
    return;
 8007ec2:	e173      	b.n	80081ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	f040 814f 	bne.w	800816c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed2:	f003 0310 	and.w	r3, r3, #16
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 8148 	beq.w	800816c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 8141 	beq.w	800816c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007eea:	2300      	movs	r3, #0
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60bb      	str	r3, [r7, #8]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0a:	2b40      	cmp	r3, #64	@ 0x40
 8007f0c:	f040 80b6 	bne.w	800807c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 8145 	beq.w	80081b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	f080 813e 	bcs.w	80081b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	f000 8088 	beq.w	8008058 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330c      	adds	r3, #12
 8007f70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f74:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f80:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1d9      	bne.n	8007f48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007fa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fa6:	f023 0301 	bic.w	r3, r3, #1
 8007faa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3314      	adds	r3, #20
 8007fb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007fb8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007fbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007fc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e1      	bne.n	8007f94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3314      	adds	r3, #20
 8007fd6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3314      	adds	r3, #20
 8007ff0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ff4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ffa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008002:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e3      	bne.n	8007fd0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2220      	movs	r2, #32
 800800c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	330c      	adds	r3, #12
 800801c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008028:	f023 0310 	bic.w	r3, r3, #16
 800802c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	330c      	adds	r3, #12
 8008036:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800803a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800803c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008040:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e3      	bne.n	8008016 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008052:	4618      	mov	r0, r3
 8008054:	f7fb fcfd 	bl	8003a52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008066:	b29b      	uxth	r3, r3
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	b29b      	uxth	r3, r3
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f8b6 	bl	80081e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008074:	e09c      	b.n	80081b0 <HAL_UART_IRQHandler+0x518>
 8008076:	bf00      	nop
 8008078:	0800832d 	.word	0x0800832d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008084:	b29b      	uxth	r3, r3
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 808e 	beq.w	80081b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8089 	beq.w	80081b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	330c      	adds	r3, #12
 80080a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80080c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80080c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e3      	bne.n	80080a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3314      	adds	r3, #20
 80080e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	623b      	str	r3, [r7, #32]
   return(result);
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	f023 0301 	bic.w	r3, r3, #1
 80080f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3314      	adds	r3, #20
 80080fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800810c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e3      	bne.n	80080da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	330c      	adds	r3, #12
 8008126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	e853 3f00 	ldrex	r3, [r3]
 800812e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0310 	bic.w	r3, r3, #16
 8008136:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	330c      	adds	r3, #12
 8008140:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008144:	61fa      	str	r2, [r7, #28]
 8008146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	69b9      	ldr	r1, [r7, #24]
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	617b      	str	r3, [r7, #20]
   return(result);
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e3      	bne.n	8008120 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800815e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f83b 	bl	80081e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800816a:	e023      	b.n	80081b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008174:	2b00      	cmp	r3, #0
 8008176:	d009      	beq.n	800818c <HAL_UART_IRQHandler+0x4f4>
 8008178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800817c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f8e5 	bl	8008354 <UART_Transmit_IT>
    return;
 800818a:	e014      	b.n	80081b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800818c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00e      	beq.n	80081b6 <HAL_UART_IRQHandler+0x51e>
 8008198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800819c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d008      	beq.n	80081b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f924 	bl	80083f2 <UART_EndTransmit_IT>
    return;
 80081aa:	e004      	b.n	80081b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80081ac:	bf00      	nop
 80081ae:	e002      	b.n	80081b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80081b0:	bf00      	nop
 80081b2:	e000      	b.n	80081b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80081b4:	bf00      	nop
  }
}
 80081b6:	37e8      	adds	r7, #232	@ 0xe8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr

080081ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr

080081e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr

080081f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b085      	sub	sp, #20
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	4613      	mov	r3, r2
 8008202:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	88fa      	ldrh	r2, [r7, #6]
 800820e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	88fa      	ldrh	r2, [r7, #6]
 8008214:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2222      	movs	r2, #34	@ 0x22
 8008220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d007      	beq.n	800823c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800823a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695a      	ldr	r2, [r3, #20]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0220 	orr.w	r2, r2, #32
 800825a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	bc80      	pop	{r7}
 8008266:	4770      	bx	lr

08008268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008268:	b480      	push	{r7}
 800826a:	b095      	sub	sp, #84	@ 0x54
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008290:	643a      	str	r2, [r7, #64]	@ 0x40
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800829e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e5      	bne.n	8008270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3314      	adds	r3, #20
 80082aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	e853 3f00 	ldrex	r3, [r3]
 80082b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f023 0301 	bic.w	r3, r3, #1
 80082ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3314      	adds	r3, #20
 80082c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e5      	bne.n	80082a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d119      	bne.n	8008314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f023 0310 	bic.w	r3, r3, #16
 80082f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008300:	61ba      	str	r2, [r7, #24]
 8008302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	6979      	ldr	r1, [r7, #20]
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	613b      	str	r3, [r7, #16]
   return(result);
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e5      	bne.n	80082e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008322:	bf00      	nop
 8008324:	3754      	adds	r7, #84	@ 0x54
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr

0800832c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff ff41 	bl	80081ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b21      	cmp	r3, #33	@ 0x21
 8008366:	d13e      	bne.n	80083e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008370:	d114      	bne.n	800839c <UART_Transmit_IT+0x48>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d110      	bne.n	800839c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800838e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	1c9a      	adds	r2, r3, #2
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	621a      	str	r2, [r3, #32]
 800839a:	e008      	b.n	80083ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	1c59      	adds	r1, r3, #1
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	6211      	str	r1, [r2, #32]
 80083a6:	781a      	ldrb	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	4619      	mov	r1, r3
 80083bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10f      	bne.n	80083e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80083d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	e000      	b.n	80083e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80083e6:	2302      	movs	r3, #2
  }
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	4770      	bx	lr

080083f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008408:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff fed2 	bl	80081bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b08c      	sub	sp, #48	@ 0x30
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b22      	cmp	r3, #34	@ 0x22
 8008434:	f040 80ae 	bne.w	8008594 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008440:	d117      	bne.n	8008472 <UART_Receive_IT+0x50>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d113      	bne.n	8008472 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800844a:	2300      	movs	r3, #0
 800844c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008452:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	b29b      	uxth	r3, r3
 800845c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008460:	b29a      	uxth	r2, r3
 8008462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008464:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	1c9a      	adds	r2, r3, #2
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008470:	e026      	b.n	80084c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008478:	2300      	movs	r3, #0
 800847a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008484:	d007      	beq.n	8008496 <UART_Receive_IT+0x74>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10a      	bne.n	80084a4 <UART_Receive_IT+0x82>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	b2da      	uxtb	r2, r3
 800849e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a0:	701a      	strb	r2, [r3, #0]
 80084a2:	e008      	b.n	80084b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b01      	subs	r3, #1
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	4619      	mov	r1, r3
 80084ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d15d      	bne.n	8008590 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0220 	bic.w	r2, r2, #32
 80084e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695a      	ldr	r2, [r3, #20]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008516:	2b01      	cmp	r3, #1
 8008518:	d135      	bne.n	8008586 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	330c      	adds	r3, #12
 8008526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	613b      	str	r3, [r7, #16]
   return(result);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f023 0310 	bic.w	r3, r3, #16
 8008536:	627b      	str	r3, [r7, #36]	@ 0x24
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	330c      	adds	r3, #12
 800853e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008540:	623a      	str	r2, [r7, #32]
 8008542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	69f9      	ldr	r1, [r7, #28]
 8008546:	6a3a      	ldr	r2, [r7, #32]
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	61bb      	str	r3, [r7, #24]
   return(result);
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e5      	bne.n	8008520 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0310 	and.w	r3, r3, #16
 800855e:	2b10      	cmp	r3, #16
 8008560:	d10a      	bne.n	8008578 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff fe2e 	bl	80081e0 <HAL_UARTEx_RxEventCallback>
 8008584:	e002      	b.n	800858c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7f9 fc76 	bl	8001e78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	e002      	b.n	8008596 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	e000      	b.n	8008596 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008594:	2302      	movs	r3, #2
  }
}
 8008596:	4618      	mov	r0, r3
 8008598:	3730      	adds	r7, #48	@ 0x30
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	431a      	orrs	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80085e0:	f023 030c 	bic.w	r3, r3, #12
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6812      	ldr	r2, [r2, #0]
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	430b      	orrs	r3, r1
 80085ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699a      	ldr	r2, [r3, #24]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a55      	ldr	r2, [pc, #340]	@ (8008760 <UART_SetConfig+0x1c0>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d103      	bne.n	8008616 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800860e:	f7fe fe75 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	e002      	b.n	800861c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008616:	f7fe fe5d 	bl	80072d4 <HAL_RCC_GetPCLK1Freq>
 800861a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008624:	d14c      	bne.n	80086c0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009a      	lsls	r2, r3, #2
 8008630:	441a      	add	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	fbb2 f3f3 	udiv	r3, r2, r3
 800863c:	4a49      	ldr	r2, [pc, #292]	@ (8008764 <UART_SetConfig+0x1c4>)
 800863e:	fba2 2303 	umull	r2, r3, r2, r3
 8008642:	095b      	lsrs	r3, r3, #5
 8008644:	0119      	lsls	r1, r3, #4
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009a      	lsls	r2, r3, #2
 8008650:	441a      	add	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	fbb2 f2f3 	udiv	r2, r2, r3
 800865c:	4b41      	ldr	r3, [pc, #260]	@ (8008764 <UART_SetConfig+0x1c4>)
 800865e:	fba3 0302 	umull	r0, r3, r3, r2
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	2064      	movs	r0, #100	@ 0x64
 8008666:	fb00 f303 	mul.w	r3, r0, r3
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	3332      	adds	r3, #50	@ 0x32
 8008670:	4a3c      	ldr	r2, [pc, #240]	@ (8008764 <UART_SetConfig+0x1c4>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800867e:	4419      	add	r1, r3
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009a      	lsls	r2, r3, #2
 800868a:	441a      	add	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	fbb2 f2f3 	udiv	r2, r2, r3
 8008696:	4b33      	ldr	r3, [pc, #204]	@ (8008764 <UART_SetConfig+0x1c4>)
 8008698:	fba3 0302 	umull	r0, r3, r3, r2
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	2064      	movs	r0, #100	@ 0x64
 80086a0:	fb00 f303 	mul.w	r3, r0, r3
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	3332      	adds	r3, #50	@ 0x32
 80086aa:	4a2e      	ldr	r2, [pc, #184]	@ (8008764 <UART_SetConfig+0x1c4>)
 80086ac:	fba2 2303 	umull	r2, r3, r2, r3
 80086b0:	095b      	lsrs	r3, r3, #5
 80086b2:	f003 0207 	and.w	r2, r3, #7
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	440a      	add	r2, r1
 80086bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086be:	e04a      	b.n	8008756 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009a      	lsls	r2, r3, #2
 80086ca:	441a      	add	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d6:	4a23      	ldr	r2, [pc, #140]	@ (8008764 <UART_SetConfig+0x1c4>)
 80086d8:	fba2 2303 	umull	r2, r3, r2, r3
 80086dc:	095b      	lsrs	r3, r3, #5
 80086de:	0119      	lsls	r1, r3, #4
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009a      	lsls	r2, r3, #2
 80086ea:	441a      	add	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80086f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008764 <UART_SetConfig+0x1c4>)
 80086f8:	fba3 0302 	umull	r0, r3, r3, r2
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	2064      	movs	r0, #100	@ 0x64
 8008700:	fb00 f303 	mul.w	r3, r0, r3
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	3332      	adds	r3, #50	@ 0x32
 800870a:	4a16      	ldr	r2, [pc, #88]	@ (8008764 <UART_SetConfig+0x1c4>)
 800870c:	fba2 2303 	umull	r2, r3, r2, r3
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008716:	4419      	add	r1, r3
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009a      	lsls	r2, r3, #2
 8008722:	441a      	add	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	fbb2 f2f3 	udiv	r2, r2, r3
 800872e:	4b0d      	ldr	r3, [pc, #52]	@ (8008764 <UART_SetConfig+0x1c4>)
 8008730:	fba3 0302 	umull	r0, r3, r3, r2
 8008734:	095b      	lsrs	r3, r3, #5
 8008736:	2064      	movs	r0, #100	@ 0x64
 8008738:	fb00 f303 	mul.w	r3, r0, r3
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	3332      	adds	r3, #50	@ 0x32
 8008742:	4a08      	ldr	r2, [pc, #32]	@ (8008764 <UART_SetConfig+0x1c4>)
 8008744:	fba2 2303 	umull	r2, r3, r2, r3
 8008748:	095b      	lsrs	r3, r3, #5
 800874a:	f003 020f 	and.w	r2, r3, #15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	440a      	add	r2, r1
 8008754:	609a      	str	r2, [r3, #8]
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	40013800 	.word	0x40013800
 8008764:	51eb851f 	.word	0x51eb851f

08008768 <atof>:
 8008768:	2100      	movs	r1, #0
 800876a:	f000 bdf9 	b.w	8009360 <strtod>

0800876e <sulp>:
 800876e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008772:	460f      	mov	r7, r1
 8008774:	4690      	mov	r8, r2
 8008776:	f003 faf7 	bl	800bd68 <__ulp>
 800877a:	4604      	mov	r4, r0
 800877c:	460d      	mov	r5, r1
 800877e:	f1b8 0f00 	cmp.w	r8, #0
 8008782:	d011      	beq.n	80087a8 <sulp+0x3a>
 8008784:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008788:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800878c:	2b00      	cmp	r3, #0
 800878e:	dd0b      	ble.n	80087a8 <sulp+0x3a>
 8008790:	2400      	movs	r4, #0
 8008792:	051b      	lsls	r3, r3, #20
 8008794:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008798:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800879c:	4622      	mov	r2, r4
 800879e:	462b      	mov	r3, r5
 80087a0:	f7f7 feb2 	bl	8000508 <__aeabi_dmul>
 80087a4:	4604      	mov	r4, r0
 80087a6:	460d      	mov	r5, r1
 80087a8:	4620      	mov	r0, r4
 80087aa:	4629      	mov	r1, r5
 80087ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080087b0 <_strtod_l>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	b09f      	sub	sp, #124	@ 0x7c
 80087b6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80087b8:	2200      	movs	r2, #0
 80087ba:	460c      	mov	r4, r1
 80087bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80087be:	f04f 0a00 	mov.w	sl, #0
 80087c2:	f04f 0b00 	mov.w	fp, #0
 80087c6:	460a      	mov	r2, r1
 80087c8:	9005      	str	r0, [sp, #20]
 80087ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80087cc:	7811      	ldrb	r1, [r2, #0]
 80087ce:	292b      	cmp	r1, #43	@ 0x2b
 80087d0:	d048      	beq.n	8008864 <_strtod_l+0xb4>
 80087d2:	d836      	bhi.n	8008842 <_strtod_l+0x92>
 80087d4:	290d      	cmp	r1, #13
 80087d6:	d830      	bhi.n	800883a <_strtod_l+0x8a>
 80087d8:	2908      	cmp	r1, #8
 80087da:	d830      	bhi.n	800883e <_strtod_l+0x8e>
 80087dc:	2900      	cmp	r1, #0
 80087de:	d039      	beq.n	8008854 <_strtod_l+0xa4>
 80087e0:	2200      	movs	r2, #0
 80087e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80087e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80087e6:	782a      	ldrb	r2, [r5, #0]
 80087e8:	2a30      	cmp	r2, #48	@ 0x30
 80087ea:	f040 80b1 	bne.w	8008950 <_strtod_l+0x1a0>
 80087ee:	786a      	ldrb	r2, [r5, #1]
 80087f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80087f4:	2a58      	cmp	r2, #88	@ 0x58
 80087f6:	d16c      	bne.n	80088d2 <_strtod_l+0x122>
 80087f8:	9302      	str	r3, [sp, #8]
 80087fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087fc:	4a8e      	ldr	r2, [pc, #568]	@ (8008a38 <_strtod_l+0x288>)
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	ab1a      	add	r3, sp, #104	@ 0x68
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	9805      	ldr	r0, [sp, #20]
 8008806:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008808:	a919      	add	r1, sp, #100	@ 0x64
 800880a:	f002 fba1 	bl	800af50 <__gethex>
 800880e:	f010 060f 	ands.w	r6, r0, #15
 8008812:	4604      	mov	r4, r0
 8008814:	d005      	beq.n	8008822 <_strtod_l+0x72>
 8008816:	2e06      	cmp	r6, #6
 8008818:	d126      	bne.n	8008868 <_strtod_l+0xb8>
 800881a:	2300      	movs	r3, #0
 800881c:	3501      	adds	r5, #1
 800881e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008820:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008822:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008824:	2b00      	cmp	r3, #0
 8008826:	f040 8584 	bne.w	8009332 <_strtod_l+0xb82>
 800882a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800882c:	b1bb      	cbz	r3, 800885e <_strtod_l+0xae>
 800882e:	4650      	mov	r0, sl
 8008830:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008834:	b01f      	add	sp, #124	@ 0x7c
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	2920      	cmp	r1, #32
 800883c:	d1d0      	bne.n	80087e0 <_strtod_l+0x30>
 800883e:	3201      	adds	r2, #1
 8008840:	e7c3      	b.n	80087ca <_strtod_l+0x1a>
 8008842:	292d      	cmp	r1, #45	@ 0x2d
 8008844:	d1cc      	bne.n	80087e0 <_strtod_l+0x30>
 8008846:	2101      	movs	r1, #1
 8008848:	910b      	str	r1, [sp, #44]	@ 0x2c
 800884a:	1c51      	adds	r1, r2, #1
 800884c:	9119      	str	r1, [sp, #100]	@ 0x64
 800884e:	7852      	ldrb	r2, [r2, #1]
 8008850:	2a00      	cmp	r2, #0
 8008852:	d1c7      	bne.n	80087e4 <_strtod_l+0x34>
 8008854:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008856:	9419      	str	r4, [sp, #100]	@ 0x64
 8008858:	2b00      	cmp	r3, #0
 800885a:	f040 8568 	bne.w	800932e <_strtod_l+0xb7e>
 800885e:	4650      	mov	r0, sl
 8008860:	4659      	mov	r1, fp
 8008862:	e7e7      	b.n	8008834 <_strtod_l+0x84>
 8008864:	2100      	movs	r1, #0
 8008866:	e7ef      	b.n	8008848 <_strtod_l+0x98>
 8008868:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800886a:	b13a      	cbz	r2, 800887c <_strtod_l+0xcc>
 800886c:	2135      	movs	r1, #53	@ 0x35
 800886e:	a81c      	add	r0, sp, #112	@ 0x70
 8008870:	f003 fb6a 	bl	800bf48 <__copybits>
 8008874:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008876:	9805      	ldr	r0, [sp, #20]
 8008878:	f002 ff44 	bl	800b704 <_Bfree>
 800887c:	3e01      	subs	r6, #1
 800887e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008880:	2e04      	cmp	r6, #4
 8008882:	d806      	bhi.n	8008892 <_strtod_l+0xe2>
 8008884:	e8df f006 	tbb	[pc, r6]
 8008888:	201d0314 	.word	0x201d0314
 800888c:	14          	.byte	0x14
 800888d:	00          	.byte	0x00
 800888e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008892:	05e1      	lsls	r1, r4, #23
 8008894:	bf48      	it	mi
 8008896:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800889a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800889e:	0d1b      	lsrs	r3, r3, #20
 80088a0:	051b      	lsls	r3, r3, #20
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1bd      	bne.n	8008822 <_strtod_l+0x72>
 80088a6:	f001 fbe5 	bl	800a074 <__errno>
 80088aa:	2322      	movs	r3, #34	@ 0x22
 80088ac:	6003      	str	r3, [r0, #0]
 80088ae:	e7b8      	b.n	8008822 <_strtod_l+0x72>
 80088b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80088b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80088b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80088bc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80088c0:	e7e7      	b.n	8008892 <_strtod_l+0xe2>
 80088c2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008a3c <_strtod_l+0x28c>
 80088c6:	e7e4      	b.n	8008892 <_strtod_l+0xe2>
 80088c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80088cc:	f04f 3aff 	mov.w	sl, #4294967295
 80088d0:	e7df      	b.n	8008892 <_strtod_l+0xe2>
 80088d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b30      	cmp	r3, #48	@ 0x30
 80088dc:	d0f9      	beq.n	80088d2 <_strtod_l+0x122>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d09f      	beq.n	8008822 <_strtod_l+0x72>
 80088e2:	2301      	movs	r3, #1
 80088e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088e8:	220a      	movs	r2, #10
 80088ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80088ec:	2300      	movs	r3, #0
 80088ee:	461f      	mov	r7, r3
 80088f0:	9308      	str	r3, [sp, #32]
 80088f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80088f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80088f6:	7805      	ldrb	r5, [r0, #0]
 80088f8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80088fc:	b2d9      	uxtb	r1, r3
 80088fe:	2909      	cmp	r1, #9
 8008900:	d928      	bls.n	8008954 <_strtod_l+0x1a4>
 8008902:	2201      	movs	r2, #1
 8008904:	494e      	ldr	r1, [pc, #312]	@ (8008a40 <_strtod_l+0x290>)
 8008906:	f001 fad4 	bl	8009eb2 <strncmp>
 800890a:	2800      	cmp	r0, #0
 800890c:	d032      	beq.n	8008974 <_strtod_l+0x1c4>
 800890e:	2000      	movs	r0, #0
 8008910:	462a      	mov	r2, r5
 8008912:	4681      	mov	r9, r0
 8008914:	463d      	mov	r5, r7
 8008916:	4603      	mov	r3, r0
 8008918:	2a65      	cmp	r2, #101	@ 0x65
 800891a:	d001      	beq.n	8008920 <_strtod_l+0x170>
 800891c:	2a45      	cmp	r2, #69	@ 0x45
 800891e:	d114      	bne.n	800894a <_strtod_l+0x19a>
 8008920:	b91d      	cbnz	r5, 800892a <_strtod_l+0x17a>
 8008922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008924:	4302      	orrs	r2, r0
 8008926:	d095      	beq.n	8008854 <_strtod_l+0xa4>
 8008928:	2500      	movs	r5, #0
 800892a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800892c:	1c62      	adds	r2, r4, #1
 800892e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008930:	7862      	ldrb	r2, [r4, #1]
 8008932:	2a2b      	cmp	r2, #43	@ 0x2b
 8008934:	d077      	beq.n	8008a26 <_strtod_l+0x276>
 8008936:	2a2d      	cmp	r2, #45	@ 0x2d
 8008938:	d07b      	beq.n	8008a32 <_strtod_l+0x282>
 800893a:	f04f 0c00 	mov.w	ip, #0
 800893e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008942:	2909      	cmp	r1, #9
 8008944:	f240 8082 	bls.w	8008a4c <_strtod_l+0x29c>
 8008948:	9419      	str	r4, [sp, #100]	@ 0x64
 800894a:	f04f 0800 	mov.w	r8, #0
 800894e:	e0a2      	b.n	8008a96 <_strtod_l+0x2e6>
 8008950:	2300      	movs	r3, #0
 8008952:	e7c7      	b.n	80088e4 <_strtod_l+0x134>
 8008954:	2f08      	cmp	r7, #8
 8008956:	bfd5      	itete	le
 8008958:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800895a:	9908      	ldrgt	r1, [sp, #32]
 800895c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008960:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008964:	f100 0001 	add.w	r0, r0, #1
 8008968:	bfd4      	ite	le
 800896a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800896c:	9308      	strgt	r3, [sp, #32]
 800896e:	3701      	adds	r7, #1
 8008970:	9019      	str	r0, [sp, #100]	@ 0x64
 8008972:	e7bf      	b.n	80088f4 <_strtod_l+0x144>
 8008974:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	9219      	str	r2, [sp, #100]	@ 0x64
 800897a:	785a      	ldrb	r2, [r3, #1]
 800897c:	b37f      	cbz	r7, 80089de <_strtod_l+0x22e>
 800897e:	4681      	mov	r9, r0
 8008980:	463d      	mov	r5, r7
 8008982:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008986:	2b09      	cmp	r3, #9
 8008988:	d912      	bls.n	80089b0 <_strtod_l+0x200>
 800898a:	2301      	movs	r3, #1
 800898c:	e7c4      	b.n	8008918 <_strtod_l+0x168>
 800898e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008990:	3001      	adds	r0, #1
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	9219      	str	r2, [sp, #100]	@ 0x64
 8008996:	785a      	ldrb	r2, [r3, #1]
 8008998:	2a30      	cmp	r2, #48	@ 0x30
 800899a:	d0f8      	beq.n	800898e <_strtod_l+0x1de>
 800899c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80089a0:	2b08      	cmp	r3, #8
 80089a2:	f200 84cb 	bhi.w	800933c <_strtod_l+0xb8c>
 80089a6:	4681      	mov	r9, r0
 80089a8:	2000      	movs	r0, #0
 80089aa:	4605      	mov	r5, r0
 80089ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80089b0:	3a30      	subs	r2, #48	@ 0x30
 80089b2:	f100 0301 	add.w	r3, r0, #1
 80089b6:	d02a      	beq.n	8008a0e <_strtod_l+0x25e>
 80089b8:	4499      	add	r9, r3
 80089ba:	210a      	movs	r1, #10
 80089bc:	462b      	mov	r3, r5
 80089be:	eb00 0c05 	add.w	ip, r0, r5
 80089c2:	4563      	cmp	r3, ip
 80089c4:	d10d      	bne.n	80089e2 <_strtod_l+0x232>
 80089c6:	1c69      	adds	r1, r5, #1
 80089c8:	4401      	add	r1, r0
 80089ca:	4428      	add	r0, r5
 80089cc:	2808      	cmp	r0, #8
 80089ce:	dc16      	bgt.n	80089fe <_strtod_l+0x24e>
 80089d0:	230a      	movs	r3, #10
 80089d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80089d4:	fb03 2300 	mla	r3, r3, r0, r2
 80089d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80089da:	2300      	movs	r3, #0
 80089dc:	e018      	b.n	8008a10 <_strtod_l+0x260>
 80089de:	4638      	mov	r0, r7
 80089e0:	e7da      	b.n	8008998 <_strtod_l+0x1e8>
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	f103 0301 	add.w	r3, r3, #1
 80089e8:	dc03      	bgt.n	80089f2 <_strtod_l+0x242>
 80089ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80089ec:	434e      	muls	r6, r1
 80089ee:	960a      	str	r6, [sp, #40]	@ 0x28
 80089f0:	e7e7      	b.n	80089c2 <_strtod_l+0x212>
 80089f2:	2b10      	cmp	r3, #16
 80089f4:	bfde      	ittt	le
 80089f6:	9e08      	ldrle	r6, [sp, #32]
 80089f8:	434e      	mulle	r6, r1
 80089fa:	9608      	strle	r6, [sp, #32]
 80089fc:	e7e1      	b.n	80089c2 <_strtod_l+0x212>
 80089fe:	280f      	cmp	r0, #15
 8008a00:	dceb      	bgt.n	80089da <_strtod_l+0x22a>
 8008a02:	230a      	movs	r3, #10
 8008a04:	9808      	ldr	r0, [sp, #32]
 8008a06:	fb03 2300 	mla	r3, r3, r0, r2
 8008a0a:	9308      	str	r3, [sp, #32]
 8008a0c:	e7e5      	b.n	80089da <_strtod_l+0x22a>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a12:	460d      	mov	r5, r1
 8008a14:	1c50      	adds	r0, r2, #1
 8008a16:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a18:	7852      	ldrb	r2, [r2, #1]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	e7b1      	b.n	8008982 <_strtod_l+0x1d2>
 8008a1e:	f04f 0900 	mov.w	r9, #0
 8008a22:	2301      	movs	r3, #1
 8008a24:	e77d      	b.n	8008922 <_strtod_l+0x172>
 8008a26:	f04f 0c00 	mov.w	ip, #0
 8008a2a:	1ca2      	adds	r2, r4, #2
 8008a2c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a2e:	78a2      	ldrb	r2, [r4, #2]
 8008a30:	e785      	b.n	800893e <_strtod_l+0x18e>
 8008a32:	f04f 0c01 	mov.w	ip, #1
 8008a36:	e7f8      	b.n	8008a2a <_strtod_l+0x27a>
 8008a38:	0800cb30 	.word	0x0800cb30
 8008a3c:	7ff00000 	.word	0x7ff00000
 8008a40:	0800cb18 	.word	0x0800cb18
 8008a44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a46:	1c51      	adds	r1, r2, #1
 8008a48:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a4a:	7852      	ldrb	r2, [r2, #1]
 8008a4c:	2a30      	cmp	r2, #48	@ 0x30
 8008a4e:	d0f9      	beq.n	8008a44 <_strtod_l+0x294>
 8008a50:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008a54:	2908      	cmp	r1, #8
 8008a56:	f63f af78 	bhi.w	800894a <_strtod_l+0x19a>
 8008a5a:	f04f 080a 	mov.w	r8, #10
 8008a5e:	3a30      	subs	r2, #48	@ 0x30
 8008a60:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a64:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008a66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a68:	1c56      	adds	r6, r2, #1
 8008a6a:	9619      	str	r6, [sp, #100]	@ 0x64
 8008a6c:	7852      	ldrb	r2, [r2, #1]
 8008a6e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008a72:	f1be 0f09 	cmp.w	lr, #9
 8008a76:	d939      	bls.n	8008aec <_strtod_l+0x33c>
 8008a78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008a7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008a7e:	1a76      	subs	r6, r6, r1
 8008a80:	2e08      	cmp	r6, #8
 8008a82:	dc03      	bgt.n	8008a8c <_strtod_l+0x2dc>
 8008a84:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008a86:	4588      	cmp	r8, r1
 8008a88:	bfa8      	it	ge
 8008a8a:	4688      	movge	r8, r1
 8008a8c:	f1bc 0f00 	cmp.w	ip, #0
 8008a90:	d001      	beq.n	8008a96 <_strtod_l+0x2e6>
 8008a92:	f1c8 0800 	rsb	r8, r8, #0
 8008a96:	2d00      	cmp	r5, #0
 8008a98:	d14e      	bne.n	8008b38 <_strtod_l+0x388>
 8008a9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a9c:	4308      	orrs	r0, r1
 8008a9e:	f47f aec0 	bne.w	8008822 <_strtod_l+0x72>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f47f aed6 	bne.w	8008854 <_strtod_l+0xa4>
 8008aa8:	2a69      	cmp	r2, #105	@ 0x69
 8008aaa:	d028      	beq.n	8008afe <_strtod_l+0x34e>
 8008aac:	dc25      	bgt.n	8008afa <_strtod_l+0x34a>
 8008aae:	2a49      	cmp	r2, #73	@ 0x49
 8008ab0:	d025      	beq.n	8008afe <_strtod_l+0x34e>
 8008ab2:	2a4e      	cmp	r2, #78	@ 0x4e
 8008ab4:	f47f aece 	bne.w	8008854 <_strtod_l+0xa4>
 8008ab8:	499a      	ldr	r1, [pc, #616]	@ (8008d24 <_strtod_l+0x574>)
 8008aba:	a819      	add	r0, sp, #100	@ 0x64
 8008abc:	f002 fc6a 	bl	800b394 <__match>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	f43f aec7 	beq.w	8008854 <_strtod_l+0xa4>
 8008ac6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b28      	cmp	r3, #40	@ 0x28
 8008acc:	d12e      	bne.n	8008b2c <_strtod_l+0x37c>
 8008ace:	4996      	ldr	r1, [pc, #600]	@ (8008d28 <_strtod_l+0x578>)
 8008ad0:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ad2:	a819      	add	r0, sp, #100	@ 0x64
 8008ad4:	f002 fc72 	bl	800b3bc <__hexnan>
 8008ad8:	2805      	cmp	r0, #5
 8008ada:	d127      	bne.n	8008b2c <_strtod_l+0x37c>
 8008adc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ade:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008ae2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008ae6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008aea:	e69a      	b.n	8008822 <_strtod_l+0x72>
 8008aec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008aee:	fb08 2101 	mla	r1, r8, r1, r2
 8008af2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008af6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008af8:	e7b5      	b.n	8008a66 <_strtod_l+0x2b6>
 8008afa:	2a6e      	cmp	r2, #110	@ 0x6e
 8008afc:	e7da      	b.n	8008ab4 <_strtod_l+0x304>
 8008afe:	498b      	ldr	r1, [pc, #556]	@ (8008d2c <_strtod_l+0x57c>)
 8008b00:	a819      	add	r0, sp, #100	@ 0x64
 8008b02:	f002 fc47 	bl	800b394 <__match>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f43f aea4 	beq.w	8008854 <_strtod_l+0xa4>
 8008b0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b0e:	4988      	ldr	r1, [pc, #544]	@ (8008d30 <_strtod_l+0x580>)
 8008b10:	3b01      	subs	r3, #1
 8008b12:	a819      	add	r0, sp, #100	@ 0x64
 8008b14:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b16:	f002 fc3d 	bl	800b394 <__match>
 8008b1a:	b910      	cbnz	r0, 8008b22 <_strtod_l+0x372>
 8008b1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b1e:	3301      	adds	r3, #1
 8008b20:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b22:	f04f 0a00 	mov.w	sl, #0
 8008b26:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008d34 <_strtod_l+0x584>
 8008b2a:	e67a      	b.n	8008822 <_strtod_l+0x72>
 8008b2c:	4882      	ldr	r0, [pc, #520]	@ (8008d38 <_strtod_l+0x588>)
 8008b2e:	f001 faeb 	bl	800a108 <nan>
 8008b32:	4682      	mov	sl, r0
 8008b34:	468b      	mov	fp, r1
 8008b36:	e674      	b.n	8008822 <_strtod_l+0x72>
 8008b38:	eba8 0309 	sub.w	r3, r8, r9
 8008b3c:	2f00      	cmp	r7, #0
 8008b3e:	bf08      	it	eq
 8008b40:	462f      	moveq	r7, r5
 8008b42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b44:	2d10      	cmp	r5, #16
 8008b46:	462c      	mov	r4, r5
 8008b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b4a:	bfa8      	it	ge
 8008b4c:	2410      	movge	r4, #16
 8008b4e:	f7f7 fc61 	bl	8000414 <__aeabi_ui2d>
 8008b52:	2d09      	cmp	r5, #9
 8008b54:	4682      	mov	sl, r0
 8008b56:	468b      	mov	fp, r1
 8008b58:	dc11      	bgt.n	8008b7e <_strtod_l+0x3ce>
 8008b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f43f ae60 	beq.w	8008822 <_strtod_l+0x72>
 8008b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b64:	dd76      	ble.n	8008c54 <_strtod_l+0x4a4>
 8008b66:	2b16      	cmp	r3, #22
 8008b68:	dc5d      	bgt.n	8008c26 <_strtod_l+0x476>
 8008b6a:	4974      	ldr	r1, [pc, #464]	@ (8008d3c <_strtod_l+0x58c>)
 8008b6c:	4652      	mov	r2, sl
 8008b6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b72:	465b      	mov	r3, fp
 8008b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b78:	f7f7 fcc6 	bl	8000508 <__aeabi_dmul>
 8008b7c:	e7d9      	b.n	8008b32 <_strtod_l+0x382>
 8008b7e:	4b6f      	ldr	r3, [pc, #444]	@ (8008d3c <_strtod_l+0x58c>)
 8008b80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008b88:	f7f7 fcbe 	bl	8000508 <__aeabi_dmul>
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	9808      	ldr	r0, [sp, #32]
 8008b90:	468b      	mov	fp, r1
 8008b92:	f7f7 fc3f 	bl	8000414 <__aeabi_ui2d>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	f7f7 fafd 	bl	800019c <__adddf3>
 8008ba2:	2d0f      	cmp	r5, #15
 8008ba4:	4682      	mov	sl, r0
 8008ba6:	468b      	mov	fp, r1
 8008ba8:	ddd7      	ble.n	8008b5a <_strtod_l+0x3aa>
 8008baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bac:	1b2c      	subs	r4, r5, r4
 8008bae:	441c      	add	r4, r3
 8008bb0:	2c00      	cmp	r4, #0
 8008bb2:	f340 8096 	ble.w	8008ce2 <_strtod_l+0x532>
 8008bb6:	f014 030f 	ands.w	r3, r4, #15
 8008bba:	d00a      	beq.n	8008bd2 <_strtod_l+0x422>
 8008bbc:	495f      	ldr	r1, [pc, #380]	@ (8008d3c <_strtod_l+0x58c>)
 8008bbe:	4652      	mov	r2, sl
 8008bc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bc8:	465b      	mov	r3, fp
 8008bca:	f7f7 fc9d 	bl	8000508 <__aeabi_dmul>
 8008bce:	4682      	mov	sl, r0
 8008bd0:	468b      	mov	fp, r1
 8008bd2:	f034 040f 	bics.w	r4, r4, #15
 8008bd6:	d073      	beq.n	8008cc0 <_strtod_l+0x510>
 8008bd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008bdc:	dd48      	ble.n	8008c70 <_strtod_l+0x4c0>
 8008bde:	2400      	movs	r4, #0
 8008be0:	46a0      	mov	r8, r4
 8008be2:	46a1      	mov	r9, r4
 8008be4:	940a      	str	r4, [sp, #40]	@ 0x28
 8008be6:	2322      	movs	r3, #34	@ 0x22
 8008be8:	f04f 0a00 	mov.w	sl, #0
 8008bec:	9a05      	ldr	r2, [sp, #20]
 8008bee:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008d34 <_strtod_l+0x584>
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f43f ae13 	beq.w	8008822 <_strtod_l+0x72>
 8008bfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bfe:	9805      	ldr	r0, [sp, #20]
 8008c00:	f002 fd80 	bl	800b704 <_Bfree>
 8008c04:	4649      	mov	r1, r9
 8008c06:	9805      	ldr	r0, [sp, #20]
 8008c08:	f002 fd7c 	bl	800b704 <_Bfree>
 8008c0c:	4641      	mov	r1, r8
 8008c0e:	9805      	ldr	r0, [sp, #20]
 8008c10:	f002 fd78 	bl	800b704 <_Bfree>
 8008c14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c16:	9805      	ldr	r0, [sp, #20]
 8008c18:	f002 fd74 	bl	800b704 <_Bfree>
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	9805      	ldr	r0, [sp, #20]
 8008c20:	f002 fd70 	bl	800b704 <_Bfree>
 8008c24:	e5fd      	b.n	8008822 <_strtod_l+0x72>
 8008c26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	dbbc      	blt.n	8008baa <_strtod_l+0x3fa>
 8008c30:	4c42      	ldr	r4, [pc, #264]	@ (8008d3c <_strtod_l+0x58c>)
 8008c32:	f1c5 050f 	rsb	r5, r5, #15
 8008c36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c3a:	4652      	mov	r2, sl
 8008c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c40:	465b      	mov	r3, fp
 8008c42:	f7f7 fc61 	bl	8000508 <__aeabi_dmul>
 8008c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c48:	1b5d      	subs	r5, r3, r5
 8008c4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008c4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c52:	e791      	b.n	8008b78 <_strtod_l+0x3c8>
 8008c54:	3316      	adds	r3, #22
 8008c56:	dba8      	blt.n	8008baa <_strtod_l+0x3fa>
 8008c58:	4b38      	ldr	r3, [pc, #224]	@ (8008d3c <_strtod_l+0x58c>)
 8008c5a:	eba9 0808 	sub.w	r8, r9, r8
 8008c5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008c62:	4650      	mov	r0, sl
 8008c64:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008c68:	4659      	mov	r1, fp
 8008c6a:	f7f7 fd77 	bl	800075c <__aeabi_ddiv>
 8008c6e:	e760      	b.n	8008b32 <_strtod_l+0x382>
 8008c70:	4b33      	ldr	r3, [pc, #204]	@ (8008d40 <_strtod_l+0x590>)
 8008c72:	4650      	mov	r0, sl
 8008c74:	9308      	str	r3, [sp, #32]
 8008c76:	2300      	movs	r3, #0
 8008c78:	4659      	mov	r1, fp
 8008c7a:	461e      	mov	r6, r3
 8008c7c:	1124      	asrs	r4, r4, #4
 8008c7e:	2c01      	cmp	r4, #1
 8008c80:	dc21      	bgt.n	8008cc6 <_strtod_l+0x516>
 8008c82:	b10b      	cbz	r3, 8008c88 <_strtod_l+0x4d8>
 8008c84:	4682      	mov	sl, r0
 8008c86:	468b      	mov	fp, r1
 8008c88:	492d      	ldr	r1, [pc, #180]	@ (8008d40 <_strtod_l+0x590>)
 8008c8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008c8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008c92:	4652      	mov	r2, sl
 8008c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c98:	465b      	mov	r3, fp
 8008c9a:	f7f7 fc35 	bl	8000508 <__aeabi_dmul>
 8008c9e:	4b25      	ldr	r3, [pc, #148]	@ (8008d34 <_strtod_l+0x584>)
 8008ca0:	460a      	mov	r2, r1
 8008ca2:	400b      	ands	r3, r1
 8008ca4:	4927      	ldr	r1, [pc, #156]	@ (8008d44 <_strtod_l+0x594>)
 8008ca6:	4682      	mov	sl, r0
 8008ca8:	428b      	cmp	r3, r1
 8008caa:	d898      	bhi.n	8008bde <_strtod_l+0x42e>
 8008cac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf86      	itte	hi
 8008cb4:	f04f 3aff 	movhi.w	sl, #4294967295
 8008cb8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008d48 <_strtod_l+0x598>
 8008cbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9308      	str	r3, [sp, #32]
 8008cc4:	e07a      	b.n	8008dbc <_strtod_l+0x60c>
 8008cc6:	07e2      	lsls	r2, r4, #31
 8008cc8:	d505      	bpl.n	8008cd6 <_strtod_l+0x526>
 8008cca:	9b08      	ldr	r3, [sp, #32]
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fc1a 	bl	8000508 <__aeabi_dmul>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	9a08      	ldr	r2, [sp, #32]
 8008cd8:	3601      	adds	r6, #1
 8008cda:	3208      	adds	r2, #8
 8008cdc:	1064      	asrs	r4, r4, #1
 8008cde:	9208      	str	r2, [sp, #32]
 8008ce0:	e7cd      	b.n	8008c7e <_strtod_l+0x4ce>
 8008ce2:	d0ed      	beq.n	8008cc0 <_strtod_l+0x510>
 8008ce4:	4264      	negs	r4, r4
 8008ce6:	f014 020f 	ands.w	r2, r4, #15
 8008cea:	d00a      	beq.n	8008d02 <_strtod_l+0x552>
 8008cec:	4b13      	ldr	r3, [pc, #76]	@ (8008d3c <_strtod_l+0x58c>)
 8008cee:	4650      	mov	r0, sl
 8008cf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 fd2f 	bl	800075c <__aeabi_ddiv>
 8008cfe:	4682      	mov	sl, r0
 8008d00:	468b      	mov	fp, r1
 8008d02:	1124      	asrs	r4, r4, #4
 8008d04:	d0dc      	beq.n	8008cc0 <_strtod_l+0x510>
 8008d06:	2c1f      	cmp	r4, #31
 8008d08:	dd20      	ble.n	8008d4c <_strtod_l+0x59c>
 8008d0a:	2400      	movs	r4, #0
 8008d0c:	46a0      	mov	r8, r4
 8008d0e:	46a1      	mov	r9, r4
 8008d10:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d12:	2322      	movs	r3, #34	@ 0x22
 8008d14:	9a05      	ldr	r2, [sp, #20]
 8008d16:	f04f 0a00 	mov.w	sl, #0
 8008d1a:	f04f 0b00 	mov.w	fp, #0
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	e768      	b.n	8008bf4 <_strtod_l+0x444>
 8008d22:	bf00      	nop
 8008d24:	0800cb7d 	.word	0x0800cb7d
 8008d28:	0800cb1c 	.word	0x0800cb1c
 8008d2c:	0800cb75 	.word	0x0800cb75
 8008d30:	0800cc5c 	.word	0x0800cc5c
 8008d34:	7ff00000 	.word	0x7ff00000
 8008d38:	0800cc58 	.word	0x0800cc58
 8008d3c:	0800cdc0 	.word	0x0800cdc0
 8008d40:	0800cd98 	.word	0x0800cd98
 8008d44:	7ca00000 	.word	0x7ca00000
 8008d48:	7fefffff 	.word	0x7fefffff
 8008d4c:	f014 0310 	ands.w	r3, r4, #16
 8008d50:	bf18      	it	ne
 8008d52:	236a      	movne	r3, #106	@ 0x6a
 8008d54:	4650      	mov	r0, sl
 8008d56:	9308      	str	r3, [sp, #32]
 8008d58:	4659      	mov	r1, fp
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	4ea9      	ldr	r6, [pc, #676]	@ (8009004 <_strtod_l+0x854>)
 8008d5e:	07e2      	lsls	r2, r4, #31
 8008d60:	d504      	bpl.n	8008d6c <_strtod_l+0x5bc>
 8008d62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d66:	f7f7 fbcf 	bl	8000508 <__aeabi_dmul>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	1064      	asrs	r4, r4, #1
 8008d6e:	f106 0608 	add.w	r6, r6, #8
 8008d72:	d1f4      	bne.n	8008d5e <_strtod_l+0x5ae>
 8008d74:	b10b      	cbz	r3, 8008d7a <_strtod_l+0x5ca>
 8008d76:	4682      	mov	sl, r0
 8008d78:	468b      	mov	fp, r1
 8008d7a:	9b08      	ldr	r3, [sp, #32]
 8008d7c:	b1b3      	cbz	r3, 8008dac <_strtod_l+0x5fc>
 8008d7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008d82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	4659      	mov	r1, fp
 8008d8a:	dd0f      	ble.n	8008dac <_strtod_l+0x5fc>
 8008d8c:	2b1f      	cmp	r3, #31
 8008d8e:	dd57      	ble.n	8008e40 <_strtod_l+0x690>
 8008d90:	2b34      	cmp	r3, #52	@ 0x34
 8008d92:	bfd8      	it	le
 8008d94:	f04f 33ff 	movle.w	r3, #4294967295
 8008d98:	f04f 0a00 	mov.w	sl, #0
 8008d9c:	bfcf      	iteee	gt
 8008d9e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008da2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008da6:	4093      	lslle	r3, r2
 8008da8:	ea03 0b01 	andle.w	fp, r3, r1
 8008dac:	2200      	movs	r2, #0
 8008dae:	2300      	movs	r3, #0
 8008db0:	4650      	mov	r0, sl
 8008db2:	4659      	mov	r1, fp
 8008db4:	f7f7 fe10 	bl	80009d8 <__aeabi_dcmpeq>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d1a6      	bne.n	8008d0a <_strtod_l+0x55a>
 8008dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dbe:	463a      	mov	r2, r7
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008dc4:	462b      	mov	r3, r5
 8008dc6:	9805      	ldr	r0, [sp, #20]
 8008dc8:	f002 fd04 	bl	800b7d4 <__s2b>
 8008dcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f43f af05 	beq.w	8008bde <_strtod_l+0x42e>
 8008dd4:	2400      	movs	r4, #0
 8008dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dd8:	eba9 0308 	sub.w	r3, r9, r8
 8008ddc:	2a00      	cmp	r2, #0
 8008dde:	bfa8      	it	ge
 8008de0:	2300      	movge	r3, #0
 8008de2:	46a0      	mov	r8, r4
 8008de4:	9312      	str	r3, [sp, #72]	@ 0x48
 8008de6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008dea:	9316      	str	r3, [sp, #88]	@ 0x58
 8008dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dee:	9805      	ldr	r0, [sp, #20]
 8008df0:	6859      	ldr	r1, [r3, #4]
 8008df2:	f002 fc47 	bl	800b684 <_Balloc>
 8008df6:	4681      	mov	r9, r0
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	f43f aef4 	beq.w	8008be6 <_strtod_l+0x436>
 8008dfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e00:	300c      	adds	r0, #12
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	f103 010c 	add.w	r1, r3, #12
 8008e08:	3202      	adds	r2, #2
 8008e0a:	0092      	lsls	r2, r2, #2
 8008e0c:	f001 f96d 	bl	800a0ea <memcpy>
 8008e10:	ab1c      	add	r3, sp, #112	@ 0x70
 8008e12:	9301      	str	r3, [sp, #4]
 8008e14:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	4652      	mov	r2, sl
 8008e1a:	465b      	mov	r3, fp
 8008e1c:	9805      	ldr	r0, [sp, #20]
 8008e1e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008e22:	f003 f809 	bl	800be38 <__d2b>
 8008e26:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	f43f aedc 	beq.w	8008be6 <_strtod_l+0x436>
 8008e2e:	2101      	movs	r1, #1
 8008e30:	9805      	ldr	r0, [sp, #20]
 8008e32:	f002 fd65 	bl	800b900 <__i2b>
 8008e36:	4680      	mov	r8, r0
 8008e38:	b948      	cbnz	r0, 8008e4e <_strtod_l+0x69e>
 8008e3a:	f04f 0800 	mov.w	r8, #0
 8008e3e:	e6d2      	b.n	8008be6 <_strtod_l+0x436>
 8008e40:	f04f 32ff 	mov.w	r2, #4294967295
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	ea03 0a0a 	and.w	sl, r3, sl
 8008e4c:	e7ae      	b.n	8008dac <_strtod_l+0x5fc>
 8008e4e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008e50:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008e52:	2d00      	cmp	r5, #0
 8008e54:	bfab      	itete	ge
 8008e56:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008e58:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008e5a:	18ef      	addge	r7, r5, r3
 8008e5c:	1b5e      	sublt	r6, r3, r5
 8008e5e:	9b08      	ldr	r3, [sp, #32]
 8008e60:	bfa8      	it	ge
 8008e62:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008e64:	eba5 0503 	sub.w	r5, r5, r3
 8008e68:	4415      	add	r5, r2
 8008e6a:	4b67      	ldr	r3, [pc, #412]	@ (8009008 <_strtod_l+0x858>)
 8008e6c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008e70:	bfb8      	it	lt
 8008e72:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008e74:	429d      	cmp	r5, r3
 8008e76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008e7a:	da50      	bge.n	8008f1e <_strtod_l+0x76e>
 8008e7c:	1b5b      	subs	r3, r3, r5
 8008e7e:	2b1f      	cmp	r3, #31
 8008e80:	f04f 0101 	mov.w	r1, #1
 8008e84:	eba2 0203 	sub.w	r2, r2, r3
 8008e88:	dc3d      	bgt.n	8008f06 <_strtod_l+0x756>
 8008e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e90:	2300      	movs	r3, #0
 8008e92:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e94:	18bd      	adds	r5, r7, r2
 8008e96:	9b08      	ldr	r3, [sp, #32]
 8008e98:	42af      	cmp	r7, r5
 8008e9a:	4416      	add	r6, r2
 8008e9c:	441e      	add	r6, r3
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	bfa8      	it	ge
 8008ea2:	462b      	movge	r3, r5
 8008ea4:	42b3      	cmp	r3, r6
 8008ea6:	bfa8      	it	ge
 8008ea8:	4633      	movge	r3, r6
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfc2      	ittt	gt
 8008eae:	1aed      	subgt	r5, r5, r3
 8008eb0:	1af6      	subgt	r6, r6, r3
 8008eb2:	1aff      	subgt	r7, r7, r3
 8008eb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	dd16      	ble.n	8008ee8 <_strtod_l+0x738>
 8008eba:	4641      	mov	r1, r8
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	9805      	ldr	r0, [sp, #20]
 8008ec0:	f002 fddc 	bl	800ba7c <__pow5mult>
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d0b7      	beq.n	8008e3a <_strtod_l+0x68a>
 8008eca:	4601      	mov	r1, r0
 8008ecc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ece:	9805      	ldr	r0, [sp, #20]
 8008ed0:	f002 fd2c 	bl	800b92c <__multiply>
 8008ed4:	900e      	str	r0, [sp, #56]	@ 0x38
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f43f ae85 	beq.w	8008be6 <_strtod_l+0x436>
 8008edc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ede:	9805      	ldr	r0, [sp, #20]
 8008ee0:	f002 fc10 	bl	800b704 <_Bfree>
 8008ee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ee6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	dc1d      	bgt.n	8008f28 <_strtod_l+0x778>
 8008eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dd23      	ble.n	8008f3a <_strtod_l+0x78a>
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008ef6:	9805      	ldr	r0, [sp, #20]
 8008ef8:	f002 fdc0 	bl	800ba7c <__pow5mult>
 8008efc:	4681      	mov	r9, r0
 8008efe:	b9e0      	cbnz	r0, 8008f3a <_strtod_l+0x78a>
 8008f00:	f04f 0900 	mov.w	r9, #0
 8008f04:	e66f      	b.n	8008be6 <_strtod_l+0x436>
 8008f06:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008f0a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008f0e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008f12:	35e2      	adds	r5, #226	@ 0xe2
 8008f14:	fa01 f305 	lsl.w	r3, r1, r5
 8008f18:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008f1c:	e7ba      	b.n	8008e94 <_strtod_l+0x6e4>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f22:	2301      	movs	r3, #1
 8008f24:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f26:	e7b5      	b.n	8008e94 <_strtod_l+0x6e4>
 8008f28:	462a      	mov	r2, r5
 8008f2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f2c:	9805      	ldr	r0, [sp, #20]
 8008f2e:	f002 fdff 	bl	800bb30 <__lshift>
 8008f32:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d1d9      	bne.n	8008eec <_strtod_l+0x73c>
 8008f38:	e655      	b.n	8008be6 <_strtod_l+0x436>
 8008f3a:	2e00      	cmp	r6, #0
 8008f3c:	dd07      	ble.n	8008f4e <_strtod_l+0x79e>
 8008f3e:	4649      	mov	r1, r9
 8008f40:	4632      	mov	r2, r6
 8008f42:	9805      	ldr	r0, [sp, #20]
 8008f44:	f002 fdf4 	bl	800bb30 <__lshift>
 8008f48:	4681      	mov	r9, r0
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d0d8      	beq.n	8008f00 <_strtod_l+0x750>
 8008f4e:	2f00      	cmp	r7, #0
 8008f50:	dd08      	ble.n	8008f64 <_strtod_l+0x7b4>
 8008f52:	4641      	mov	r1, r8
 8008f54:	463a      	mov	r2, r7
 8008f56:	9805      	ldr	r0, [sp, #20]
 8008f58:	f002 fdea 	bl	800bb30 <__lshift>
 8008f5c:	4680      	mov	r8, r0
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f43f ae41 	beq.w	8008be6 <_strtod_l+0x436>
 8008f64:	464a      	mov	r2, r9
 8008f66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f68:	9805      	ldr	r0, [sp, #20]
 8008f6a:	f002 fe69 	bl	800bc40 <__mdiff>
 8008f6e:	4604      	mov	r4, r0
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f43f ae38 	beq.w	8008be6 <_strtod_l+0x436>
 8008f76:	68c3      	ldr	r3, [r0, #12]
 8008f78:	4641      	mov	r1, r8
 8008f7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60c3      	str	r3, [r0, #12]
 8008f80:	f002 fe42 	bl	800bc08 <__mcmp>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	da45      	bge.n	8009014 <_strtod_l+0x864>
 8008f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f8a:	ea53 030a 	orrs.w	r3, r3, sl
 8008f8e:	d16b      	bne.n	8009068 <_strtod_l+0x8b8>
 8008f90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d167      	bne.n	8009068 <_strtod_l+0x8b8>
 8008f98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f9c:	0d1b      	lsrs	r3, r3, #20
 8008f9e:	051b      	lsls	r3, r3, #20
 8008fa0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008fa4:	d960      	bls.n	8009068 <_strtod_l+0x8b8>
 8008fa6:	6963      	ldr	r3, [r4, #20]
 8008fa8:	b913      	cbnz	r3, 8008fb0 <_strtod_l+0x800>
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	dd5b      	ble.n	8009068 <_strtod_l+0x8b8>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	9805      	ldr	r0, [sp, #20]
 8008fb6:	f002 fdbb 	bl	800bb30 <__lshift>
 8008fba:	4641      	mov	r1, r8
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	f002 fe23 	bl	800bc08 <__mcmp>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	dd50      	ble.n	8009068 <_strtod_l+0x8b8>
 8008fc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fca:	9a08      	ldr	r2, [sp, #32]
 8008fcc:	0d1b      	lsrs	r3, r3, #20
 8008fce:	051b      	lsls	r3, r3, #20
 8008fd0:	2a00      	cmp	r2, #0
 8008fd2:	d06a      	beq.n	80090aa <_strtod_l+0x8fa>
 8008fd4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008fd8:	d867      	bhi.n	80090aa <_strtod_l+0x8fa>
 8008fda:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008fde:	f67f ae98 	bls.w	8008d12 <_strtod_l+0x562>
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	4659      	mov	r1, fp
 8008fe6:	4b09      	ldr	r3, [pc, #36]	@ (800900c <_strtod_l+0x85c>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f7f7 fa8d 	bl	8000508 <__aeabi_dmul>
 8008fee:	4b08      	ldr	r3, [pc, #32]	@ (8009010 <_strtod_l+0x860>)
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	400b      	ands	r3, r1
 8008ff4:	468b      	mov	fp, r1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f47f ae00 	bne.w	8008bfc <_strtod_l+0x44c>
 8008ffc:	2322      	movs	r3, #34	@ 0x22
 8008ffe:	9a05      	ldr	r2, [sp, #20]
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e5fb      	b.n	8008bfc <_strtod_l+0x44c>
 8009004:	0800cb48 	.word	0x0800cb48
 8009008:	fffffc02 	.word	0xfffffc02
 800900c:	39500000 	.word	0x39500000
 8009010:	7ff00000 	.word	0x7ff00000
 8009014:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009018:	d165      	bne.n	80090e6 <_strtod_l+0x936>
 800901a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800901c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009020:	b35a      	cbz	r2, 800907a <_strtod_l+0x8ca>
 8009022:	4a99      	ldr	r2, [pc, #612]	@ (8009288 <_strtod_l+0xad8>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d12b      	bne.n	8009080 <_strtod_l+0x8d0>
 8009028:	9b08      	ldr	r3, [sp, #32]
 800902a:	4651      	mov	r1, sl
 800902c:	b303      	cbz	r3, 8009070 <_strtod_l+0x8c0>
 800902e:	465a      	mov	r2, fp
 8009030:	4b96      	ldr	r3, [pc, #600]	@ (800928c <_strtod_l+0xadc>)
 8009032:	4013      	ands	r3, r2
 8009034:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009038:	f04f 32ff 	mov.w	r2, #4294967295
 800903c:	d81b      	bhi.n	8009076 <_strtod_l+0x8c6>
 800903e:	0d1b      	lsrs	r3, r3, #20
 8009040:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009044:	fa02 f303 	lsl.w	r3, r2, r3
 8009048:	4299      	cmp	r1, r3
 800904a:	d119      	bne.n	8009080 <_strtod_l+0x8d0>
 800904c:	4b90      	ldr	r3, [pc, #576]	@ (8009290 <_strtod_l+0xae0>)
 800904e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009050:	429a      	cmp	r2, r3
 8009052:	d102      	bne.n	800905a <_strtod_l+0x8aa>
 8009054:	3101      	adds	r1, #1
 8009056:	f43f adc6 	beq.w	8008be6 <_strtod_l+0x436>
 800905a:	f04f 0a00 	mov.w	sl, #0
 800905e:	4b8b      	ldr	r3, [pc, #556]	@ (800928c <_strtod_l+0xadc>)
 8009060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009062:	401a      	ands	r2, r3
 8009064:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1b9      	bne.n	8008fe2 <_strtod_l+0x832>
 800906e:	e5c5      	b.n	8008bfc <_strtod_l+0x44c>
 8009070:	f04f 33ff 	mov.w	r3, #4294967295
 8009074:	e7e8      	b.n	8009048 <_strtod_l+0x898>
 8009076:	4613      	mov	r3, r2
 8009078:	e7e6      	b.n	8009048 <_strtod_l+0x898>
 800907a:	ea53 030a 	orrs.w	r3, r3, sl
 800907e:	d0a2      	beq.n	8008fc6 <_strtod_l+0x816>
 8009080:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009082:	b1db      	cbz	r3, 80090bc <_strtod_l+0x90c>
 8009084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009086:	4213      	tst	r3, r2
 8009088:	d0ee      	beq.n	8009068 <_strtod_l+0x8b8>
 800908a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800908c:	4650      	mov	r0, sl
 800908e:	4659      	mov	r1, fp
 8009090:	9a08      	ldr	r2, [sp, #32]
 8009092:	b1bb      	cbz	r3, 80090c4 <_strtod_l+0x914>
 8009094:	f7ff fb6b 	bl	800876e <sulp>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090a0:	f7f7 f87c 	bl	800019c <__adddf3>
 80090a4:	4682      	mov	sl, r0
 80090a6:	468b      	mov	fp, r1
 80090a8:	e7de      	b.n	8009068 <_strtod_l+0x8b8>
 80090aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80090ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80090b2:	f04f 3aff 	mov.w	sl, #4294967295
 80090b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80090ba:	e7d5      	b.n	8009068 <_strtod_l+0x8b8>
 80090bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80090be:	ea13 0f0a 	tst.w	r3, sl
 80090c2:	e7e1      	b.n	8009088 <_strtod_l+0x8d8>
 80090c4:	f7ff fb53 	bl	800876e <sulp>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090d0:	f7f7 f862 	bl	8000198 <__aeabi_dsub>
 80090d4:	2200      	movs	r2, #0
 80090d6:	2300      	movs	r3, #0
 80090d8:	4682      	mov	sl, r0
 80090da:	468b      	mov	fp, r1
 80090dc:	f7f7 fc7c 	bl	80009d8 <__aeabi_dcmpeq>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d0c1      	beq.n	8009068 <_strtod_l+0x8b8>
 80090e4:	e615      	b.n	8008d12 <_strtod_l+0x562>
 80090e6:	4641      	mov	r1, r8
 80090e8:	4620      	mov	r0, r4
 80090ea:	f002 fefd 	bl	800bee8 <__ratio>
 80090ee:	2200      	movs	r2, #0
 80090f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80090f4:	4606      	mov	r6, r0
 80090f6:	460f      	mov	r7, r1
 80090f8:	f7f7 fc82 	bl	8000a00 <__aeabi_dcmple>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d06d      	beq.n	80091dc <_strtod_l+0xa2c>
 8009100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d178      	bne.n	80091f8 <_strtod_l+0xa48>
 8009106:	f1ba 0f00 	cmp.w	sl, #0
 800910a:	d156      	bne.n	80091ba <_strtod_l+0xa0a>
 800910c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800910e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009112:	2b00      	cmp	r3, #0
 8009114:	d158      	bne.n	80091c8 <_strtod_l+0xa18>
 8009116:	2200      	movs	r2, #0
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	4b5d      	ldr	r3, [pc, #372]	@ (8009294 <_strtod_l+0xae4>)
 800911e:	f7f7 fc65 	bl	80009ec <__aeabi_dcmplt>
 8009122:	2800      	cmp	r0, #0
 8009124:	d157      	bne.n	80091d6 <_strtod_l+0xa26>
 8009126:	4630      	mov	r0, r6
 8009128:	4639      	mov	r1, r7
 800912a:	2200      	movs	r2, #0
 800912c:	4b5a      	ldr	r3, [pc, #360]	@ (8009298 <_strtod_l+0xae8>)
 800912e:	f7f7 f9eb 	bl	8000508 <__aeabi_dmul>
 8009132:	4606      	mov	r6, r0
 8009134:	460f      	mov	r7, r1
 8009136:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800913a:	9606      	str	r6, [sp, #24]
 800913c:	9307      	str	r3, [sp, #28]
 800913e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009142:	4d52      	ldr	r5, [pc, #328]	@ (800928c <_strtod_l+0xadc>)
 8009144:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800914a:	401d      	ands	r5, r3
 800914c:	4b53      	ldr	r3, [pc, #332]	@ (800929c <_strtod_l+0xaec>)
 800914e:	429d      	cmp	r5, r3
 8009150:	f040 80aa 	bne.w	80092a8 <_strtod_l+0xaf8>
 8009154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009156:	4650      	mov	r0, sl
 8009158:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800915c:	4659      	mov	r1, fp
 800915e:	f002 fe03 	bl	800bd68 <__ulp>
 8009162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009166:	f7f7 f9cf 	bl	8000508 <__aeabi_dmul>
 800916a:	4652      	mov	r2, sl
 800916c:	465b      	mov	r3, fp
 800916e:	f7f7 f815 	bl	800019c <__adddf3>
 8009172:	460b      	mov	r3, r1
 8009174:	4945      	ldr	r1, [pc, #276]	@ (800928c <_strtod_l+0xadc>)
 8009176:	4a4a      	ldr	r2, [pc, #296]	@ (80092a0 <_strtod_l+0xaf0>)
 8009178:	4019      	ands	r1, r3
 800917a:	4291      	cmp	r1, r2
 800917c:	4682      	mov	sl, r0
 800917e:	d942      	bls.n	8009206 <_strtod_l+0xa56>
 8009180:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009182:	4b43      	ldr	r3, [pc, #268]	@ (8009290 <_strtod_l+0xae0>)
 8009184:	429a      	cmp	r2, r3
 8009186:	d103      	bne.n	8009190 <_strtod_l+0x9e0>
 8009188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800918a:	3301      	adds	r3, #1
 800918c:	f43f ad2b 	beq.w	8008be6 <_strtod_l+0x436>
 8009190:	f04f 3aff 	mov.w	sl, #4294967295
 8009194:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009290 <_strtod_l+0xae0>
 8009198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800919a:	9805      	ldr	r0, [sp, #20]
 800919c:	f002 fab2 	bl	800b704 <_Bfree>
 80091a0:	4649      	mov	r1, r9
 80091a2:	9805      	ldr	r0, [sp, #20]
 80091a4:	f002 faae 	bl	800b704 <_Bfree>
 80091a8:	4641      	mov	r1, r8
 80091aa:	9805      	ldr	r0, [sp, #20]
 80091ac:	f002 faaa 	bl	800b704 <_Bfree>
 80091b0:	4621      	mov	r1, r4
 80091b2:	9805      	ldr	r0, [sp, #20]
 80091b4:	f002 faa6 	bl	800b704 <_Bfree>
 80091b8:	e618      	b.n	8008dec <_strtod_l+0x63c>
 80091ba:	f1ba 0f01 	cmp.w	sl, #1
 80091be:	d103      	bne.n	80091c8 <_strtod_l+0xa18>
 80091c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f43f ada5 	beq.w	8008d12 <_strtod_l+0x562>
 80091c8:	2200      	movs	r2, #0
 80091ca:	4b36      	ldr	r3, [pc, #216]	@ (80092a4 <_strtod_l+0xaf4>)
 80091cc:	2600      	movs	r6, #0
 80091ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80091d2:	4f30      	ldr	r7, [pc, #192]	@ (8009294 <_strtod_l+0xae4>)
 80091d4:	e7b3      	b.n	800913e <_strtod_l+0x98e>
 80091d6:	2600      	movs	r6, #0
 80091d8:	4f2f      	ldr	r7, [pc, #188]	@ (8009298 <_strtod_l+0xae8>)
 80091da:	e7ac      	b.n	8009136 <_strtod_l+0x986>
 80091dc:	4630      	mov	r0, r6
 80091de:	4639      	mov	r1, r7
 80091e0:	4b2d      	ldr	r3, [pc, #180]	@ (8009298 <_strtod_l+0xae8>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	f7f7 f990 	bl	8000508 <__aeabi_dmul>
 80091e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ea:	4606      	mov	r6, r0
 80091ec:	460f      	mov	r7, r1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0a1      	beq.n	8009136 <_strtod_l+0x986>
 80091f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80091f6:	e7a2      	b.n	800913e <_strtod_l+0x98e>
 80091f8:	2200      	movs	r2, #0
 80091fa:	4b26      	ldr	r3, [pc, #152]	@ (8009294 <_strtod_l+0xae4>)
 80091fc:	4616      	mov	r6, r2
 80091fe:	461f      	mov	r7, r3
 8009200:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009204:	e79b      	b.n	800913e <_strtod_l+0x98e>
 8009206:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800920a:	9b08      	ldr	r3, [sp, #32]
 800920c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1c1      	bne.n	8009198 <_strtod_l+0x9e8>
 8009214:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009218:	0d1b      	lsrs	r3, r3, #20
 800921a:	051b      	lsls	r3, r3, #20
 800921c:	429d      	cmp	r5, r3
 800921e:	d1bb      	bne.n	8009198 <_strtod_l+0x9e8>
 8009220:	4630      	mov	r0, r6
 8009222:	4639      	mov	r1, r7
 8009224:	f7f7 ffca 	bl	80011bc <__aeabi_d2lz>
 8009228:	f7f7 f940 	bl	80004ac <__aeabi_l2d>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f6 ffb0 	bl	8000198 <__aeabi_dsub>
 8009238:	460b      	mov	r3, r1
 800923a:	4602      	mov	r2, r0
 800923c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009240:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009246:	ea46 060a 	orr.w	r6, r6, sl
 800924a:	431e      	orrs	r6, r3
 800924c:	d069      	beq.n	8009322 <_strtod_l+0xb72>
 800924e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009278 <_strtod_l+0xac8>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 fbca 	bl	80009ec <__aeabi_dcmplt>
 8009258:	2800      	cmp	r0, #0
 800925a:	f47f accf 	bne.w	8008bfc <_strtod_l+0x44c>
 800925e:	a308      	add	r3, pc, #32	@ (adr r3, 8009280 <_strtod_l+0xad0>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009268:	f7f7 fbde 	bl	8000a28 <__aeabi_dcmpgt>
 800926c:	2800      	cmp	r0, #0
 800926e:	d093      	beq.n	8009198 <_strtod_l+0x9e8>
 8009270:	e4c4      	b.n	8008bfc <_strtod_l+0x44c>
 8009272:	bf00      	nop
 8009274:	f3af 8000 	nop.w
 8009278:	94a03595 	.word	0x94a03595
 800927c:	3fdfffff 	.word	0x3fdfffff
 8009280:	35afe535 	.word	0x35afe535
 8009284:	3fe00000 	.word	0x3fe00000
 8009288:	000fffff 	.word	0x000fffff
 800928c:	7ff00000 	.word	0x7ff00000
 8009290:	7fefffff 	.word	0x7fefffff
 8009294:	3ff00000 	.word	0x3ff00000
 8009298:	3fe00000 	.word	0x3fe00000
 800929c:	7fe00000 	.word	0x7fe00000
 80092a0:	7c9fffff 	.word	0x7c9fffff
 80092a4:	bff00000 	.word	0xbff00000
 80092a8:	9b08      	ldr	r3, [sp, #32]
 80092aa:	b323      	cbz	r3, 80092f6 <_strtod_l+0xb46>
 80092ac:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80092b0:	d821      	bhi.n	80092f6 <_strtod_l+0xb46>
 80092b2:	a327      	add	r3, pc, #156	@ (adr r3, 8009350 <_strtod_l+0xba0>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	4630      	mov	r0, r6
 80092ba:	4639      	mov	r1, r7
 80092bc:	f7f7 fba0 	bl	8000a00 <__aeabi_dcmple>
 80092c0:	b1a0      	cbz	r0, 80092ec <_strtod_l+0xb3c>
 80092c2:	4639      	mov	r1, r7
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7f7 fbf7 	bl	8000ab8 <__aeabi_d2uiz>
 80092ca:	2801      	cmp	r0, #1
 80092cc:	bf38      	it	cc
 80092ce:	2001      	movcc	r0, #1
 80092d0:	f7f7 f8a0 	bl	8000414 <__aeabi_ui2d>
 80092d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092d6:	4606      	mov	r6, r0
 80092d8:	460f      	mov	r7, r1
 80092da:	b9fb      	cbnz	r3, 800931c <_strtod_l+0xb6c>
 80092dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092e0:	9014      	str	r0, [sp, #80]	@ 0x50
 80092e2:	9315      	str	r3, [sp, #84]	@ 0x54
 80092e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80092e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80092ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80092ee:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80092f2:	1b5b      	subs	r3, r3, r5
 80092f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80092f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092fa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80092fe:	f002 fd33 	bl	800bd68 <__ulp>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4650      	mov	r0, sl
 8009308:	4659      	mov	r1, fp
 800930a:	f7f7 f8fd 	bl	8000508 <__aeabi_dmul>
 800930e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009312:	f7f6 ff43 	bl	800019c <__adddf3>
 8009316:	4682      	mov	sl, r0
 8009318:	468b      	mov	fp, r1
 800931a:	e776      	b.n	800920a <_strtod_l+0xa5a>
 800931c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009320:	e7e0      	b.n	80092e4 <_strtod_l+0xb34>
 8009322:	a30d      	add	r3, pc, #52	@ (adr r3, 8009358 <_strtod_l+0xba8>)
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	f7f7 fb60 	bl	80009ec <__aeabi_dcmplt>
 800932c:	e79e      	b.n	800926c <_strtod_l+0xabc>
 800932e:	2300      	movs	r3, #0
 8009330:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009332:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009334:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	f7ff ba77 	b.w	800882a <_strtod_l+0x7a>
 800933c:	2a65      	cmp	r2, #101	@ 0x65
 800933e:	f43f ab6e 	beq.w	8008a1e <_strtod_l+0x26e>
 8009342:	2a45      	cmp	r2, #69	@ 0x45
 8009344:	f43f ab6b 	beq.w	8008a1e <_strtod_l+0x26e>
 8009348:	2301      	movs	r3, #1
 800934a:	f7ff bba6 	b.w	8008a9a <_strtod_l+0x2ea>
 800934e:	bf00      	nop
 8009350:	ffc00000 	.word	0xffc00000
 8009354:	41dfffff 	.word	0x41dfffff
 8009358:	94a03595 	.word	0x94a03595
 800935c:	3fcfffff 	.word	0x3fcfffff

08009360 <strtod>:
 8009360:	460a      	mov	r2, r1
 8009362:	4601      	mov	r1, r0
 8009364:	4802      	ldr	r0, [pc, #8]	@ (8009370 <strtod+0x10>)
 8009366:	4b03      	ldr	r3, [pc, #12]	@ (8009374 <strtod+0x14>)
 8009368:	6800      	ldr	r0, [r0, #0]
 800936a:	f7ff ba21 	b.w	80087b0 <_strtod_l>
 800936e:	bf00      	nop
 8009370:	200002f8 	.word	0x200002f8
 8009374:	2000018c 	.word	0x2000018c

08009378 <__cvt>:
 8009378:	2b00      	cmp	r3, #0
 800937a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800937e:	461d      	mov	r5, r3
 8009380:	bfbb      	ittet	lt
 8009382:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009386:	461d      	movlt	r5, r3
 8009388:	2300      	movge	r3, #0
 800938a:	232d      	movlt	r3, #45	@ 0x2d
 800938c:	b088      	sub	sp, #32
 800938e:	4614      	mov	r4, r2
 8009390:	bfb8      	it	lt
 8009392:	4614      	movlt	r4, r2
 8009394:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009396:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009398:	7013      	strb	r3, [r2, #0]
 800939a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800939c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80093a0:	f023 0820 	bic.w	r8, r3, #32
 80093a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093a8:	d005      	beq.n	80093b6 <__cvt+0x3e>
 80093aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80093ae:	d100      	bne.n	80093b2 <__cvt+0x3a>
 80093b0:	3601      	adds	r6, #1
 80093b2:	2302      	movs	r3, #2
 80093b4:	e000      	b.n	80093b8 <__cvt+0x40>
 80093b6:	2303      	movs	r3, #3
 80093b8:	aa07      	add	r2, sp, #28
 80093ba:	9204      	str	r2, [sp, #16]
 80093bc:	aa06      	add	r2, sp, #24
 80093be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80093c2:	e9cd 3600 	strd	r3, r6, [sp]
 80093c6:	4622      	mov	r2, r4
 80093c8:	462b      	mov	r3, r5
 80093ca:	f000 ff49 	bl	800a260 <_dtoa_r>
 80093ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80093d2:	4607      	mov	r7, r0
 80093d4:	d119      	bne.n	800940a <__cvt+0x92>
 80093d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093d8:	07db      	lsls	r3, r3, #31
 80093da:	d50e      	bpl.n	80093fa <__cvt+0x82>
 80093dc:	eb00 0906 	add.w	r9, r0, r6
 80093e0:	2200      	movs	r2, #0
 80093e2:	2300      	movs	r3, #0
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 faf6 	bl	80009d8 <__aeabi_dcmpeq>
 80093ec:	b108      	cbz	r0, 80093f2 <__cvt+0x7a>
 80093ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80093f2:	2230      	movs	r2, #48	@ 0x30
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	454b      	cmp	r3, r9
 80093f8:	d31e      	bcc.n	8009438 <__cvt+0xc0>
 80093fa:	4638      	mov	r0, r7
 80093fc:	9b07      	ldr	r3, [sp, #28]
 80093fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009400:	1bdb      	subs	r3, r3, r7
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	b008      	add	sp, #32
 8009406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800940e:	eb00 0906 	add.w	r9, r0, r6
 8009412:	d1e5      	bne.n	80093e0 <__cvt+0x68>
 8009414:	7803      	ldrb	r3, [r0, #0]
 8009416:	2b30      	cmp	r3, #48	@ 0x30
 8009418:	d10a      	bne.n	8009430 <__cvt+0xb8>
 800941a:	2200      	movs	r2, #0
 800941c:	2300      	movs	r3, #0
 800941e:	4620      	mov	r0, r4
 8009420:	4629      	mov	r1, r5
 8009422:	f7f7 fad9 	bl	80009d8 <__aeabi_dcmpeq>
 8009426:	b918      	cbnz	r0, 8009430 <__cvt+0xb8>
 8009428:	f1c6 0601 	rsb	r6, r6, #1
 800942c:	f8ca 6000 	str.w	r6, [sl]
 8009430:	f8da 3000 	ldr.w	r3, [sl]
 8009434:	4499      	add	r9, r3
 8009436:	e7d3      	b.n	80093e0 <__cvt+0x68>
 8009438:	1c59      	adds	r1, r3, #1
 800943a:	9107      	str	r1, [sp, #28]
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	e7d9      	b.n	80093f4 <__cvt+0x7c>

08009440 <__exponent>:
 8009440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009442:	2900      	cmp	r1, #0
 8009444:	bfb6      	itet	lt
 8009446:	232d      	movlt	r3, #45	@ 0x2d
 8009448:	232b      	movge	r3, #43	@ 0x2b
 800944a:	4249      	neglt	r1, r1
 800944c:	2909      	cmp	r1, #9
 800944e:	7002      	strb	r2, [r0, #0]
 8009450:	7043      	strb	r3, [r0, #1]
 8009452:	dd29      	ble.n	80094a8 <__exponent+0x68>
 8009454:	f10d 0307 	add.w	r3, sp, #7
 8009458:	461d      	mov	r5, r3
 800945a:	270a      	movs	r7, #10
 800945c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009460:	461a      	mov	r2, r3
 8009462:	fb07 1416 	mls	r4, r7, r6, r1
 8009466:	3430      	adds	r4, #48	@ 0x30
 8009468:	f802 4c01 	strb.w	r4, [r2, #-1]
 800946c:	460c      	mov	r4, r1
 800946e:	2c63      	cmp	r4, #99	@ 0x63
 8009470:	4631      	mov	r1, r6
 8009472:	f103 33ff 	add.w	r3, r3, #4294967295
 8009476:	dcf1      	bgt.n	800945c <__exponent+0x1c>
 8009478:	3130      	adds	r1, #48	@ 0x30
 800947a:	1e94      	subs	r4, r2, #2
 800947c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009480:	4623      	mov	r3, r4
 8009482:	1c41      	adds	r1, r0, #1
 8009484:	42ab      	cmp	r3, r5
 8009486:	d30a      	bcc.n	800949e <__exponent+0x5e>
 8009488:	f10d 0309 	add.w	r3, sp, #9
 800948c:	1a9b      	subs	r3, r3, r2
 800948e:	42ac      	cmp	r4, r5
 8009490:	bf88      	it	hi
 8009492:	2300      	movhi	r3, #0
 8009494:	3302      	adds	r3, #2
 8009496:	4403      	add	r3, r0
 8009498:	1a18      	subs	r0, r3, r0
 800949a:	b003      	add	sp, #12
 800949c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800949e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80094a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80094a6:	e7ed      	b.n	8009484 <__exponent+0x44>
 80094a8:	2330      	movs	r3, #48	@ 0x30
 80094aa:	3130      	adds	r1, #48	@ 0x30
 80094ac:	7083      	strb	r3, [r0, #2]
 80094ae:	70c1      	strb	r1, [r0, #3]
 80094b0:	1d03      	adds	r3, r0, #4
 80094b2:	e7f1      	b.n	8009498 <__exponent+0x58>

080094b4 <_printf_float>:
 80094b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	b091      	sub	sp, #68	@ 0x44
 80094ba:	460c      	mov	r4, r1
 80094bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80094c0:	4616      	mov	r6, r2
 80094c2:	461f      	mov	r7, r3
 80094c4:	4605      	mov	r5, r0
 80094c6:	f000 fd8b 	bl	8009fe0 <_localeconv_r>
 80094ca:	6803      	ldr	r3, [r0, #0]
 80094cc:	4618      	mov	r0, r3
 80094ce:	9308      	str	r3, [sp, #32]
 80094d0:	f7f6 fe56 	bl	8000180 <strlen>
 80094d4:	2300      	movs	r3, #0
 80094d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80094d8:	f8d8 3000 	ldr.w	r3, [r8]
 80094dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80094de:	3307      	adds	r3, #7
 80094e0:	f023 0307 	bic.w	r3, r3, #7
 80094e4:	f103 0208 	add.w	r2, r3, #8
 80094e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80094ec:	f8d4 b000 	ldr.w	fp, [r4]
 80094f0:	f8c8 2000 	str.w	r2, [r8]
 80094f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80094fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094fe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009502:	f04f 32ff 	mov.w	r2, #4294967295
 8009506:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800950a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800950e:	4b9c      	ldr	r3, [pc, #624]	@ (8009780 <_printf_float+0x2cc>)
 8009510:	f7f7 fa94 	bl	8000a3c <__aeabi_dcmpun>
 8009514:	bb70      	cbnz	r0, 8009574 <_printf_float+0xc0>
 8009516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800951a:	f04f 32ff 	mov.w	r2, #4294967295
 800951e:	4b98      	ldr	r3, [pc, #608]	@ (8009780 <_printf_float+0x2cc>)
 8009520:	f7f7 fa6e 	bl	8000a00 <__aeabi_dcmple>
 8009524:	bb30      	cbnz	r0, 8009574 <_printf_float+0xc0>
 8009526:	2200      	movs	r2, #0
 8009528:	2300      	movs	r3, #0
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	f7f7 fa5d 	bl	80009ec <__aeabi_dcmplt>
 8009532:	b110      	cbz	r0, 800953a <_printf_float+0x86>
 8009534:	232d      	movs	r3, #45	@ 0x2d
 8009536:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800953a:	4a92      	ldr	r2, [pc, #584]	@ (8009784 <_printf_float+0x2d0>)
 800953c:	4b92      	ldr	r3, [pc, #584]	@ (8009788 <_printf_float+0x2d4>)
 800953e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009542:	bf94      	ite	ls
 8009544:	4690      	movls	r8, r2
 8009546:	4698      	movhi	r8, r3
 8009548:	2303      	movs	r3, #3
 800954a:	f04f 0900 	mov.w	r9, #0
 800954e:	6123      	str	r3, [r4, #16]
 8009550:	f02b 0304 	bic.w	r3, fp, #4
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	4633      	mov	r3, r6
 8009558:	4621      	mov	r1, r4
 800955a:	4628      	mov	r0, r5
 800955c:	9700      	str	r7, [sp, #0]
 800955e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009560:	f000 f9d4 	bl	800990c <_printf_common>
 8009564:	3001      	adds	r0, #1
 8009566:	f040 8090 	bne.w	800968a <_printf_float+0x1d6>
 800956a:	f04f 30ff 	mov.w	r0, #4294967295
 800956e:	b011      	add	sp, #68	@ 0x44
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	4642      	mov	r2, r8
 8009576:	464b      	mov	r3, r9
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	f7f7 fa5e 	bl	8000a3c <__aeabi_dcmpun>
 8009580:	b148      	cbz	r0, 8009596 <_printf_float+0xe2>
 8009582:	464b      	mov	r3, r9
 8009584:	2b00      	cmp	r3, #0
 8009586:	bfb8      	it	lt
 8009588:	232d      	movlt	r3, #45	@ 0x2d
 800958a:	4a80      	ldr	r2, [pc, #512]	@ (800978c <_printf_float+0x2d8>)
 800958c:	bfb8      	it	lt
 800958e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009592:	4b7f      	ldr	r3, [pc, #508]	@ (8009790 <_printf_float+0x2dc>)
 8009594:	e7d3      	b.n	800953e <_printf_float+0x8a>
 8009596:	6863      	ldr	r3, [r4, #4]
 8009598:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	d13f      	bne.n	8009620 <_printf_float+0x16c>
 80095a0:	2306      	movs	r3, #6
 80095a2:	6063      	str	r3, [r4, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	9206      	str	r2, [sp, #24]
 80095ae:	aa0e      	add	r2, sp, #56	@ 0x38
 80095b0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80095b4:	aa0d      	add	r2, sp, #52	@ 0x34
 80095b6:	9203      	str	r2, [sp, #12]
 80095b8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80095bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80095c0:	6863      	ldr	r3, [r4, #4]
 80095c2:	4642      	mov	r2, r8
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	4628      	mov	r0, r5
 80095c8:	464b      	mov	r3, r9
 80095ca:	910a      	str	r1, [sp, #40]	@ 0x28
 80095cc:	f7ff fed4 	bl	8009378 <__cvt>
 80095d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80095d2:	4680      	mov	r8, r0
 80095d4:	2947      	cmp	r1, #71	@ 0x47
 80095d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80095d8:	d128      	bne.n	800962c <_printf_float+0x178>
 80095da:	1cc8      	adds	r0, r1, #3
 80095dc:	db02      	blt.n	80095e4 <_printf_float+0x130>
 80095de:	6863      	ldr	r3, [r4, #4]
 80095e0:	4299      	cmp	r1, r3
 80095e2:	dd40      	ble.n	8009666 <_printf_float+0x1b2>
 80095e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80095e8:	fa5f fa8a 	uxtb.w	sl, sl
 80095ec:	4652      	mov	r2, sl
 80095ee:	3901      	subs	r1, #1
 80095f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80095f4:	910d      	str	r1, [sp, #52]	@ 0x34
 80095f6:	f7ff ff23 	bl	8009440 <__exponent>
 80095fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095fc:	4681      	mov	r9, r0
 80095fe:	1813      	adds	r3, r2, r0
 8009600:	2a01      	cmp	r2, #1
 8009602:	6123      	str	r3, [r4, #16]
 8009604:	dc02      	bgt.n	800960c <_printf_float+0x158>
 8009606:	6822      	ldr	r2, [r4, #0]
 8009608:	07d2      	lsls	r2, r2, #31
 800960a:	d501      	bpl.n	8009610 <_printf_float+0x15c>
 800960c:	3301      	adds	r3, #1
 800960e:	6123      	str	r3, [r4, #16]
 8009610:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009614:	2b00      	cmp	r3, #0
 8009616:	d09e      	beq.n	8009556 <_printf_float+0xa2>
 8009618:	232d      	movs	r3, #45	@ 0x2d
 800961a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800961e:	e79a      	b.n	8009556 <_printf_float+0xa2>
 8009620:	2947      	cmp	r1, #71	@ 0x47
 8009622:	d1bf      	bne.n	80095a4 <_printf_float+0xf0>
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1bd      	bne.n	80095a4 <_printf_float+0xf0>
 8009628:	2301      	movs	r3, #1
 800962a:	e7ba      	b.n	80095a2 <_printf_float+0xee>
 800962c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009630:	d9dc      	bls.n	80095ec <_printf_float+0x138>
 8009632:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009636:	d118      	bne.n	800966a <_printf_float+0x1b6>
 8009638:	2900      	cmp	r1, #0
 800963a:	6863      	ldr	r3, [r4, #4]
 800963c:	dd0b      	ble.n	8009656 <_printf_float+0x1a2>
 800963e:	6121      	str	r1, [r4, #16]
 8009640:	b913      	cbnz	r3, 8009648 <_printf_float+0x194>
 8009642:	6822      	ldr	r2, [r4, #0]
 8009644:	07d0      	lsls	r0, r2, #31
 8009646:	d502      	bpl.n	800964e <_printf_float+0x19a>
 8009648:	3301      	adds	r3, #1
 800964a:	440b      	add	r3, r1
 800964c:	6123      	str	r3, [r4, #16]
 800964e:	f04f 0900 	mov.w	r9, #0
 8009652:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009654:	e7dc      	b.n	8009610 <_printf_float+0x15c>
 8009656:	b913      	cbnz	r3, 800965e <_printf_float+0x1aa>
 8009658:	6822      	ldr	r2, [r4, #0]
 800965a:	07d2      	lsls	r2, r2, #31
 800965c:	d501      	bpl.n	8009662 <_printf_float+0x1ae>
 800965e:	3302      	adds	r3, #2
 8009660:	e7f4      	b.n	800964c <_printf_float+0x198>
 8009662:	2301      	movs	r3, #1
 8009664:	e7f2      	b.n	800964c <_printf_float+0x198>
 8009666:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800966a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800966c:	4299      	cmp	r1, r3
 800966e:	db05      	blt.n	800967c <_printf_float+0x1c8>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	6121      	str	r1, [r4, #16]
 8009674:	07d8      	lsls	r0, r3, #31
 8009676:	d5ea      	bpl.n	800964e <_printf_float+0x19a>
 8009678:	1c4b      	adds	r3, r1, #1
 800967a:	e7e7      	b.n	800964c <_printf_float+0x198>
 800967c:	2900      	cmp	r1, #0
 800967e:	bfcc      	ite	gt
 8009680:	2201      	movgt	r2, #1
 8009682:	f1c1 0202 	rsble	r2, r1, #2
 8009686:	4413      	add	r3, r2
 8009688:	e7e0      	b.n	800964c <_printf_float+0x198>
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	055a      	lsls	r2, r3, #21
 800968e:	d407      	bmi.n	80096a0 <_printf_float+0x1ec>
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	4642      	mov	r2, r8
 8009694:	4631      	mov	r1, r6
 8009696:	4628      	mov	r0, r5
 8009698:	47b8      	blx	r7
 800969a:	3001      	adds	r0, #1
 800969c:	d12b      	bne.n	80096f6 <_printf_float+0x242>
 800969e:	e764      	b.n	800956a <_printf_float+0xb6>
 80096a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80096a4:	f240 80dc 	bls.w	8009860 <_printf_float+0x3ac>
 80096a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096ac:	2200      	movs	r2, #0
 80096ae:	2300      	movs	r3, #0
 80096b0:	f7f7 f992 	bl	80009d8 <__aeabi_dcmpeq>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d033      	beq.n	8009720 <_printf_float+0x26c>
 80096b8:	2301      	movs	r3, #1
 80096ba:	4631      	mov	r1, r6
 80096bc:	4628      	mov	r0, r5
 80096be:	4a35      	ldr	r2, [pc, #212]	@ (8009794 <_printf_float+0x2e0>)
 80096c0:	47b8      	blx	r7
 80096c2:	3001      	adds	r0, #1
 80096c4:	f43f af51 	beq.w	800956a <_printf_float+0xb6>
 80096c8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80096cc:	4543      	cmp	r3, r8
 80096ce:	db02      	blt.n	80096d6 <_printf_float+0x222>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	07d8      	lsls	r0, r3, #31
 80096d4:	d50f      	bpl.n	80096f6 <_printf_float+0x242>
 80096d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096da:	4631      	mov	r1, r6
 80096dc:	4628      	mov	r0, r5
 80096de:	47b8      	blx	r7
 80096e0:	3001      	adds	r0, #1
 80096e2:	f43f af42 	beq.w	800956a <_printf_float+0xb6>
 80096e6:	f04f 0900 	mov.w	r9, #0
 80096ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80096ee:	f104 0a1a 	add.w	sl, r4, #26
 80096f2:	45c8      	cmp	r8, r9
 80096f4:	dc09      	bgt.n	800970a <_printf_float+0x256>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	079b      	lsls	r3, r3, #30
 80096fa:	f100 8102 	bmi.w	8009902 <_printf_float+0x44e>
 80096fe:	68e0      	ldr	r0, [r4, #12]
 8009700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009702:	4298      	cmp	r0, r3
 8009704:	bfb8      	it	lt
 8009706:	4618      	movlt	r0, r3
 8009708:	e731      	b.n	800956e <_printf_float+0xba>
 800970a:	2301      	movs	r3, #1
 800970c:	4652      	mov	r2, sl
 800970e:	4631      	mov	r1, r6
 8009710:	4628      	mov	r0, r5
 8009712:	47b8      	blx	r7
 8009714:	3001      	adds	r0, #1
 8009716:	f43f af28 	beq.w	800956a <_printf_float+0xb6>
 800971a:	f109 0901 	add.w	r9, r9, #1
 800971e:	e7e8      	b.n	80096f2 <_printf_float+0x23e>
 8009720:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009722:	2b00      	cmp	r3, #0
 8009724:	dc38      	bgt.n	8009798 <_printf_float+0x2e4>
 8009726:	2301      	movs	r3, #1
 8009728:	4631      	mov	r1, r6
 800972a:	4628      	mov	r0, r5
 800972c:	4a19      	ldr	r2, [pc, #100]	@ (8009794 <_printf_float+0x2e0>)
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	f43f af1a 	beq.w	800956a <_printf_float+0xb6>
 8009736:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800973a:	ea59 0303 	orrs.w	r3, r9, r3
 800973e:	d102      	bne.n	8009746 <_printf_float+0x292>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	07d9      	lsls	r1, r3, #31
 8009744:	d5d7      	bpl.n	80096f6 <_printf_float+0x242>
 8009746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800974a:	4631      	mov	r1, r6
 800974c:	4628      	mov	r0, r5
 800974e:	47b8      	blx	r7
 8009750:	3001      	adds	r0, #1
 8009752:	f43f af0a 	beq.w	800956a <_printf_float+0xb6>
 8009756:	f04f 0a00 	mov.w	sl, #0
 800975a:	f104 0b1a 	add.w	fp, r4, #26
 800975e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009760:	425b      	negs	r3, r3
 8009762:	4553      	cmp	r3, sl
 8009764:	dc01      	bgt.n	800976a <_printf_float+0x2b6>
 8009766:	464b      	mov	r3, r9
 8009768:	e793      	b.n	8009692 <_printf_float+0x1de>
 800976a:	2301      	movs	r3, #1
 800976c:	465a      	mov	r2, fp
 800976e:	4631      	mov	r1, r6
 8009770:	4628      	mov	r0, r5
 8009772:	47b8      	blx	r7
 8009774:	3001      	adds	r0, #1
 8009776:	f43f aef8 	beq.w	800956a <_printf_float+0xb6>
 800977a:	f10a 0a01 	add.w	sl, sl, #1
 800977e:	e7ee      	b.n	800975e <_printf_float+0x2aa>
 8009780:	7fefffff 	.word	0x7fefffff
 8009784:	0800cb70 	.word	0x0800cb70
 8009788:	0800cb74 	.word	0x0800cb74
 800978c:	0800cb78 	.word	0x0800cb78
 8009790:	0800cb7c 	.word	0x0800cb7c
 8009794:	0800cb80 	.word	0x0800cb80
 8009798:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800979a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800979e:	4553      	cmp	r3, sl
 80097a0:	bfa8      	it	ge
 80097a2:	4653      	movge	r3, sl
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	4699      	mov	r9, r3
 80097a8:	dc36      	bgt.n	8009818 <_printf_float+0x364>
 80097aa:	f04f 0b00 	mov.w	fp, #0
 80097ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097b2:	f104 021a 	add.w	r2, r4, #26
 80097b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80097ba:	eba3 0309 	sub.w	r3, r3, r9
 80097be:	455b      	cmp	r3, fp
 80097c0:	dc31      	bgt.n	8009826 <_printf_float+0x372>
 80097c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097c4:	459a      	cmp	sl, r3
 80097c6:	dc3a      	bgt.n	800983e <_printf_float+0x38a>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	07da      	lsls	r2, r3, #31
 80097cc:	d437      	bmi.n	800983e <_printf_float+0x38a>
 80097ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097d0:	ebaa 0903 	sub.w	r9, sl, r3
 80097d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097d6:	ebaa 0303 	sub.w	r3, sl, r3
 80097da:	4599      	cmp	r9, r3
 80097dc:	bfa8      	it	ge
 80097de:	4699      	movge	r9, r3
 80097e0:	f1b9 0f00 	cmp.w	r9, #0
 80097e4:	dc33      	bgt.n	800984e <_printf_float+0x39a>
 80097e6:	f04f 0800 	mov.w	r8, #0
 80097ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097ee:	f104 0b1a 	add.w	fp, r4, #26
 80097f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097f4:	ebaa 0303 	sub.w	r3, sl, r3
 80097f8:	eba3 0309 	sub.w	r3, r3, r9
 80097fc:	4543      	cmp	r3, r8
 80097fe:	f77f af7a 	ble.w	80096f6 <_printf_float+0x242>
 8009802:	2301      	movs	r3, #1
 8009804:	465a      	mov	r2, fp
 8009806:	4631      	mov	r1, r6
 8009808:	4628      	mov	r0, r5
 800980a:	47b8      	blx	r7
 800980c:	3001      	adds	r0, #1
 800980e:	f43f aeac 	beq.w	800956a <_printf_float+0xb6>
 8009812:	f108 0801 	add.w	r8, r8, #1
 8009816:	e7ec      	b.n	80097f2 <_printf_float+0x33e>
 8009818:	4642      	mov	r2, r8
 800981a:	4631      	mov	r1, r6
 800981c:	4628      	mov	r0, r5
 800981e:	47b8      	blx	r7
 8009820:	3001      	adds	r0, #1
 8009822:	d1c2      	bne.n	80097aa <_printf_float+0x2f6>
 8009824:	e6a1      	b.n	800956a <_printf_float+0xb6>
 8009826:	2301      	movs	r3, #1
 8009828:	4631      	mov	r1, r6
 800982a:	4628      	mov	r0, r5
 800982c:	920a      	str	r2, [sp, #40]	@ 0x28
 800982e:	47b8      	blx	r7
 8009830:	3001      	adds	r0, #1
 8009832:	f43f ae9a 	beq.w	800956a <_printf_float+0xb6>
 8009836:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009838:	f10b 0b01 	add.w	fp, fp, #1
 800983c:	e7bb      	b.n	80097b6 <_printf_float+0x302>
 800983e:	4631      	mov	r1, r6
 8009840:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009844:	4628      	mov	r0, r5
 8009846:	47b8      	blx	r7
 8009848:	3001      	adds	r0, #1
 800984a:	d1c0      	bne.n	80097ce <_printf_float+0x31a>
 800984c:	e68d      	b.n	800956a <_printf_float+0xb6>
 800984e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009850:	464b      	mov	r3, r9
 8009852:	4631      	mov	r1, r6
 8009854:	4628      	mov	r0, r5
 8009856:	4442      	add	r2, r8
 8009858:	47b8      	blx	r7
 800985a:	3001      	adds	r0, #1
 800985c:	d1c3      	bne.n	80097e6 <_printf_float+0x332>
 800985e:	e684      	b.n	800956a <_printf_float+0xb6>
 8009860:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009864:	f1ba 0f01 	cmp.w	sl, #1
 8009868:	dc01      	bgt.n	800986e <_printf_float+0x3ba>
 800986a:	07db      	lsls	r3, r3, #31
 800986c:	d536      	bpl.n	80098dc <_printf_float+0x428>
 800986e:	2301      	movs	r3, #1
 8009870:	4642      	mov	r2, r8
 8009872:	4631      	mov	r1, r6
 8009874:	4628      	mov	r0, r5
 8009876:	47b8      	blx	r7
 8009878:	3001      	adds	r0, #1
 800987a:	f43f ae76 	beq.w	800956a <_printf_float+0xb6>
 800987e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009882:	4631      	mov	r1, r6
 8009884:	4628      	mov	r0, r5
 8009886:	47b8      	blx	r7
 8009888:	3001      	adds	r0, #1
 800988a:	f43f ae6e 	beq.w	800956a <_printf_float+0xb6>
 800988e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009892:	2200      	movs	r2, #0
 8009894:	2300      	movs	r3, #0
 8009896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800989a:	f7f7 f89d 	bl	80009d8 <__aeabi_dcmpeq>
 800989e:	b9c0      	cbnz	r0, 80098d2 <_printf_float+0x41e>
 80098a0:	4653      	mov	r3, sl
 80098a2:	f108 0201 	add.w	r2, r8, #1
 80098a6:	4631      	mov	r1, r6
 80098a8:	4628      	mov	r0, r5
 80098aa:	47b8      	blx	r7
 80098ac:	3001      	adds	r0, #1
 80098ae:	d10c      	bne.n	80098ca <_printf_float+0x416>
 80098b0:	e65b      	b.n	800956a <_printf_float+0xb6>
 80098b2:	2301      	movs	r3, #1
 80098b4:	465a      	mov	r2, fp
 80098b6:	4631      	mov	r1, r6
 80098b8:	4628      	mov	r0, r5
 80098ba:	47b8      	blx	r7
 80098bc:	3001      	adds	r0, #1
 80098be:	f43f ae54 	beq.w	800956a <_printf_float+0xb6>
 80098c2:	f108 0801 	add.w	r8, r8, #1
 80098c6:	45d0      	cmp	r8, sl
 80098c8:	dbf3      	blt.n	80098b2 <_printf_float+0x3fe>
 80098ca:	464b      	mov	r3, r9
 80098cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80098d0:	e6e0      	b.n	8009694 <_printf_float+0x1e0>
 80098d2:	f04f 0800 	mov.w	r8, #0
 80098d6:	f104 0b1a 	add.w	fp, r4, #26
 80098da:	e7f4      	b.n	80098c6 <_printf_float+0x412>
 80098dc:	2301      	movs	r3, #1
 80098de:	4642      	mov	r2, r8
 80098e0:	e7e1      	b.n	80098a6 <_printf_float+0x3f2>
 80098e2:	2301      	movs	r3, #1
 80098e4:	464a      	mov	r2, r9
 80098e6:	4631      	mov	r1, r6
 80098e8:	4628      	mov	r0, r5
 80098ea:	47b8      	blx	r7
 80098ec:	3001      	adds	r0, #1
 80098ee:	f43f ae3c 	beq.w	800956a <_printf_float+0xb6>
 80098f2:	f108 0801 	add.w	r8, r8, #1
 80098f6:	68e3      	ldr	r3, [r4, #12]
 80098f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098fa:	1a5b      	subs	r3, r3, r1
 80098fc:	4543      	cmp	r3, r8
 80098fe:	dcf0      	bgt.n	80098e2 <_printf_float+0x42e>
 8009900:	e6fd      	b.n	80096fe <_printf_float+0x24a>
 8009902:	f04f 0800 	mov.w	r8, #0
 8009906:	f104 0919 	add.w	r9, r4, #25
 800990a:	e7f4      	b.n	80098f6 <_printf_float+0x442>

0800990c <_printf_common>:
 800990c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009910:	4616      	mov	r6, r2
 8009912:	4698      	mov	r8, r3
 8009914:	688a      	ldr	r2, [r1, #8]
 8009916:	690b      	ldr	r3, [r1, #16]
 8009918:	4607      	mov	r7, r0
 800991a:	4293      	cmp	r3, r2
 800991c:	bfb8      	it	lt
 800991e:	4613      	movlt	r3, r2
 8009920:	6033      	str	r3, [r6, #0]
 8009922:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009926:	460c      	mov	r4, r1
 8009928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800992c:	b10a      	cbz	r2, 8009932 <_printf_common+0x26>
 800992e:	3301      	adds	r3, #1
 8009930:	6033      	str	r3, [r6, #0]
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	0699      	lsls	r1, r3, #26
 8009936:	bf42      	ittt	mi
 8009938:	6833      	ldrmi	r3, [r6, #0]
 800993a:	3302      	addmi	r3, #2
 800993c:	6033      	strmi	r3, [r6, #0]
 800993e:	6825      	ldr	r5, [r4, #0]
 8009940:	f015 0506 	ands.w	r5, r5, #6
 8009944:	d106      	bne.n	8009954 <_printf_common+0x48>
 8009946:	f104 0a19 	add.w	sl, r4, #25
 800994a:	68e3      	ldr	r3, [r4, #12]
 800994c:	6832      	ldr	r2, [r6, #0]
 800994e:	1a9b      	subs	r3, r3, r2
 8009950:	42ab      	cmp	r3, r5
 8009952:	dc2b      	bgt.n	80099ac <_printf_common+0xa0>
 8009954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009958:	6822      	ldr	r2, [r4, #0]
 800995a:	3b00      	subs	r3, #0
 800995c:	bf18      	it	ne
 800995e:	2301      	movne	r3, #1
 8009960:	0692      	lsls	r2, r2, #26
 8009962:	d430      	bmi.n	80099c6 <_printf_common+0xba>
 8009964:	4641      	mov	r1, r8
 8009966:	4638      	mov	r0, r7
 8009968:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800996c:	47c8      	blx	r9
 800996e:	3001      	adds	r0, #1
 8009970:	d023      	beq.n	80099ba <_printf_common+0xae>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	6922      	ldr	r2, [r4, #16]
 8009976:	f003 0306 	and.w	r3, r3, #6
 800997a:	2b04      	cmp	r3, #4
 800997c:	bf14      	ite	ne
 800997e:	2500      	movne	r5, #0
 8009980:	6833      	ldreq	r3, [r6, #0]
 8009982:	f04f 0600 	mov.w	r6, #0
 8009986:	bf08      	it	eq
 8009988:	68e5      	ldreq	r5, [r4, #12]
 800998a:	f104 041a 	add.w	r4, r4, #26
 800998e:	bf08      	it	eq
 8009990:	1aed      	subeq	r5, r5, r3
 8009992:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009996:	bf08      	it	eq
 8009998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800999c:	4293      	cmp	r3, r2
 800999e:	bfc4      	itt	gt
 80099a0:	1a9b      	subgt	r3, r3, r2
 80099a2:	18ed      	addgt	r5, r5, r3
 80099a4:	42b5      	cmp	r5, r6
 80099a6:	d11a      	bne.n	80099de <_printf_common+0xd2>
 80099a8:	2000      	movs	r0, #0
 80099aa:	e008      	b.n	80099be <_printf_common+0xb2>
 80099ac:	2301      	movs	r3, #1
 80099ae:	4652      	mov	r2, sl
 80099b0:	4641      	mov	r1, r8
 80099b2:	4638      	mov	r0, r7
 80099b4:	47c8      	blx	r9
 80099b6:	3001      	adds	r0, #1
 80099b8:	d103      	bne.n	80099c2 <_printf_common+0xb6>
 80099ba:	f04f 30ff 	mov.w	r0, #4294967295
 80099be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c2:	3501      	adds	r5, #1
 80099c4:	e7c1      	b.n	800994a <_printf_common+0x3e>
 80099c6:	2030      	movs	r0, #48	@ 0x30
 80099c8:	18e1      	adds	r1, r4, r3
 80099ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099d4:	4422      	add	r2, r4
 80099d6:	3302      	adds	r3, #2
 80099d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099dc:	e7c2      	b.n	8009964 <_printf_common+0x58>
 80099de:	2301      	movs	r3, #1
 80099e0:	4622      	mov	r2, r4
 80099e2:	4641      	mov	r1, r8
 80099e4:	4638      	mov	r0, r7
 80099e6:	47c8      	blx	r9
 80099e8:	3001      	adds	r0, #1
 80099ea:	d0e6      	beq.n	80099ba <_printf_common+0xae>
 80099ec:	3601      	adds	r6, #1
 80099ee:	e7d9      	b.n	80099a4 <_printf_common+0x98>

080099f0 <_printf_i>:
 80099f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f4:	7e0f      	ldrb	r7, [r1, #24]
 80099f6:	4691      	mov	r9, r2
 80099f8:	2f78      	cmp	r7, #120	@ 0x78
 80099fa:	4680      	mov	r8, r0
 80099fc:	460c      	mov	r4, r1
 80099fe:	469a      	mov	sl, r3
 8009a00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a06:	d807      	bhi.n	8009a18 <_printf_i+0x28>
 8009a08:	2f62      	cmp	r7, #98	@ 0x62
 8009a0a:	d80a      	bhi.n	8009a22 <_printf_i+0x32>
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	f000 80d3 	beq.w	8009bb8 <_printf_i+0x1c8>
 8009a12:	2f58      	cmp	r7, #88	@ 0x58
 8009a14:	f000 80ba 	beq.w	8009b8c <_printf_i+0x19c>
 8009a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a20:	e03a      	b.n	8009a98 <_printf_i+0xa8>
 8009a22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a26:	2b15      	cmp	r3, #21
 8009a28:	d8f6      	bhi.n	8009a18 <_printf_i+0x28>
 8009a2a:	a101      	add	r1, pc, #4	@ (adr r1, 8009a30 <_printf_i+0x40>)
 8009a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a30:	08009a89 	.word	0x08009a89
 8009a34:	08009a9d 	.word	0x08009a9d
 8009a38:	08009a19 	.word	0x08009a19
 8009a3c:	08009a19 	.word	0x08009a19
 8009a40:	08009a19 	.word	0x08009a19
 8009a44:	08009a19 	.word	0x08009a19
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	08009a19 	.word	0x08009a19
 8009a50:	08009a19 	.word	0x08009a19
 8009a54:	08009a19 	.word	0x08009a19
 8009a58:	08009a19 	.word	0x08009a19
 8009a5c:	08009b9f 	.word	0x08009b9f
 8009a60:	08009ac7 	.word	0x08009ac7
 8009a64:	08009b59 	.word	0x08009b59
 8009a68:	08009a19 	.word	0x08009a19
 8009a6c:	08009a19 	.word	0x08009a19
 8009a70:	08009bc1 	.word	0x08009bc1
 8009a74:	08009a19 	.word	0x08009a19
 8009a78:	08009ac7 	.word	0x08009ac7
 8009a7c:	08009a19 	.word	0x08009a19
 8009a80:	08009a19 	.word	0x08009a19
 8009a84:	08009b61 	.word	0x08009b61
 8009a88:	6833      	ldr	r3, [r6, #0]
 8009a8a:	1d1a      	adds	r2, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6032      	str	r2, [r6, #0]
 8009a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e09e      	b.n	8009bda <_printf_i+0x1ea>
 8009a9c:	6833      	ldr	r3, [r6, #0]
 8009a9e:	6820      	ldr	r0, [r4, #0]
 8009aa0:	1d19      	adds	r1, r3, #4
 8009aa2:	6031      	str	r1, [r6, #0]
 8009aa4:	0606      	lsls	r6, r0, #24
 8009aa6:	d501      	bpl.n	8009aac <_printf_i+0xbc>
 8009aa8:	681d      	ldr	r5, [r3, #0]
 8009aaa:	e003      	b.n	8009ab4 <_printf_i+0xc4>
 8009aac:	0645      	lsls	r5, r0, #25
 8009aae:	d5fb      	bpl.n	8009aa8 <_printf_i+0xb8>
 8009ab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	da03      	bge.n	8009ac0 <_printf_i+0xd0>
 8009ab8:	232d      	movs	r3, #45	@ 0x2d
 8009aba:	426d      	negs	r5, r5
 8009abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ac0:	230a      	movs	r3, #10
 8009ac2:	4859      	ldr	r0, [pc, #356]	@ (8009c28 <_printf_i+0x238>)
 8009ac4:	e011      	b.n	8009aea <_printf_i+0xfa>
 8009ac6:	6821      	ldr	r1, [r4, #0]
 8009ac8:	6833      	ldr	r3, [r6, #0]
 8009aca:	0608      	lsls	r0, r1, #24
 8009acc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ad0:	d402      	bmi.n	8009ad8 <_printf_i+0xe8>
 8009ad2:	0649      	lsls	r1, r1, #25
 8009ad4:	bf48      	it	mi
 8009ad6:	b2ad      	uxthmi	r5, r5
 8009ad8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ada:	6033      	str	r3, [r6, #0]
 8009adc:	bf14      	ite	ne
 8009ade:	230a      	movne	r3, #10
 8009ae0:	2308      	moveq	r3, #8
 8009ae2:	4851      	ldr	r0, [pc, #324]	@ (8009c28 <_printf_i+0x238>)
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009aea:	6866      	ldr	r6, [r4, #4]
 8009aec:	2e00      	cmp	r6, #0
 8009aee:	bfa8      	it	ge
 8009af0:	6821      	ldrge	r1, [r4, #0]
 8009af2:	60a6      	str	r6, [r4, #8]
 8009af4:	bfa4      	itt	ge
 8009af6:	f021 0104 	bicge.w	r1, r1, #4
 8009afa:	6021      	strge	r1, [r4, #0]
 8009afc:	b90d      	cbnz	r5, 8009b02 <_printf_i+0x112>
 8009afe:	2e00      	cmp	r6, #0
 8009b00:	d04b      	beq.n	8009b9a <_printf_i+0x1aa>
 8009b02:	4616      	mov	r6, r2
 8009b04:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b08:	fb03 5711 	mls	r7, r3, r1, r5
 8009b0c:	5dc7      	ldrb	r7, [r0, r7]
 8009b0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b12:	462f      	mov	r7, r5
 8009b14:	42bb      	cmp	r3, r7
 8009b16:	460d      	mov	r5, r1
 8009b18:	d9f4      	bls.n	8009b04 <_printf_i+0x114>
 8009b1a:	2b08      	cmp	r3, #8
 8009b1c:	d10b      	bne.n	8009b36 <_printf_i+0x146>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	07df      	lsls	r7, r3, #31
 8009b22:	d508      	bpl.n	8009b36 <_printf_i+0x146>
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	6861      	ldr	r1, [r4, #4]
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	bfde      	ittt	le
 8009b2c:	2330      	movle	r3, #48	@ 0x30
 8009b2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b36:	1b92      	subs	r2, r2, r6
 8009b38:	6122      	str	r2, [r4, #16]
 8009b3a:	464b      	mov	r3, r9
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	4640      	mov	r0, r8
 8009b40:	f8cd a000 	str.w	sl, [sp]
 8009b44:	aa03      	add	r2, sp, #12
 8009b46:	f7ff fee1 	bl	800990c <_printf_common>
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d14a      	bne.n	8009be4 <_printf_i+0x1f4>
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	b004      	add	sp, #16
 8009b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	f043 0320 	orr.w	r3, r3, #32
 8009b5e:	6023      	str	r3, [r4, #0]
 8009b60:	2778      	movs	r7, #120	@ 0x78
 8009b62:	4832      	ldr	r0, [pc, #200]	@ (8009c2c <_printf_i+0x23c>)
 8009b64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	6831      	ldr	r1, [r6, #0]
 8009b6c:	061f      	lsls	r7, r3, #24
 8009b6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b72:	d402      	bmi.n	8009b7a <_printf_i+0x18a>
 8009b74:	065f      	lsls	r7, r3, #25
 8009b76:	bf48      	it	mi
 8009b78:	b2ad      	uxthmi	r5, r5
 8009b7a:	6031      	str	r1, [r6, #0]
 8009b7c:	07d9      	lsls	r1, r3, #31
 8009b7e:	bf44      	itt	mi
 8009b80:	f043 0320 	orrmi.w	r3, r3, #32
 8009b84:	6023      	strmi	r3, [r4, #0]
 8009b86:	b11d      	cbz	r5, 8009b90 <_printf_i+0x1a0>
 8009b88:	2310      	movs	r3, #16
 8009b8a:	e7ab      	b.n	8009ae4 <_printf_i+0xf4>
 8009b8c:	4826      	ldr	r0, [pc, #152]	@ (8009c28 <_printf_i+0x238>)
 8009b8e:	e7e9      	b.n	8009b64 <_printf_i+0x174>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	f023 0320 	bic.w	r3, r3, #32
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	e7f6      	b.n	8009b88 <_printf_i+0x198>
 8009b9a:	4616      	mov	r6, r2
 8009b9c:	e7bd      	b.n	8009b1a <_printf_i+0x12a>
 8009b9e:	6833      	ldr	r3, [r6, #0]
 8009ba0:	6825      	ldr	r5, [r4, #0]
 8009ba2:	1d18      	adds	r0, r3, #4
 8009ba4:	6961      	ldr	r1, [r4, #20]
 8009ba6:	6030      	str	r0, [r6, #0]
 8009ba8:	062e      	lsls	r6, r5, #24
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	d501      	bpl.n	8009bb2 <_printf_i+0x1c2>
 8009bae:	6019      	str	r1, [r3, #0]
 8009bb0:	e002      	b.n	8009bb8 <_printf_i+0x1c8>
 8009bb2:	0668      	lsls	r0, r5, #25
 8009bb4:	d5fb      	bpl.n	8009bae <_printf_i+0x1be>
 8009bb6:	8019      	strh	r1, [r3, #0]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4616      	mov	r6, r2
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	e7bc      	b.n	8009b3a <_printf_i+0x14a>
 8009bc0:	6833      	ldr	r3, [r6, #0]
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	1d1a      	adds	r2, r3, #4
 8009bc6:	6032      	str	r2, [r6, #0]
 8009bc8:	681e      	ldr	r6, [r3, #0]
 8009bca:	6862      	ldr	r2, [r4, #4]
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f000 fa7e 	bl	800a0ce <memchr>
 8009bd2:	b108      	cbz	r0, 8009bd8 <_printf_i+0x1e8>
 8009bd4:	1b80      	subs	r0, r0, r6
 8009bd6:	6060      	str	r0, [r4, #4]
 8009bd8:	6863      	ldr	r3, [r4, #4]
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009be2:	e7aa      	b.n	8009b3a <_printf_i+0x14a>
 8009be4:	4632      	mov	r2, r6
 8009be6:	4649      	mov	r1, r9
 8009be8:	4640      	mov	r0, r8
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	47d0      	blx	sl
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d0ad      	beq.n	8009b4e <_printf_i+0x15e>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	079b      	lsls	r3, r3, #30
 8009bf6:	d413      	bmi.n	8009c20 <_printf_i+0x230>
 8009bf8:	68e0      	ldr	r0, [r4, #12]
 8009bfa:	9b03      	ldr	r3, [sp, #12]
 8009bfc:	4298      	cmp	r0, r3
 8009bfe:	bfb8      	it	lt
 8009c00:	4618      	movlt	r0, r3
 8009c02:	e7a6      	b.n	8009b52 <_printf_i+0x162>
 8009c04:	2301      	movs	r3, #1
 8009c06:	4632      	mov	r2, r6
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	47d0      	blx	sl
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d09d      	beq.n	8009b4e <_printf_i+0x15e>
 8009c12:	3501      	adds	r5, #1
 8009c14:	68e3      	ldr	r3, [r4, #12]
 8009c16:	9903      	ldr	r1, [sp, #12]
 8009c18:	1a5b      	subs	r3, r3, r1
 8009c1a:	42ab      	cmp	r3, r5
 8009c1c:	dcf2      	bgt.n	8009c04 <_printf_i+0x214>
 8009c1e:	e7eb      	b.n	8009bf8 <_printf_i+0x208>
 8009c20:	2500      	movs	r5, #0
 8009c22:	f104 0619 	add.w	r6, r4, #25
 8009c26:	e7f5      	b.n	8009c14 <_printf_i+0x224>
 8009c28:	0800cb82 	.word	0x0800cb82
 8009c2c:	0800cb93 	.word	0x0800cb93

08009c30 <std>:
 8009c30:	2300      	movs	r3, #0
 8009c32:	b510      	push	{r4, lr}
 8009c34:	4604      	mov	r4, r0
 8009c36:	e9c0 3300 	strd	r3, r3, [r0]
 8009c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c3e:	6083      	str	r3, [r0, #8]
 8009c40:	8181      	strh	r1, [r0, #12]
 8009c42:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c44:	81c2      	strh	r2, [r0, #14]
 8009c46:	6183      	str	r3, [r0, #24]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	2208      	movs	r2, #8
 8009c4c:	305c      	adds	r0, #92	@ 0x5c
 8009c4e:	f000 f928 	bl	8009ea2 <memset>
 8009c52:	4b0d      	ldr	r3, [pc, #52]	@ (8009c88 <std+0x58>)
 8009c54:	6224      	str	r4, [r4, #32]
 8009c56:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c58:	4b0c      	ldr	r3, [pc, #48]	@ (8009c8c <std+0x5c>)
 8009c5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c90 <std+0x60>)
 8009c5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c60:	4b0c      	ldr	r3, [pc, #48]	@ (8009c94 <std+0x64>)
 8009c62:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c64:	4b0c      	ldr	r3, [pc, #48]	@ (8009c98 <std+0x68>)
 8009c66:	429c      	cmp	r4, r3
 8009c68:	d006      	beq.n	8009c78 <std+0x48>
 8009c6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c6e:	4294      	cmp	r4, r2
 8009c70:	d002      	beq.n	8009c78 <std+0x48>
 8009c72:	33d0      	adds	r3, #208	@ 0xd0
 8009c74:	429c      	cmp	r4, r3
 8009c76:	d105      	bne.n	8009c84 <std+0x54>
 8009c78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c80:	f000 ba22 	b.w	800a0c8 <__retarget_lock_init_recursive>
 8009c84:	bd10      	pop	{r4, pc}
 8009c86:	bf00      	nop
 8009c88:	08009e1d 	.word	0x08009e1d
 8009c8c:	08009e3f 	.word	0x08009e3f
 8009c90:	08009e77 	.word	0x08009e77
 8009c94:	08009e9b 	.word	0x08009e9b
 8009c98:	20000e28 	.word	0x20000e28

08009c9c <stdio_exit_handler>:
 8009c9c:	4a02      	ldr	r2, [pc, #8]	@ (8009ca8 <stdio_exit_handler+0xc>)
 8009c9e:	4903      	ldr	r1, [pc, #12]	@ (8009cac <stdio_exit_handler+0x10>)
 8009ca0:	4803      	ldr	r0, [pc, #12]	@ (8009cb0 <stdio_exit_handler+0x14>)
 8009ca2:	f000 b869 	b.w	8009d78 <_fwalk_sglue>
 8009ca6:	bf00      	nop
 8009ca8:	20000180 	.word	0x20000180
 8009cac:	0800c399 	.word	0x0800c399
 8009cb0:	200002fc 	.word	0x200002fc

08009cb4 <cleanup_stdio>:
 8009cb4:	6841      	ldr	r1, [r0, #4]
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce8 <cleanup_stdio+0x34>)
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	4299      	cmp	r1, r3
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	d001      	beq.n	8009cc4 <cleanup_stdio+0x10>
 8009cc0:	f002 fb6a 	bl	800c398 <_fflush_r>
 8009cc4:	68a1      	ldr	r1, [r4, #8]
 8009cc6:	4b09      	ldr	r3, [pc, #36]	@ (8009cec <cleanup_stdio+0x38>)
 8009cc8:	4299      	cmp	r1, r3
 8009cca:	d002      	beq.n	8009cd2 <cleanup_stdio+0x1e>
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f002 fb63 	bl	800c398 <_fflush_r>
 8009cd2:	68e1      	ldr	r1, [r4, #12]
 8009cd4:	4b06      	ldr	r3, [pc, #24]	@ (8009cf0 <cleanup_stdio+0x3c>)
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	d004      	beq.n	8009ce4 <cleanup_stdio+0x30>
 8009cda:	4620      	mov	r0, r4
 8009cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce0:	f002 bb5a 	b.w	800c398 <_fflush_r>
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000e28 	.word	0x20000e28
 8009cec:	20000e90 	.word	0x20000e90
 8009cf0:	20000ef8 	.word	0x20000ef8

08009cf4 <global_stdio_init.part.0>:
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d24 <global_stdio_init.part.0+0x30>)
 8009cf8:	4c0b      	ldr	r4, [pc, #44]	@ (8009d28 <global_stdio_init.part.0+0x34>)
 8009cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8009d2c <global_stdio_init.part.0+0x38>)
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	2104      	movs	r1, #4
 8009d02:	2200      	movs	r2, #0
 8009d04:	f7ff ff94 	bl	8009c30 <std>
 8009d08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	2109      	movs	r1, #9
 8009d10:	f7ff ff8e 	bl	8009c30 <std>
 8009d14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d18:	2202      	movs	r2, #2
 8009d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d1e:	2112      	movs	r1, #18
 8009d20:	f7ff bf86 	b.w	8009c30 <std>
 8009d24:	20000f60 	.word	0x20000f60
 8009d28:	20000e28 	.word	0x20000e28
 8009d2c:	08009c9d 	.word	0x08009c9d

08009d30 <__sfp_lock_acquire>:
 8009d30:	4801      	ldr	r0, [pc, #4]	@ (8009d38 <__sfp_lock_acquire+0x8>)
 8009d32:	f000 b9ca 	b.w	800a0ca <__retarget_lock_acquire_recursive>
 8009d36:	bf00      	nop
 8009d38:	20000f69 	.word	0x20000f69

08009d3c <__sfp_lock_release>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	@ (8009d44 <__sfp_lock_release+0x8>)
 8009d3e:	f000 b9c5 	b.w	800a0cc <__retarget_lock_release_recursive>
 8009d42:	bf00      	nop
 8009d44:	20000f69 	.word	0x20000f69

08009d48 <__sinit>:
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	f7ff fff0 	bl	8009d30 <__sfp_lock_acquire>
 8009d50:	6a23      	ldr	r3, [r4, #32]
 8009d52:	b11b      	cbz	r3, 8009d5c <__sinit+0x14>
 8009d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d58:	f7ff bff0 	b.w	8009d3c <__sfp_lock_release>
 8009d5c:	4b04      	ldr	r3, [pc, #16]	@ (8009d70 <__sinit+0x28>)
 8009d5e:	6223      	str	r3, [r4, #32]
 8009d60:	4b04      	ldr	r3, [pc, #16]	@ (8009d74 <__sinit+0x2c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1f5      	bne.n	8009d54 <__sinit+0xc>
 8009d68:	f7ff ffc4 	bl	8009cf4 <global_stdio_init.part.0>
 8009d6c:	e7f2      	b.n	8009d54 <__sinit+0xc>
 8009d6e:	bf00      	nop
 8009d70:	08009cb5 	.word	0x08009cb5
 8009d74:	20000f60 	.word	0x20000f60

08009d78 <_fwalk_sglue>:
 8009d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	4688      	mov	r8, r1
 8009d80:	4614      	mov	r4, r2
 8009d82:	2600      	movs	r6, #0
 8009d84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d88:	f1b9 0901 	subs.w	r9, r9, #1
 8009d8c:	d505      	bpl.n	8009d9a <_fwalk_sglue+0x22>
 8009d8e:	6824      	ldr	r4, [r4, #0]
 8009d90:	2c00      	cmp	r4, #0
 8009d92:	d1f7      	bne.n	8009d84 <_fwalk_sglue+0xc>
 8009d94:	4630      	mov	r0, r6
 8009d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d9a:	89ab      	ldrh	r3, [r5, #12]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d907      	bls.n	8009db0 <_fwalk_sglue+0x38>
 8009da0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009da4:	3301      	adds	r3, #1
 8009da6:	d003      	beq.n	8009db0 <_fwalk_sglue+0x38>
 8009da8:	4629      	mov	r1, r5
 8009daa:	4638      	mov	r0, r7
 8009dac:	47c0      	blx	r8
 8009dae:	4306      	orrs	r6, r0
 8009db0:	3568      	adds	r5, #104	@ 0x68
 8009db2:	e7e9      	b.n	8009d88 <_fwalk_sglue+0x10>

08009db4 <sniprintf>:
 8009db4:	b40c      	push	{r2, r3}
 8009db6:	b530      	push	{r4, r5, lr}
 8009db8:	4b17      	ldr	r3, [pc, #92]	@ (8009e18 <sniprintf+0x64>)
 8009dba:	1e0c      	subs	r4, r1, #0
 8009dbc:	681d      	ldr	r5, [r3, #0]
 8009dbe:	b09d      	sub	sp, #116	@ 0x74
 8009dc0:	da08      	bge.n	8009dd4 <sniprintf+0x20>
 8009dc2:	238b      	movs	r3, #139	@ 0x8b
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc8:	602b      	str	r3, [r5, #0]
 8009dca:	b01d      	add	sp, #116	@ 0x74
 8009dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dd0:	b002      	add	sp, #8
 8009dd2:	4770      	bx	lr
 8009dd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009dd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009ddc:	bf0c      	ite	eq
 8009dde:	4623      	moveq	r3, r4
 8009de0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	9307      	str	r3, [sp, #28]
 8009de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009dec:	9002      	str	r0, [sp, #8]
 8009dee:	9006      	str	r0, [sp, #24]
 8009df0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009df4:	4628      	mov	r0, r5
 8009df6:	ab21      	add	r3, sp, #132	@ 0x84
 8009df8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009dfa:	a902      	add	r1, sp, #8
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	f002 f94f 	bl	800c0a0 <_svfiprintf_r>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	bfbc      	itt	lt
 8009e06:	238b      	movlt	r3, #139	@ 0x8b
 8009e08:	602b      	strlt	r3, [r5, #0]
 8009e0a:	2c00      	cmp	r4, #0
 8009e0c:	d0dd      	beq.n	8009dca <sniprintf+0x16>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	9b02      	ldr	r3, [sp, #8]
 8009e12:	701a      	strb	r2, [r3, #0]
 8009e14:	e7d9      	b.n	8009dca <sniprintf+0x16>
 8009e16:	bf00      	nop
 8009e18:	200002f8 	.word	0x200002f8

08009e1c <__sread>:
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	460c      	mov	r4, r1
 8009e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e24:	f000 f902 	bl	800a02c <_read_r>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	bfab      	itete	ge
 8009e2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e30:	181b      	addge	r3, r3, r0
 8009e32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e36:	bfac      	ite	ge
 8009e38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e3a:	81a3      	strhlt	r3, [r4, #12]
 8009e3c:	bd10      	pop	{r4, pc}

08009e3e <__swrite>:
 8009e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e42:	461f      	mov	r7, r3
 8009e44:	898b      	ldrh	r3, [r1, #12]
 8009e46:	4605      	mov	r5, r0
 8009e48:	05db      	lsls	r3, r3, #23
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	4616      	mov	r6, r2
 8009e4e:	d505      	bpl.n	8009e5c <__swrite+0x1e>
 8009e50:	2302      	movs	r3, #2
 8009e52:	2200      	movs	r2, #0
 8009e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e58:	f000 f8d6 	bl	800a008 <_lseek_r>
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	4632      	mov	r2, r6
 8009e60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	4628      	mov	r0, r5
 8009e68:	463b      	mov	r3, r7
 8009e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e72:	f000 b8ed 	b.w	800a050 <_write_r>

08009e76 <__sseek>:
 8009e76:	b510      	push	{r4, lr}
 8009e78:	460c      	mov	r4, r1
 8009e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7e:	f000 f8c3 	bl	800a008 <_lseek_r>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	bf15      	itete	ne
 8009e88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e92:	81a3      	strheq	r3, [r4, #12]
 8009e94:	bf18      	it	ne
 8009e96:	81a3      	strhne	r3, [r4, #12]
 8009e98:	bd10      	pop	{r4, pc}

08009e9a <__sclose>:
 8009e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9e:	f000 b8a3 	b.w	8009fe8 <_close_r>

08009ea2 <memset>:
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4402      	add	r2, r0
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d100      	bne.n	8009eac <memset+0xa>
 8009eaa:	4770      	bx	lr
 8009eac:	f803 1b01 	strb.w	r1, [r3], #1
 8009eb0:	e7f9      	b.n	8009ea6 <memset+0x4>

08009eb2 <strncmp>:
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	b16a      	cbz	r2, 8009ed2 <strncmp+0x20>
 8009eb6:	3901      	subs	r1, #1
 8009eb8:	1884      	adds	r4, r0, r2
 8009eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ebe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d103      	bne.n	8009ece <strncmp+0x1c>
 8009ec6:	42a0      	cmp	r0, r4
 8009ec8:	d001      	beq.n	8009ece <strncmp+0x1c>
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	d1f5      	bne.n	8009eba <strncmp+0x8>
 8009ece:	1ad0      	subs	r0, r2, r3
 8009ed0:	bd10      	pop	{r4, pc}
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	e7fc      	b.n	8009ed0 <strncmp+0x1e>

08009ed6 <strncpy>:
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	3901      	subs	r1, #1
 8009edc:	b132      	cbz	r2, 8009eec <strncpy+0x16>
 8009ede:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ee2:	3a01      	subs	r2, #1
 8009ee4:	f803 4b01 	strb.w	r4, [r3], #1
 8009ee8:	2c00      	cmp	r4, #0
 8009eea:	d1f7      	bne.n	8009edc <strncpy+0x6>
 8009eec:	2100      	movs	r1, #0
 8009eee:	441a      	add	r2, r3
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d100      	bne.n	8009ef6 <strncpy+0x20>
 8009ef4:	bd10      	pop	{r4, pc}
 8009ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8009efa:	e7f9      	b.n	8009ef0 <strncpy+0x1a>

08009efc <strtok>:
 8009efc:	4b16      	ldr	r3, [pc, #88]	@ (8009f58 <strtok+0x5c>)
 8009efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f02:	681f      	ldr	r7, [r3, #0]
 8009f04:	4605      	mov	r5, r0
 8009f06:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009f08:	460e      	mov	r6, r1
 8009f0a:	b9ec      	cbnz	r4, 8009f48 <strtok+0x4c>
 8009f0c:	2050      	movs	r0, #80	@ 0x50
 8009f0e:	f001 faf1 	bl	800b4f4 <malloc>
 8009f12:	4602      	mov	r2, r0
 8009f14:	6478      	str	r0, [r7, #68]	@ 0x44
 8009f16:	b920      	cbnz	r0, 8009f22 <strtok+0x26>
 8009f18:	215b      	movs	r1, #91	@ 0x5b
 8009f1a:	4b10      	ldr	r3, [pc, #64]	@ (8009f5c <strtok+0x60>)
 8009f1c:	4810      	ldr	r0, [pc, #64]	@ (8009f60 <strtok+0x64>)
 8009f1e:	f000 f8f9 	bl	800a114 <__assert_func>
 8009f22:	e9c0 4400 	strd	r4, r4, [r0]
 8009f26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009f2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009f2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009f32:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009f36:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009f3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009f3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009f42:	6184      	str	r4, [r0, #24]
 8009f44:	7704      	strb	r4, [r0, #28]
 8009f46:	6244      	str	r4, [r0, #36]	@ 0x24
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f54:	f000 b806 	b.w	8009f64 <__strtok_r>
 8009f58:	200002f8 	.word	0x200002f8
 8009f5c:	0800cba4 	.word	0x0800cba4
 8009f60:	0800cbbb 	.word	0x0800cbbb

08009f64 <__strtok_r>:
 8009f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f66:	4604      	mov	r4, r0
 8009f68:	b908      	cbnz	r0, 8009f6e <__strtok_r+0xa>
 8009f6a:	6814      	ldr	r4, [r2, #0]
 8009f6c:	b144      	cbz	r4, 8009f80 <__strtok_r+0x1c>
 8009f6e:	460f      	mov	r7, r1
 8009f70:	4620      	mov	r0, r4
 8009f72:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009f76:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009f7a:	b91e      	cbnz	r6, 8009f84 <__strtok_r+0x20>
 8009f7c:	b965      	cbnz	r5, 8009f98 <__strtok_r+0x34>
 8009f7e:	6015      	str	r5, [r2, #0]
 8009f80:	2000      	movs	r0, #0
 8009f82:	e005      	b.n	8009f90 <__strtok_r+0x2c>
 8009f84:	42b5      	cmp	r5, r6
 8009f86:	d1f6      	bne.n	8009f76 <__strtok_r+0x12>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1f0      	bne.n	8009f6e <__strtok_r+0xa>
 8009f8c:	6014      	str	r4, [r2, #0]
 8009f8e:	7003      	strb	r3, [r0, #0]
 8009f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f92:	461c      	mov	r4, r3
 8009f94:	e00c      	b.n	8009fb0 <__strtok_r+0x4c>
 8009f96:	b915      	cbnz	r5, 8009f9e <__strtok_r+0x3a>
 8009f98:	460e      	mov	r6, r1
 8009f9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009fa2:	42ab      	cmp	r3, r5
 8009fa4:	d1f7      	bne.n	8009f96 <__strtok_r+0x32>
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0f3      	beq.n	8009f92 <__strtok_r+0x2e>
 8009faa:	2300      	movs	r3, #0
 8009fac:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009fb0:	6014      	str	r4, [r2, #0]
 8009fb2:	e7ed      	b.n	8009f90 <__strtok_r+0x2c>

08009fb4 <strstr>:
 8009fb4:	780a      	ldrb	r2, [r1, #0]
 8009fb6:	b570      	push	{r4, r5, r6, lr}
 8009fb8:	b96a      	cbnz	r2, 8009fd6 <strstr+0x22>
 8009fba:	bd70      	pop	{r4, r5, r6, pc}
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d109      	bne.n	8009fd4 <strstr+0x20>
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d0f6      	beq.n	8009fba <strstr+0x6>
 8009fcc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009fd0:	429e      	cmp	r6, r3
 8009fd2:	d0f7      	beq.n	8009fc4 <strstr+0x10>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	7803      	ldrb	r3, [r0, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1ef      	bne.n	8009fbc <strstr+0x8>
 8009fdc:	4618      	mov	r0, r3
 8009fde:	e7ec      	b.n	8009fba <strstr+0x6>

08009fe0 <_localeconv_r>:
 8009fe0:	4800      	ldr	r0, [pc, #0]	@ (8009fe4 <_localeconv_r+0x4>)
 8009fe2:	4770      	bx	lr
 8009fe4:	2000027c 	.word	0x2000027c

08009fe8 <_close_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	2300      	movs	r3, #0
 8009fec:	4d05      	ldr	r5, [pc, #20]	@ (800a004 <_close_r+0x1c>)
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	f7f8 ff3f 	bl	8002e76 <_close>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_close_r+0x1a>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_close_r+0x1a>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	20000f64 	.word	0x20000f64

0800a008 <_lseek_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	2200      	movs	r2, #0
 800a012:	4d05      	ldr	r5, [pc, #20]	@ (800a028 <_lseek_r+0x20>)
 800a014:	602a      	str	r2, [r5, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	f7f8 ff51 	bl	8002ebe <_lseek>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	d102      	bne.n	800a026 <_lseek_r+0x1e>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	b103      	cbz	r3, 800a026 <_lseek_r+0x1e>
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	20000f64 	.word	0x20000f64

0800a02c <_read_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	4611      	mov	r1, r2
 800a034:	2200      	movs	r2, #0
 800a036:	4d05      	ldr	r5, [pc, #20]	@ (800a04c <_read_r+0x20>)
 800a038:	602a      	str	r2, [r5, #0]
 800a03a:	461a      	mov	r2, r3
 800a03c:	f7f8 fee2 	bl	8002e04 <_read>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d102      	bne.n	800a04a <_read_r+0x1e>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	b103      	cbz	r3, 800a04a <_read_r+0x1e>
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	bd38      	pop	{r3, r4, r5, pc}
 800a04c:	20000f64 	.word	0x20000f64

0800a050 <_write_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4604      	mov	r4, r0
 800a054:	4608      	mov	r0, r1
 800a056:	4611      	mov	r1, r2
 800a058:	2200      	movs	r2, #0
 800a05a:	4d05      	ldr	r5, [pc, #20]	@ (800a070 <_write_r+0x20>)
 800a05c:	602a      	str	r2, [r5, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	f7f8 feed 	bl	8002e3e <_write>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d102      	bne.n	800a06e <_write_r+0x1e>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	b103      	cbz	r3, 800a06e <_write_r+0x1e>
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	20000f64 	.word	0x20000f64

0800a074 <__errno>:
 800a074:	4b01      	ldr	r3, [pc, #4]	@ (800a07c <__errno+0x8>)
 800a076:	6818      	ldr	r0, [r3, #0]
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	200002f8 	.word	0x200002f8

0800a080 <__libc_init_array>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	2600      	movs	r6, #0
 800a084:	4d0c      	ldr	r5, [pc, #48]	@ (800a0b8 <__libc_init_array+0x38>)
 800a086:	4c0d      	ldr	r4, [pc, #52]	@ (800a0bc <__libc_init_array+0x3c>)
 800a088:	1b64      	subs	r4, r4, r5
 800a08a:	10a4      	asrs	r4, r4, #2
 800a08c:	42a6      	cmp	r6, r4
 800a08e:	d109      	bne.n	800a0a4 <__libc_init_array+0x24>
 800a090:	f002 fcd2 	bl	800ca38 <_init>
 800a094:	2600      	movs	r6, #0
 800a096:	4d0a      	ldr	r5, [pc, #40]	@ (800a0c0 <__libc_init_array+0x40>)
 800a098:	4c0a      	ldr	r4, [pc, #40]	@ (800a0c4 <__libc_init_array+0x44>)
 800a09a:	1b64      	subs	r4, r4, r5
 800a09c:	10a4      	asrs	r4, r4, #2
 800a09e:	42a6      	cmp	r6, r4
 800a0a0:	d105      	bne.n	800a0ae <__libc_init_array+0x2e>
 800a0a2:	bd70      	pop	{r4, r5, r6, pc}
 800a0a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a8:	4798      	blx	r3
 800a0aa:	3601      	adds	r6, #1
 800a0ac:	e7ee      	b.n	800a08c <__libc_init_array+0xc>
 800a0ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b2:	4798      	blx	r3
 800a0b4:	3601      	adds	r6, #1
 800a0b6:	e7f2      	b.n	800a09e <__libc_init_array+0x1e>
 800a0b8:	0800cfa4 	.word	0x0800cfa4
 800a0bc:	0800cfa4 	.word	0x0800cfa4
 800a0c0:	0800cfa4 	.word	0x0800cfa4
 800a0c4:	0800cfa8 	.word	0x0800cfa8

0800a0c8 <__retarget_lock_init_recursive>:
 800a0c8:	4770      	bx	lr

0800a0ca <__retarget_lock_acquire_recursive>:
 800a0ca:	4770      	bx	lr

0800a0cc <__retarget_lock_release_recursive>:
 800a0cc:	4770      	bx	lr

0800a0ce <memchr>:
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	b2c9      	uxtb	r1, r1
 800a0d4:	4402      	add	r2, r0
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	4618      	mov	r0, r3
 800a0da:	d101      	bne.n	800a0e0 <memchr+0x12>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e003      	b.n	800a0e8 <memchr+0x1a>
 800a0e0:	7804      	ldrb	r4, [r0, #0]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	428c      	cmp	r4, r1
 800a0e6:	d1f6      	bne.n	800a0d6 <memchr+0x8>
 800a0e8:	bd10      	pop	{r4, pc}

0800a0ea <memcpy>:
 800a0ea:	440a      	add	r2, r1
 800a0ec:	4291      	cmp	r1, r2
 800a0ee:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0f2:	d100      	bne.n	800a0f6 <memcpy+0xc>
 800a0f4:	4770      	bx	lr
 800a0f6:	b510      	push	{r4, lr}
 800a0f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0fc:	4291      	cmp	r1, r2
 800a0fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a102:	d1f9      	bne.n	800a0f8 <memcpy+0xe>
 800a104:	bd10      	pop	{r4, pc}
	...

0800a108 <nan>:
 800a108:	2000      	movs	r0, #0
 800a10a:	4901      	ldr	r1, [pc, #4]	@ (800a110 <nan+0x8>)
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	7ff80000 	.word	0x7ff80000

0800a114 <__assert_func>:
 800a114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a116:	4614      	mov	r4, r2
 800a118:	461a      	mov	r2, r3
 800a11a:	4b09      	ldr	r3, [pc, #36]	@ (800a140 <__assert_func+0x2c>)
 800a11c:	4605      	mov	r5, r0
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68d8      	ldr	r0, [r3, #12]
 800a122:	b954      	cbnz	r4, 800a13a <__assert_func+0x26>
 800a124:	4b07      	ldr	r3, [pc, #28]	@ (800a144 <__assert_func+0x30>)
 800a126:	461c      	mov	r4, r3
 800a128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a12c:	9100      	str	r1, [sp, #0]
 800a12e:	462b      	mov	r3, r5
 800a130:	4905      	ldr	r1, [pc, #20]	@ (800a148 <__assert_func+0x34>)
 800a132:	f002 f959 	bl	800c3e8 <fiprintf>
 800a136:	f002 f993 	bl	800c460 <abort>
 800a13a:	4b04      	ldr	r3, [pc, #16]	@ (800a14c <__assert_func+0x38>)
 800a13c:	e7f4      	b.n	800a128 <__assert_func+0x14>
 800a13e:	bf00      	nop
 800a140:	200002f8 	.word	0x200002f8
 800a144:	0800cc58 	.word	0x0800cc58
 800a148:	0800cc2a 	.word	0x0800cc2a
 800a14c:	0800cc1d 	.word	0x0800cc1d

0800a150 <quorem>:
 800a150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	6903      	ldr	r3, [r0, #16]
 800a156:	690c      	ldr	r4, [r1, #16]
 800a158:	4607      	mov	r7, r0
 800a15a:	42a3      	cmp	r3, r4
 800a15c:	db7e      	blt.n	800a25c <quorem+0x10c>
 800a15e:	3c01      	subs	r4, #1
 800a160:	00a3      	lsls	r3, r4, #2
 800a162:	f100 0514 	add.w	r5, r0, #20
 800a166:	f101 0814 	add.w	r8, r1, #20
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a17a:	3301      	adds	r3, #1
 800a17c:	429a      	cmp	r2, r3
 800a17e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a182:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a186:	d32e      	bcc.n	800a1e6 <quorem+0x96>
 800a188:	f04f 0a00 	mov.w	sl, #0
 800a18c:	46c4      	mov	ip, r8
 800a18e:	46ae      	mov	lr, r5
 800a190:	46d3      	mov	fp, sl
 800a192:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a196:	b298      	uxth	r0, r3
 800a198:	fb06 a000 	mla	r0, r6, r0, sl
 800a19c:	0c1b      	lsrs	r3, r3, #16
 800a19e:	0c02      	lsrs	r2, r0, #16
 800a1a0:	fb06 2303 	mla	r3, r6, r3, r2
 800a1a4:	f8de 2000 	ldr.w	r2, [lr]
 800a1a8:	b280      	uxth	r0, r0
 800a1aa:	b292      	uxth	r2, r2
 800a1ac:	1a12      	subs	r2, r2, r0
 800a1ae:	445a      	add	r2, fp
 800a1b0:	f8de 0000 	ldr.w	r0, [lr]
 800a1b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1c8:	45e1      	cmp	r9, ip
 800a1ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1ce:	f84e 2b04 	str.w	r2, [lr], #4
 800a1d2:	d2de      	bcs.n	800a192 <quorem+0x42>
 800a1d4:	9b00      	ldr	r3, [sp, #0]
 800a1d6:	58eb      	ldr	r3, [r5, r3]
 800a1d8:	b92b      	cbnz	r3, 800a1e6 <quorem+0x96>
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	3b04      	subs	r3, #4
 800a1de:	429d      	cmp	r5, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	d32f      	bcc.n	800a244 <quorem+0xf4>
 800a1e4:	613c      	str	r4, [r7, #16]
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f001 fd0e 	bl	800bc08 <__mcmp>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	db25      	blt.n	800a23c <quorem+0xec>
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1f8:	f8d1 c000 	ldr.w	ip, [r1]
 800a1fc:	fa1f fe82 	uxth.w	lr, r2
 800a200:	fa1f f38c 	uxth.w	r3, ip
 800a204:	eba3 030e 	sub.w	r3, r3, lr
 800a208:	4403      	add	r3, r0
 800a20a:	0c12      	lsrs	r2, r2, #16
 800a20c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a210:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a214:	b29b      	uxth	r3, r3
 800a216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a21a:	45c1      	cmp	r9, r8
 800a21c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a220:	f841 3b04 	str.w	r3, [r1], #4
 800a224:	d2e6      	bcs.n	800a1f4 <quorem+0xa4>
 800a226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a22e:	b922      	cbnz	r2, 800a23a <quorem+0xea>
 800a230:	3b04      	subs	r3, #4
 800a232:	429d      	cmp	r5, r3
 800a234:	461a      	mov	r2, r3
 800a236:	d30b      	bcc.n	800a250 <quorem+0x100>
 800a238:	613c      	str	r4, [r7, #16]
 800a23a:	3601      	adds	r6, #1
 800a23c:	4630      	mov	r0, r6
 800a23e:	b003      	add	sp, #12
 800a240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a244:	6812      	ldr	r2, [r2, #0]
 800a246:	3b04      	subs	r3, #4
 800a248:	2a00      	cmp	r2, #0
 800a24a:	d1cb      	bne.n	800a1e4 <quorem+0x94>
 800a24c:	3c01      	subs	r4, #1
 800a24e:	e7c6      	b.n	800a1de <quorem+0x8e>
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	3b04      	subs	r3, #4
 800a254:	2a00      	cmp	r2, #0
 800a256:	d1ef      	bne.n	800a238 <quorem+0xe8>
 800a258:	3c01      	subs	r4, #1
 800a25a:	e7ea      	b.n	800a232 <quorem+0xe2>
 800a25c:	2000      	movs	r0, #0
 800a25e:	e7ee      	b.n	800a23e <quorem+0xee>

0800a260 <_dtoa_r>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	4614      	mov	r4, r2
 800a266:	461d      	mov	r5, r3
 800a268:	69c7      	ldr	r7, [r0, #28]
 800a26a:	b097      	sub	sp, #92	@ 0x5c
 800a26c:	4683      	mov	fp, r0
 800a26e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a272:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a274:	b97f      	cbnz	r7, 800a296 <_dtoa_r+0x36>
 800a276:	2010      	movs	r0, #16
 800a278:	f001 f93c 	bl	800b4f4 <malloc>
 800a27c:	4602      	mov	r2, r0
 800a27e:	f8cb 001c 	str.w	r0, [fp, #28]
 800a282:	b920      	cbnz	r0, 800a28e <_dtoa_r+0x2e>
 800a284:	21ef      	movs	r1, #239	@ 0xef
 800a286:	4ba8      	ldr	r3, [pc, #672]	@ (800a528 <_dtoa_r+0x2c8>)
 800a288:	48a8      	ldr	r0, [pc, #672]	@ (800a52c <_dtoa_r+0x2cc>)
 800a28a:	f7ff ff43 	bl	800a114 <__assert_func>
 800a28e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a292:	6007      	str	r7, [r0, #0]
 800a294:	60c7      	str	r7, [r0, #12]
 800a296:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a29a:	6819      	ldr	r1, [r3, #0]
 800a29c:	b159      	cbz	r1, 800a2b6 <_dtoa_r+0x56>
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4093      	lsls	r3, r2
 800a2a4:	604a      	str	r2, [r1, #4]
 800a2a6:	608b      	str	r3, [r1, #8]
 800a2a8:	4658      	mov	r0, fp
 800a2aa:	f001 fa2b 	bl	800b704 <_Bfree>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	1e2b      	subs	r3, r5, #0
 800a2b8:	bfaf      	iteee	ge
 800a2ba:	2300      	movge	r3, #0
 800a2bc:	2201      	movlt	r2, #1
 800a2be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2c2:	9303      	strlt	r3, [sp, #12]
 800a2c4:	bfa8      	it	ge
 800a2c6:	6033      	strge	r3, [r6, #0]
 800a2c8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a2cc:	4b98      	ldr	r3, [pc, #608]	@ (800a530 <_dtoa_r+0x2d0>)
 800a2ce:	bfb8      	it	lt
 800a2d0:	6032      	strlt	r2, [r6, #0]
 800a2d2:	ea33 0308 	bics.w	r3, r3, r8
 800a2d6:	d112      	bne.n	800a2fe <_dtoa_r+0x9e>
 800a2d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a2dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a2e4:	4323      	orrs	r3, r4
 800a2e6:	f000 8550 	beq.w	800ad8a <_dtoa_r+0xb2a>
 800a2ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a2ec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a534 <_dtoa_r+0x2d4>
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 8552 	beq.w	800ad9a <_dtoa_r+0xb3a>
 800a2f6:	f10a 0303 	add.w	r3, sl, #3
 800a2fa:	f000 bd4c 	b.w	800ad96 <_dtoa_r+0xb36>
 800a2fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a302:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a30a:	2200      	movs	r2, #0
 800a30c:	2300      	movs	r3, #0
 800a30e:	f7f6 fb63 	bl	80009d8 <__aeabi_dcmpeq>
 800a312:	4607      	mov	r7, r0
 800a314:	b158      	cbz	r0, 800a32e <_dtoa_r+0xce>
 800a316:	2301      	movs	r3, #1
 800a318:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a31e:	b113      	cbz	r3, 800a326 <_dtoa_r+0xc6>
 800a320:	4b85      	ldr	r3, [pc, #532]	@ (800a538 <_dtoa_r+0x2d8>)
 800a322:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a53c <_dtoa_r+0x2dc>
 800a32a:	f000 bd36 	b.w	800ad9a <_dtoa_r+0xb3a>
 800a32e:	ab14      	add	r3, sp, #80	@ 0x50
 800a330:	9301      	str	r3, [sp, #4]
 800a332:	ab15      	add	r3, sp, #84	@ 0x54
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	4658      	mov	r0, fp
 800a338:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a33c:	f001 fd7c 	bl	800be38 <__d2b>
 800a340:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a344:	4681      	mov	r9, r0
 800a346:	2e00      	cmp	r6, #0
 800a348:	d077      	beq.n	800a43a <_dtoa_r+0x1da>
 800a34a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a34e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a350:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a358:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a35c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a360:	9712      	str	r7, [sp, #72]	@ 0x48
 800a362:	4619      	mov	r1, r3
 800a364:	2200      	movs	r2, #0
 800a366:	4b76      	ldr	r3, [pc, #472]	@ (800a540 <_dtoa_r+0x2e0>)
 800a368:	f7f5 ff16 	bl	8000198 <__aeabi_dsub>
 800a36c:	a368      	add	r3, pc, #416	@ (adr r3, 800a510 <_dtoa_r+0x2b0>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f6 f8c9 	bl	8000508 <__aeabi_dmul>
 800a376:	a368      	add	r3, pc, #416	@ (adr r3, 800a518 <_dtoa_r+0x2b8>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f7f5 ff0e 	bl	800019c <__adddf3>
 800a380:	4604      	mov	r4, r0
 800a382:	4630      	mov	r0, r6
 800a384:	460d      	mov	r5, r1
 800a386:	f7f6 f855 	bl	8000434 <__aeabi_i2d>
 800a38a:	a365      	add	r3, pc, #404	@ (adr r3, 800a520 <_dtoa_r+0x2c0>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f6 f8ba 	bl	8000508 <__aeabi_dmul>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4620      	mov	r0, r4
 800a39a:	4629      	mov	r1, r5
 800a39c:	f7f5 fefe 	bl	800019c <__adddf3>
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	f7f6 fb60 	bl	8000a68 <__aeabi_d2iz>
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	4607      	mov	r7, r0
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f6 fb1b 	bl	80009ec <__aeabi_dcmplt>
 800a3b6:	b140      	cbz	r0, 800a3ca <_dtoa_r+0x16a>
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7f6 f83b 	bl	8000434 <__aeabi_i2d>
 800a3be:	4622      	mov	r2, r4
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	f7f6 fb09 	bl	80009d8 <__aeabi_dcmpeq>
 800a3c6:	b900      	cbnz	r0, 800a3ca <_dtoa_r+0x16a>
 800a3c8:	3f01      	subs	r7, #1
 800a3ca:	2f16      	cmp	r7, #22
 800a3cc:	d853      	bhi.n	800a476 <_dtoa_r+0x216>
 800a3ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3d2:	4b5c      	ldr	r3, [pc, #368]	@ (800a544 <_dtoa_r+0x2e4>)
 800a3d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f7f6 fb06 	bl	80009ec <__aeabi_dcmplt>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d04a      	beq.n	800a47a <_dtoa_r+0x21a>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	3f01      	subs	r7, #1
 800a3e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a3ec:	1b9b      	subs	r3, r3, r6
 800a3ee:	1e5a      	subs	r2, r3, #1
 800a3f0:	bf46      	itte	mi
 800a3f2:	f1c3 0801 	rsbmi	r8, r3, #1
 800a3f6:	2300      	movmi	r3, #0
 800a3f8:	f04f 0800 	movpl.w	r8, #0
 800a3fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3fe:	bf48      	it	mi
 800a400:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a402:	2f00      	cmp	r7, #0
 800a404:	db3b      	blt.n	800a47e <_dtoa_r+0x21e>
 800a406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a408:	970e      	str	r7, [sp, #56]	@ 0x38
 800a40a:	443b      	add	r3, r7
 800a40c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a40e:	2300      	movs	r3, #0
 800a410:	930a      	str	r3, [sp, #40]	@ 0x28
 800a412:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a414:	2b09      	cmp	r3, #9
 800a416:	d866      	bhi.n	800a4e6 <_dtoa_r+0x286>
 800a418:	2b05      	cmp	r3, #5
 800a41a:	bfc4      	itt	gt
 800a41c:	3b04      	subgt	r3, #4
 800a41e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a420:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a422:	bfc8      	it	gt
 800a424:	2400      	movgt	r4, #0
 800a426:	f1a3 0302 	sub.w	r3, r3, #2
 800a42a:	bfd8      	it	le
 800a42c:	2401      	movle	r4, #1
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d864      	bhi.n	800a4fc <_dtoa_r+0x29c>
 800a432:	e8df f003 	tbb	[pc, r3]
 800a436:	382b      	.short	0x382b
 800a438:	5636      	.short	0x5636
 800a43a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a43e:	441e      	add	r6, r3
 800a440:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a444:	2b20      	cmp	r3, #32
 800a446:	bfc1      	itttt	gt
 800a448:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a44c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a450:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a454:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a458:	bfd6      	itet	le
 800a45a:	f1c3 0320 	rsble	r3, r3, #32
 800a45e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a462:	fa04 f003 	lslle.w	r0, r4, r3
 800a466:	f7f5 ffd5 	bl	8000414 <__aeabi_ui2d>
 800a46a:	2201      	movs	r2, #1
 800a46c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a470:	3e01      	subs	r6, #1
 800a472:	9212      	str	r2, [sp, #72]	@ 0x48
 800a474:	e775      	b.n	800a362 <_dtoa_r+0x102>
 800a476:	2301      	movs	r3, #1
 800a478:	e7b6      	b.n	800a3e8 <_dtoa_r+0x188>
 800a47a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a47c:	e7b5      	b.n	800a3ea <_dtoa_r+0x18a>
 800a47e:	427b      	negs	r3, r7
 800a480:	930a      	str	r3, [sp, #40]	@ 0x28
 800a482:	2300      	movs	r3, #0
 800a484:	eba8 0807 	sub.w	r8, r8, r7
 800a488:	930e      	str	r3, [sp, #56]	@ 0x38
 800a48a:	e7c2      	b.n	800a412 <_dtoa_r+0x1b2>
 800a48c:	2300      	movs	r3, #0
 800a48e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a490:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a492:	2b00      	cmp	r3, #0
 800a494:	dc35      	bgt.n	800a502 <_dtoa_r+0x2a2>
 800a496:	2301      	movs	r3, #1
 800a498:	461a      	mov	r2, r3
 800a49a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a49e:	9221      	str	r2, [sp, #132]	@ 0x84
 800a4a0:	e00b      	b.n	800a4ba <_dtoa_r+0x25a>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e7f3      	b.n	800a48e <_dtoa_r+0x22e>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4ac:	18fb      	adds	r3, r7, r3
 800a4ae:	9308      	str	r3, [sp, #32]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	9307      	str	r3, [sp, #28]
 800a4b6:	bfb8      	it	lt
 800a4b8:	2301      	movlt	r3, #1
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	2204      	movs	r2, #4
 800a4be:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a4c2:	f102 0514 	add.w	r5, r2, #20
 800a4c6:	429d      	cmp	r5, r3
 800a4c8:	d91f      	bls.n	800a50a <_dtoa_r+0x2aa>
 800a4ca:	6041      	str	r1, [r0, #4]
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	f001 f8d9 	bl	800b684 <_Balloc>
 800a4d2:	4682      	mov	sl, r0
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d139      	bne.n	800a54c <_dtoa_r+0x2ec>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	f240 11af 	movw	r1, #431	@ 0x1af
 800a4de:	4b1a      	ldr	r3, [pc, #104]	@ (800a548 <_dtoa_r+0x2e8>)
 800a4e0:	e6d2      	b.n	800a288 <_dtoa_r+0x28>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e7e0      	b.n	800a4a8 <_dtoa_r+0x248>
 800a4e6:	2401      	movs	r4, #1
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a4ec:	9320      	str	r3, [sp, #128]	@ 0x80
 800a4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a4f8:	2312      	movs	r3, #18
 800a4fa:	e7d0      	b.n	800a49e <_dtoa_r+0x23e>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a500:	e7f5      	b.n	800a4ee <_dtoa_r+0x28e>
 800a502:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a504:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a508:	e7d7      	b.n	800a4ba <_dtoa_r+0x25a>
 800a50a:	3101      	adds	r1, #1
 800a50c:	0052      	lsls	r2, r2, #1
 800a50e:	e7d8      	b.n	800a4c2 <_dtoa_r+0x262>
 800a510:	636f4361 	.word	0x636f4361
 800a514:	3fd287a7 	.word	0x3fd287a7
 800a518:	8b60c8b3 	.word	0x8b60c8b3
 800a51c:	3fc68a28 	.word	0x3fc68a28
 800a520:	509f79fb 	.word	0x509f79fb
 800a524:	3fd34413 	.word	0x3fd34413
 800a528:	0800cba4 	.word	0x0800cba4
 800a52c:	0800cc66 	.word	0x0800cc66
 800a530:	7ff00000 	.word	0x7ff00000
 800a534:	0800cc62 	.word	0x0800cc62
 800a538:	0800cb81 	.word	0x0800cb81
 800a53c:	0800cb80 	.word	0x0800cb80
 800a540:	3ff80000 	.word	0x3ff80000
 800a544:	0800cdc0 	.word	0x0800cdc0
 800a548:	0800ccbe 	.word	0x0800ccbe
 800a54c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a550:	6018      	str	r0, [r3, #0]
 800a552:	9b07      	ldr	r3, [sp, #28]
 800a554:	2b0e      	cmp	r3, #14
 800a556:	f200 80a4 	bhi.w	800a6a2 <_dtoa_r+0x442>
 800a55a:	2c00      	cmp	r4, #0
 800a55c:	f000 80a1 	beq.w	800a6a2 <_dtoa_r+0x442>
 800a560:	2f00      	cmp	r7, #0
 800a562:	dd33      	ble.n	800a5cc <_dtoa_r+0x36c>
 800a564:	4b86      	ldr	r3, [pc, #536]	@ (800a780 <_dtoa_r+0x520>)
 800a566:	f007 020f 	and.w	r2, r7, #15
 800a56a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a56e:	05f8      	lsls	r0, r7, #23
 800a570:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a574:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a578:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a57c:	d516      	bpl.n	800a5ac <_dtoa_r+0x34c>
 800a57e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a582:	4b80      	ldr	r3, [pc, #512]	@ (800a784 <_dtoa_r+0x524>)
 800a584:	2603      	movs	r6, #3
 800a586:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a58a:	f7f6 f8e7 	bl	800075c <__aeabi_ddiv>
 800a58e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a592:	f004 040f 	and.w	r4, r4, #15
 800a596:	4d7b      	ldr	r5, [pc, #492]	@ (800a784 <_dtoa_r+0x524>)
 800a598:	b954      	cbnz	r4, 800a5b0 <_dtoa_r+0x350>
 800a59a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5a2:	f7f6 f8db 	bl	800075c <__aeabi_ddiv>
 800a5a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5aa:	e028      	b.n	800a5fe <_dtoa_r+0x39e>
 800a5ac:	2602      	movs	r6, #2
 800a5ae:	e7f2      	b.n	800a596 <_dtoa_r+0x336>
 800a5b0:	07e1      	lsls	r1, r4, #31
 800a5b2:	d508      	bpl.n	800a5c6 <_dtoa_r+0x366>
 800a5b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5bc:	f7f5 ffa4 	bl	8000508 <__aeabi_dmul>
 800a5c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5c4:	3601      	adds	r6, #1
 800a5c6:	1064      	asrs	r4, r4, #1
 800a5c8:	3508      	adds	r5, #8
 800a5ca:	e7e5      	b.n	800a598 <_dtoa_r+0x338>
 800a5cc:	f000 80d2 	beq.w	800a774 <_dtoa_r+0x514>
 800a5d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5d4:	427c      	negs	r4, r7
 800a5d6:	4b6a      	ldr	r3, [pc, #424]	@ (800a780 <_dtoa_r+0x520>)
 800a5d8:	f004 020f 	and.w	r2, r4, #15
 800a5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f5 ff90 	bl	8000508 <__aeabi_dmul>
 800a5e8:	2602      	movs	r6, #2
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5f0:	4d64      	ldr	r5, [pc, #400]	@ (800a784 <_dtoa_r+0x524>)
 800a5f2:	1124      	asrs	r4, r4, #4
 800a5f4:	2c00      	cmp	r4, #0
 800a5f6:	f040 80b2 	bne.w	800a75e <_dtoa_r+0x4fe>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1d3      	bne.n	800a5a6 <_dtoa_r+0x346>
 800a5fe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 80b7 	beq.w	800a778 <_dtoa_r+0x518>
 800a60a:	2200      	movs	r2, #0
 800a60c:	4620      	mov	r0, r4
 800a60e:	4629      	mov	r1, r5
 800a610:	4b5d      	ldr	r3, [pc, #372]	@ (800a788 <_dtoa_r+0x528>)
 800a612:	f7f6 f9eb 	bl	80009ec <__aeabi_dcmplt>
 800a616:	2800      	cmp	r0, #0
 800a618:	f000 80ae 	beq.w	800a778 <_dtoa_r+0x518>
 800a61c:	9b07      	ldr	r3, [sp, #28]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 80aa 	beq.w	800a778 <_dtoa_r+0x518>
 800a624:	9b08      	ldr	r3, [sp, #32]
 800a626:	2b00      	cmp	r3, #0
 800a628:	dd37      	ble.n	800a69a <_dtoa_r+0x43a>
 800a62a:	1e7b      	subs	r3, r7, #1
 800a62c:	4620      	mov	r0, r4
 800a62e:	9304      	str	r3, [sp, #16]
 800a630:	2200      	movs	r2, #0
 800a632:	4629      	mov	r1, r5
 800a634:	4b55      	ldr	r3, [pc, #340]	@ (800a78c <_dtoa_r+0x52c>)
 800a636:	f7f5 ff67 	bl	8000508 <__aeabi_dmul>
 800a63a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a63e:	9c08      	ldr	r4, [sp, #32]
 800a640:	3601      	adds	r6, #1
 800a642:	4630      	mov	r0, r6
 800a644:	f7f5 fef6 	bl	8000434 <__aeabi_i2d>
 800a648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a64c:	f7f5 ff5c 	bl	8000508 <__aeabi_dmul>
 800a650:	2200      	movs	r2, #0
 800a652:	4b4f      	ldr	r3, [pc, #316]	@ (800a790 <_dtoa_r+0x530>)
 800a654:	f7f5 fda2 	bl	800019c <__adddf3>
 800a658:	4605      	mov	r5, r0
 800a65a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a65e:	2c00      	cmp	r4, #0
 800a660:	f040 809a 	bne.w	800a798 <_dtoa_r+0x538>
 800a664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a668:	2200      	movs	r2, #0
 800a66a:	4b4a      	ldr	r3, [pc, #296]	@ (800a794 <_dtoa_r+0x534>)
 800a66c:	f7f5 fd94 	bl	8000198 <__aeabi_dsub>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a678:	462a      	mov	r2, r5
 800a67a:	4633      	mov	r3, r6
 800a67c:	f7f6 f9d4 	bl	8000a28 <__aeabi_dcmpgt>
 800a680:	2800      	cmp	r0, #0
 800a682:	f040 828e 	bne.w	800aba2 <_dtoa_r+0x942>
 800a686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a68a:	462a      	mov	r2, r5
 800a68c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a690:	f7f6 f9ac 	bl	80009ec <__aeabi_dcmplt>
 800a694:	2800      	cmp	r0, #0
 800a696:	f040 8127 	bne.w	800a8e8 <_dtoa_r+0x688>
 800a69a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a69e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a6a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f2c0 8163 	blt.w	800a970 <_dtoa_r+0x710>
 800a6aa:	2f0e      	cmp	r7, #14
 800a6ac:	f300 8160 	bgt.w	800a970 <_dtoa_r+0x710>
 800a6b0:	4b33      	ldr	r3, [pc, #204]	@ (800a780 <_dtoa_r+0x520>)
 800a6b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	da03      	bge.n	800a6cc <_dtoa_r+0x46c>
 800a6c4:	9b07      	ldr	r3, [sp, #28]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f340 8100 	ble.w	800a8cc <_dtoa_r+0x66c>
 800a6cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a6d0:	4656      	mov	r6, sl
 800a6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	4629      	mov	r1, r5
 800a6da:	f7f6 f83f 	bl	800075c <__aeabi_ddiv>
 800a6de:	f7f6 f9c3 	bl	8000a68 <__aeabi_d2iz>
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	f7f5 fea6 	bl	8000434 <__aeabi_i2d>
 800a6e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ec:	f7f5 ff0c 	bl	8000508 <__aeabi_dmul>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	f7f5 fd4e 	bl	8000198 <__aeabi_dsub>
 800a6fc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a700:	9d07      	ldr	r5, [sp, #28]
 800a702:	f806 4b01 	strb.w	r4, [r6], #1
 800a706:	eba6 040a 	sub.w	r4, r6, sl
 800a70a:	42a5      	cmp	r5, r4
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	f040 8116 	bne.w	800a940 <_dtoa_r+0x6e0>
 800a714:	f7f5 fd42 	bl	800019c <__adddf3>
 800a718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a71c:	4604      	mov	r4, r0
 800a71e:	460d      	mov	r5, r1
 800a720:	f7f6 f982 	bl	8000a28 <__aeabi_dcmpgt>
 800a724:	2800      	cmp	r0, #0
 800a726:	f040 80f8 	bne.w	800a91a <_dtoa_r+0x6ba>
 800a72a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a72e:	4620      	mov	r0, r4
 800a730:	4629      	mov	r1, r5
 800a732:	f7f6 f951 	bl	80009d8 <__aeabi_dcmpeq>
 800a736:	b118      	cbz	r0, 800a740 <_dtoa_r+0x4e0>
 800a738:	f018 0f01 	tst.w	r8, #1
 800a73c:	f040 80ed 	bne.w	800a91a <_dtoa_r+0x6ba>
 800a740:	4649      	mov	r1, r9
 800a742:	4658      	mov	r0, fp
 800a744:	f000 ffde 	bl	800b704 <_Bfree>
 800a748:	2300      	movs	r3, #0
 800a74a:	7033      	strb	r3, [r6, #0]
 800a74c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a74e:	3701      	adds	r7, #1
 800a750:	601f      	str	r7, [r3, #0]
 800a752:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 8320 	beq.w	800ad9a <_dtoa_r+0xb3a>
 800a75a:	601e      	str	r6, [r3, #0]
 800a75c:	e31d      	b.n	800ad9a <_dtoa_r+0xb3a>
 800a75e:	07e2      	lsls	r2, r4, #31
 800a760:	d505      	bpl.n	800a76e <_dtoa_r+0x50e>
 800a762:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a766:	f7f5 fecf 	bl	8000508 <__aeabi_dmul>
 800a76a:	2301      	movs	r3, #1
 800a76c:	3601      	adds	r6, #1
 800a76e:	1064      	asrs	r4, r4, #1
 800a770:	3508      	adds	r5, #8
 800a772:	e73f      	b.n	800a5f4 <_dtoa_r+0x394>
 800a774:	2602      	movs	r6, #2
 800a776:	e742      	b.n	800a5fe <_dtoa_r+0x39e>
 800a778:	9c07      	ldr	r4, [sp, #28]
 800a77a:	9704      	str	r7, [sp, #16]
 800a77c:	e761      	b.n	800a642 <_dtoa_r+0x3e2>
 800a77e:	bf00      	nop
 800a780:	0800cdc0 	.word	0x0800cdc0
 800a784:	0800cd98 	.word	0x0800cd98
 800a788:	3ff00000 	.word	0x3ff00000
 800a78c:	40240000 	.word	0x40240000
 800a790:	401c0000 	.word	0x401c0000
 800a794:	40140000 	.word	0x40140000
 800a798:	4b70      	ldr	r3, [pc, #448]	@ (800a95c <_dtoa_r+0x6fc>)
 800a79a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a79c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7a4:	4454      	add	r4, sl
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	d045      	beq.n	800a836 <_dtoa_r+0x5d6>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	496c      	ldr	r1, [pc, #432]	@ (800a960 <_dtoa_r+0x700>)
 800a7ae:	f7f5 ffd5 	bl	800075c <__aeabi_ddiv>
 800a7b2:	4633      	mov	r3, r6
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	f7f5 fcef 	bl	8000198 <__aeabi_dsub>
 800a7ba:	4656      	mov	r6, sl
 800a7bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7c4:	f7f6 f950 	bl	8000a68 <__aeabi_d2iz>
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	f7f5 fe33 	bl	8000434 <__aeabi_i2d>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d6:	f7f5 fcdf 	bl	8000198 <__aeabi_dsub>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	3530      	adds	r5, #48	@ 0x30
 800a7e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7e8:	f806 5b01 	strb.w	r5, [r6], #1
 800a7ec:	f7f6 f8fe 	bl	80009ec <__aeabi_dcmplt>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d163      	bne.n	800a8bc <_dtoa_r+0x65c>
 800a7f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	495a      	ldr	r1, [pc, #360]	@ (800a964 <_dtoa_r+0x704>)
 800a7fc:	f7f5 fccc 	bl	8000198 <__aeabi_dsub>
 800a800:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a804:	f7f6 f8f2 	bl	80009ec <__aeabi_dcmplt>
 800a808:	2800      	cmp	r0, #0
 800a80a:	f040 8087 	bne.w	800a91c <_dtoa_r+0x6bc>
 800a80e:	42a6      	cmp	r6, r4
 800a810:	f43f af43 	beq.w	800a69a <_dtoa_r+0x43a>
 800a814:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a818:	2200      	movs	r2, #0
 800a81a:	4b53      	ldr	r3, [pc, #332]	@ (800a968 <_dtoa_r+0x708>)
 800a81c:	f7f5 fe74 	bl	8000508 <__aeabi_dmul>
 800a820:	2200      	movs	r2, #0
 800a822:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a82a:	4b4f      	ldr	r3, [pc, #316]	@ (800a968 <_dtoa_r+0x708>)
 800a82c:	f7f5 fe6c 	bl	8000508 <__aeabi_dmul>
 800a830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a834:	e7c4      	b.n	800a7c0 <_dtoa_r+0x560>
 800a836:	4631      	mov	r1, r6
 800a838:	4628      	mov	r0, r5
 800a83a:	f7f5 fe65 	bl	8000508 <__aeabi_dmul>
 800a83e:	4656      	mov	r6, sl
 800a840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a844:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a84a:	f7f6 f90d 	bl	8000a68 <__aeabi_d2iz>
 800a84e:	4605      	mov	r5, r0
 800a850:	f7f5 fdf0 	bl	8000434 <__aeabi_i2d>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a85c:	f7f5 fc9c 	bl	8000198 <__aeabi_dsub>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	3530      	adds	r5, #48	@ 0x30
 800a866:	f806 5b01 	strb.w	r5, [r6], #1
 800a86a:	42a6      	cmp	r6, r4
 800a86c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a870:	f04f 0200 	mov.w	r2, #0
 800a874:	d124      	bne.n	800a8c0 <_dtoa_r+0x660>
 800a876:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a87a:	4b39      	ldr	r3, [pc, #228]	@ (800a960 <_dtoa_r+0x700>)
 800a87c:	f7f5 fc8e 	bl	800019c <__adddf3>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a888:	f7f6 f8ce 	bl	8000a28 <__aeabi_dcmpgt>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d145      	bne.n	800a91c <_dtoa_r+0x6bc>
 800a890:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a894:	2000      	movs	r0, #0
 800a896:	4932      	ldr	r1, [pc, #200]	@ (800a960 <_dtoa_r+0x700>)
 800a898:	f7f5 fc7e 	bl	8000198 <__aeabi_dsub>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8a4:	f7f6 f8a2 	bl	80009ec <__aeabi_dcmplt>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	f43f aef6 	beq.w	800a69a <_dtoa_r+0x43a>
 800a8ae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a8b0:	1e73      	subs	r3, r6, #1
 800a8b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8b8:	2b30      	cmp	r3, #48	@ 0x30
 800a8ba:	d0f8      	beq.n	800a8ae <_dtoa_r+0x64e>
 800a8bc:	9f04      	ldr	r7, [sp, #16]
 800a8be:	e73f      	b.n	800a740 <_dtoa_r+0x4e0>
 800a8c0:	4b29      	ldr	r3, [pc, #164]	@ (800a968 <_dtoa_r+0x708>)
 800a8c2:	f7f5 fe21 	bl	8000508 <__aeabi_dmul>
 800a8c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8ca:	e7bc      	b.n	800a846 <_dtoa_r+0x5e6>
 800a8cc:	d10c      	bne.n	800a8e8 <_dtoa_r+0x688>
 800a8ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	4b25      	ldr	r3, [pc, #148]	@ (800a96c <_dtoa_r+0x70c>)
 800a8d6:	f7f5 fe17 	bl	8000508 <__aeabi_dmul>
 800a8da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8de:	f7f6 f899 	bl	8000a14 <__aeabi_dcmpge>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	f000 815b 	beq.w	800ab9e <_dtoa_r+0x93e>
 800a8e8:	2400      	movs	r4, #0
 800a8ea:	4625      	mov	r5, r4
 800a8ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8ee:	4656      	mov	r6, sl
 800a8f0:	43db      	mvns	r3, r3
 800a8f2:	9304      	str	r3, [sp, #16]
 800a8f4:	2700      	movs	r7, #0
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4658      	mov	r0, fp
 800a8fa:	f000 ff03 	bl	800b704 <_Bfree>
 800a8fe:	2d00      	cmp	r5, #0
 800a900:	d0dc      	beq.n	800a8bc <_dtoa_r+0x65c>
 800a902:	b12f      	cbz	r7, 800a910 <_dtoa_r+0x6b0>
 800a904:	42af      	cmp	r7, r5
 800a906:	d003      	beq.n	800a910 <_dtoa_r+0x6b0>
 800a908:	4639      	mov	r1, r7
 800a90a:	4658      	mov	r0, fp
 800a90c:	f000 fefa 	bl	800b704 <_Bfree>
 800a910:	4629      	mov	r1, r5
 800a912:	4658      	mov	r0, fp
 800a914:	f000 fef6 	bl	800b704 <_Bfree>
 800a918:	e7d0      	b.n	800a8bc <_dtoa_r+0x65c>
 800a91a:	9704      	str	r7, [sp, #16]
 800a91c:	4633      	mov	r3, r6
 800a91e:	461e      	mov	r6, r3
 800a920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a924:	2a39      	cmp	r2, #57	@ 0x39
 800a926:	d107      	bne.n	800a938 <_dtoa_r+0x6d8>
 800a928:	459a      	cmp	sl, r3
 800a92a:	d1f8      	bne.n	800a91e <_dtoa_r+0x6be>
 800a92c:	9a04      	ldr	r2, [sp, #16]
 800a92e:	3201      	adds	r2, #1
 800a930:	9204      	str	r2, [sp, #16]
 800a932:	2230      	movs	r2, #48	@ 0x30
 800a934:	f88a 2000 	strb.w	r2, [sl]
 800a938:	781a      	ldrb	r2, [r3, #0]
 800a93a:	3201      	adds	r2, #1
 800a93c:	701a      	strb	r2, [r3, #0]
 800a93e:	e7bd      	b.n	800a8bc <_dtoa_r+0x65c>
 800a940:	2200      	movs	r2, #0
 800a942:	4b09      	ldr	r3, [pc, #36]	@ (800a968 <_dtoa_r+0x708>)
 800a944:	f7f5 fde0 	bl	8000508 <__aeabi_dmul>
 800a948:	2200      	movs	r2, #0
 800a94a:	2300      	movs	r3, #0
 800a94c:	4604      	mov	r4, r0
 800a94e:	460d      	mov	r5, r1
 800a950:	f7f6 f842 	bl	80009d8 <__aeabi_dcmpeq>
 800a954:	2800      	cmp	r0, #0
 800a956:	f43f aebc 	beq.w	800a6d2 <_dtoa_r+0x472>
 800a95a:	e6f1      	b.n	800a740 <_dtoa_r+0x4e0>
 800a95c:	0800cdc0 	.word	0x0800cdc0
 800a960:	3fe00000 	.word	0x3fe00000
 800a964:	3ff00000 	.word	0x3ff00000
 800a968:	40240000 	.word	0x40240000
 800a96c:	40140000 	.word	0x40140000
 800a970:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a972:	2a00      	cmp	r2, #0
 800a974:	f000 80db 	beq.w	800ab2e <_dtoa_r+0x8ce>
 800a978:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a97a:	2a01      	cmp	r2, #1
 800a97c:	f300 80bf 	bgt.w	800aafe <_dtoa_r+0x89e>
 800a980:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a982:	2a00      	cmp	r2, #0
 800a984:	f000 80b7 	beq.w	800aaf6 <_dtoa_r+0x896>
 800a988:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a98c:	4646      	mov	r6, r8
 800a98e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a992:	2101      	movs	r1, #1
 800a994:	441a      	add	r2, r3
 800a996:	4658      	mov	r0, fp
 800a998:	4498      	add	r8, r3
 800a99a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a99c:	f000 ffb0 	bl	800b900 <__i2b>
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	b15e      	cbz	r6, 800a9bc <_dtoa_r+0x75c>
 800a9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	dd08      	ble.n	800a9bc <_dtoa_r+0x75c>
 800a9aa:	42b3      	cmp	r3, r6
 800a9ac:	bfa8      	it	ge
 800a9ae:	4633      	movge	r3, r6
 800a9b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9b2:	eba8 0803 	sub.w	r8, r8, r3
 800a9b6:	1af6      	subs	r6, r6, r3
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9be:	b1f3      	cbz	r3, 800a9fe <_dtoa_r+0x79e>
 800a9c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 80b7 	beq.w	800ab36 <_dtoa_r+0x8d6>
 800a9c8:	b18c      	cbz	r4, 800a9ee <_dtoa_r+0x78e>
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	4622      	mov	r2, r4
 800a9ce:	4658      	mov	r0, fp
 800a9d0:	f001 f854 	bl	800ba7c <__pow5mult>
 800a9d4:	464a      	mov	r2, r9
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	4605      	mov	r5, r0
 800a9da:	4658      	mov	r0, fp
 800a9dc:	f000 ffa6 	bl	800b92c <__multiply>
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	9004      	str	r0, [sp, #16]
 800a9e4:	4658      	mov	r0, fp
 800a9e6:	f000 fe8d 	bl	800b704 <_Bfree>
 800a9ea:	9b04      	ldr	r3, [sp, #16]
 800a9ec:	4699      	mov	r9, r3
 800a9ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9f0:	1b1a      	subs	r2, r3, r4
 800a9f2:	d004      	beq.n	800a9fe <_dtoa_r+0x79e>
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	4658      	mov	r0, fp
 800a9f8:	f001 f840 	bl	800ba7c <__pow5mult>
 800a9fc:	4681      	mov	r9, r0
 800a9fe:	2101      	movs	r1, #1
 800aa00:	4658      	mov	r0, fp
 800aa02:	f000 ff7d 	bl	800b900 <__i2b>
 800aa06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa08:	4604      	mov	r4, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 81c9 	beq.w	800ada2 <_dtoa_r+0xb42>
 800aa10:	461a      	mov	r2, r3
 800aa12:	4601      	mov	r1, r0
 800aa14:	4658      	mov	r0, fp
 800aa16:	f001 f831 	bl	800ba7c <__pow5mult>
 800aa1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	f300 808f 	bgt.w	800ab42 <_dtoa_r+0x8e2>
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f040 8087 	bne.w	800ab3a <_dtoa_r+0x8da>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f040 8083 	bne.w	800ab3e <_dtoa_r+0x8de>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa3e:	0d1b      	lsrs	r3, r3, #20
 800aa40:	051b      	lsls	r3, r3, #20
 800aa42:	b12b      	cbz	r3, 800aa50 <_dtoa_r+0x7f0>
 800aa44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa46:	f108 0801 	add.w	r8, r8, #1
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa4e:	2301      	movs	r3, #1
 800aa50:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 81aa 	beq.w	800adae <_dtoa_r+0xb4e>
 800aa5a:	6923      	ldr	r3, [r4, #16]
 800aa5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa60:	6918      	ldr	r0, [r3, #16]
 800aa62:	f000 ff01 	bl	800b868 <__hi0bits>
 800aa66:	f1c0 0020 	rsb	r0, r0, #32
 800aa6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6c:	4418      	add	r0, r3
 800aa6e:	f010 001f 	ands.w	r0, r0, #31
 800aa72:	d071      	beq.n	800ab58 <_dtoa_r+0x8f8>
 800aa74:	f1c0 0320 	rsb	r3, r0, #32
 800aa78:	2b04      	cmp	r3, #4
 800aa7a:	dd65      	ble.n	800ab48 <_dtoa_r+0x8e8>
 800aa7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa7e:	f1c0 001c 	rsb	r0, r0, #28
 800aa82:	4403      	add	r3, r0
 800aa84:	4480      	add	r8, r0
 800aa86:	4406      	add	r6, r0
 800aa88:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa8a:	f1b8 0f00 	cmp.w	r8, #0
 800aa8e:	dd05      	ble.n	800aa9c <_dtoa_r+0x83c>
 800aa90:	4649      	mov	r1, r9
 800aa92:	4642      	mov	r2, r8
 800aa94:	4658      	mov	r0, fp
 800aa96:	f001 f84b 	bl	800bb30 <__lshift>
 800aa9a:	4681      	mov	r9, r0
 800aa9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dd05      	ble.n	800aaae <_dtoa_r+0x84e>
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	f001 f842 	bl	800bb30 <__lshift>
 800aaac:	4604      	mov	r4, r0
 800aaae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d053      	beq.n	800ab5c <_dtoa_r+0x8fc>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4648      	mov	r0, r9
 800aab8:	f001 f8a6 	bl	800bc08 <__mcmp>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	da4d      	bge.n	800ab5c <_dtoa_r+0x8fc>
 800aac0:	1e7b      	subs	r3, r7, #1
 800aac2:	4649      	mov	r1, r9
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	220a      	movs	r2, #10
 800aac8:	2300      	movs	r3, #0
 800aaca:	4658      	mov	r0, fp
 800aacc:	f000 fe3c 	bl	800b748 <__multadd>
 800aad0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad2:	4681      	mov	r9, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 816c 	beq.w	800adb2 <_dtoa_r+0xb52>
 800aada:	2300      	movs	r3, #0
 800aadc:	4629      	mov	r1, r5
 800aade:	220a      	movs	r2, #10
 800aae0:	4658      	mov	r0, fp
 800aae2:	f000 fe31 	bl	800b748 <__multadd>
 800aae6:	9b08      	ldr	r3, [sp, #32]
 800aae8:	4605      	mov	r5, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dc61      	bgt.n	800abb2 <_dtoa_r+0x952>
 800aaee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	dc3b      	bgt.n	800ab6c <_dtoa_r+0x90c>
 800aaf4:	e05d      	b.n	800abb2 <_dtoa_r+0x952>
 800aaf6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aaf8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aafc:	e746      	b.n	800a98c <_dtoa_r+0x72c>
 800aafe:	9b07      	ldr	r3, [sp, #28]
 800ab00:	1e5c      	subs	r4, r3, #1
 800ab02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab04:	42a3      	cmp	r3, r4
 800ab06:	bfbf      	itttt	lt
 800ab08:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ab0a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800ab0c:	1ae3      	sublt	r3, r4, r3
 800ab0e:	18d2      	addlt	r2, r2, r3
 800ab10:	bfa8      	it	ge
 800ab12:	1b1c      	subge	r4, r3, r4
 800ab14:	9b07      	ldr	r3, [sp, #28]
 800ab16:	bfbe      	ittt	lt
 800ab18:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ab1a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800ab1c:	2400      	movlt	r4, #0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bfb5      	itete	lt
 800ab22:	eba8 0603 	sublt.w	r6, r8, r3
 800ab26:	4646      	movge	r6, r8
 800ab28:	2300      	movlt	r3, #0
 800ab2a:	9b07      	ldrge	r3, [sp, #28]
 800ab2c:	e730      	b.n	800a990 <_dtoa_r+0x730>
 800ab2e:	4646      	mov	r6, r8
 800ab30:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab32:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab34:	e735      	b.n	800a9a2 <_dtoa_r+0x742>
 800ab36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab38:	e75c      	b.n	800a9f4 <_dtoa_r+0x794>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e788      	b.n	800aa50 <_dtoa_r+0x7f0>
 800ab3e:	9b02      	ldr	r3, [sp, #8]
 800ab40:	e786      	b.n	800aa50 <_dtoa_r+0x7f0>
 800ab42:	2300      	movs	r3, #0
 800ab44:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab46:	e788      	b.n	800aa5a <_dtoa_r+0x7fa>
 800ab48:	d09f      	beq.n	800aa8a <_dtoa_r+0x82a>
 800ab4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab4c:	331c      	adds	r3, #28
 800ab4e:	441a      	add	r2, r3
 800ab50:	4498      	add	r8, r3
 800ab52:	441e      	add	r6, r3
 800ab54:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab56:	e798      	b.n	800aa8a <_dtoa_r+0x82a>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	e7f6      	b.n	800ab4a <_dtoa_r+0x8ea>
 800ab5c:	9b07      	ldr	r3, [sp, #28]
 800ab5e:	9704      	str	r7, [sp, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	dc20      	bgt.n	800aba6 <_dtoa_r+0x946>
 800ab64:	9308      	str	r3, [sp, #32]
 800ab66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	dd1e      	ble.n	800abaa <_dtoa_r+0x94a>
 800ab6c:	9b08      	ldr	r3, [sp, #32]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f47f aebc 	bne.w	800a8ec <_dtoa_r+0x68c>
 800ab74:	4621      	mov	r1, r4
 800ab76:	2205      	movs	r2, #5
 800ab78:	4658      	mov	r0, fp
 800ab7a:	f000 fde5 	bl	800b748 <__multadd>
 800ab7e:	4601      	mov	r1, r0
 800ab80:	4604      	mov	r4, r0
 800ab82:	4648      	mov	r0, r9
 800ab84:	f001 f840 	bl	800bc08 <__mcmp>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	f77f aeaf 	ble.w	800a8ec <_dtoa_r+0x68c>
 800ab8e:	2331      	movs	r3, #49	@ 0x31
 800ab90:	4656      	mov	r6, sl
 800ab92:	f806 3b01 	strb.w	r3, [r6], #1
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	e6aa      	b.n	800a8f4 <_dtoa_r+0x694>
 800ab9e:	9c07      	ldr	r4, [sp, #28]
 800aba0:	9704      	str	r7, [sp, #16]
 800aba2:	4625      	mov	r5, r4
 800aba4:	e7f3      	b.n	800ab8e <_dtoa_r+0x92e>
 800aba6:	9b07      	ldr	r3, [sp, #28]
 800aba8:	9308      	str	r3, [sp, #32]
 800abaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 8104 	beq.w	800adba <_dtoa_r+0xb5a>
 800abb2:	2e00      	cmp	r6, #0
 800abb4:	dd05      	ble.n	800abc2 <_dtoa_r+0x962>
 800abb6:	4629      	mov	r1, r5
 800abb8:	4632      	mov	r2, r6
 800abba:	4658      	mov	r0, fp
 800abbc:	f000 ffb8 	bl	800bb30 <__lshift>
 800abc0:	4605      	mov	r5, r0
 800abc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d05a      	beq.n	800ac7e <_dtoa_r+0xa1e>
 800abc8:	4658      	mov	r0, fp
 800abca:	6869      	ldr	r1, [r5, #4]
 800abcc:	f000 fd5a 	bl	800b684 <_Balloc>
 800abd0:	4606      	mov	r6, r0
 800abd2:	b928      	cbnz	r0, 800abe0 <_dtoa_r+0x980>
 800abd4:	4602      	mov	r2, r0
 800abd6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800abda:	4b83      	ldr	r3, [pc, #524]	@ (800ade8 <_dtoa_r+0xb88>)
 800abdc:	f7ff bb54 	b.w	800a288 <_dtoa_r+0x28>
 800abe0:	692a      	ldr	r2, [r5, #16]
 800abe2:	f105 010c 	add.w	r1, r5, #12
 800abe6:	3202      	adds	r2, #2
 800abe8:	0092      	lsls	r2, r2, #2
 800abea:	300c      	adds	r0, #12
 800abec:	f7ff fa7d 	bl	800a0ea <memcpy>
 800abf0:	2201      	movs	r2, #1
 800abf2:	4631      	mov	r1, r6
 800abf4:	4658      	mov	r0, fp
 800abf6:	f000 ff9b 	bl	800bb30 <__lshift>
 800abfa:	462f      	mov	r7, r5
 800abfc:	4605      	mov	r5, r0
 800abfe:	f10a 0301 	add.w	r3, sl, #1
 800ac02:	9307      	str	r3, [sp, #28]
 800ac04:	9b08      	ldr	r3, [sp, #32]
 800ac06:	4453      	add	r3, sl
 800ac08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac0a:	9b02      	ldr	r3, [sp, #8]
 800ac0c:	f003 0301 	and.w	r3, r3, #1
 800ac10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac12:	9b07      	ldr	r3, [sp, #28]
 800ac14:	4621      	mov	r1, r4
 800ac16:	3b01      	subs	r3, #1
 800ac18:	4648      	mov	r0, r9
 800ac1a:	9302      	str	r3, [sp, #8]
 800ac1c:	f7ff fa98 	bl	800a150 <quorem>
 800ac20:	4639      	mov	r1, r7
 800ac22:	9008      	str	r0, [sp, #32]
 800ac24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac28:	4648      	mov	r0, r9
 800ac2a:	f000 ffed 	bl	800bc08 <__mcmp>
 800ac2e:	462a      	mov	r2, r5
 800ac30:	9009      	str	r0, [sp, #36]	@ 0x24
 800ac32:	4621      	mov	r1, r4
 800ac34:	4658      	mov	r0, fp
 800ac36:	f001 f803 	bl	800bc40 <__mdiff>
 800ac3a:	68c2      	ldr	r2, [r0, #12]
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	bb02      	cbnz	r2, 800ac82 <_dtoa_r+0xa22>
 800ac40:	4601      	mov	r1, r0
 800ac42:	4648      	mov	r0, r9
 800ac44:	f000 ffe0 	bl	800bc08 <__mcmp>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4658      	mov	r0, fp
 800ac4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac50:	f000 fd58 	bl	800b704 <_Bfree>
 800ac54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ac56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac58:	9e07      	ldr	r6, [sp, #28]
 800ac5a:	ea43 0102 	orr.w	r1, r3, r2
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac60:	4319      	orrs	r1, r3
 800ac62:	d110      	bne.n	800ac86 <_dtoa_r+0xa26>
 800ac64:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac68:	d029      	beq.n	800acbe <_dtoa_r+0xa5e>
 800ac6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dd02      	ble.n	800ac76 <_dtoa_r+0xa16>
 800ac70:	9b08      	ldr	r3, [sp, #32]
 800ac72:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ac76:	9b02      	ldr	r3, [sp, #8]
 800ac78:	f883 8000 	strb.w	r8, [r3]
 800ac7c:	e63b      	b.n	800a8f6 <_dtoa_r+0x696>
 800ac7e:	4628      	mov	r0, r5
 800ac80:	e7bb      	b.n	800abfa <_dtoa_r+0x99a>
 800ac82:	2201      	movs	r2, #1
 800ac84:	e7e1      	b.n	800ac4a <_dtoa_r+0x9ea>
 800ac86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	db04      	blt.n	800ac96 <_dtoa_r+0xa36>
 800ac8c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800ac8e:	430b      	orrs	r3, r1
 800ac90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac92:	430b      	orrs	r3, r1
 800ac94:	d120      	bne.n	800acd8 <_dtoa_r+0xa78>
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	dded      	ble.n	800ac76 <_dtoa_r+0xa16>
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	4658      	mov	r0, fp
 800aca0:	f000 ff46 	bl	800bb30 <__lshift>
 800aca4:	4621      	mov	r1, r4
 800aca6:	4681      	mov	r9, r0
 800aca8:	f000 ffae 	bl	800bc08 <__mcmp>
 800acac:	2800      	cmp	r0, #0
 800acae:	dc03      	bgt.n	800acb8 <_dtoa_r+0xa58>
 800acb0:	d1e1      	bne.n	800ac76 <_dtoa_r+0xa16>
 800acb2:	f018 0f01 	tst.w	r8, #1
 800acb6:	d0de      	beq.n	800ac76 <_dtoa_r+0xa16>
 800acb8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acbc:	d1d8      	bne.n	800ac70 <_dtoa_r+0xa10>
 800acbe:	2339      	movs	r3, #57	@ 0x39
 800acc0:	9a02      	ldr	r2, [sp, #8]
 800acc2:	7013      	strb	r3, [r2, #0]
 800acc4:	4633      	mov	r3, r6
 800acc6:	461e      	mov	r6, r3
 800acc8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800accc:	3b01      	subs	r3, #1
 800acce:	2a39      	cmp	r2, #57	@ 0x39
 800acd0:	d052      	beq.n	800ad78 <_dtoa_r+0xb18>
 800acd2:	3201      	adds	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e60e      	b.n	800a8f6 <_dtoa_r+0x696>
 800acd8:	2a00      	cmp	r2, #0
 800acda:	dd07      	ble.n	800acec <_dtoa_r+0xa8c>
 800acdc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ace0:	d0ed      	beq.n	800acbe <_dtoa_r+0xa5e>
 800ace2:	9a02      	ldr	r2, [sp, #8]
 800ace4:	f108 0301 	add.w	r3, r8, #1
 800ace8:	7013      	strb	r3, [r2, #0]
 800acea:	e604      	b.n	800a8f6 <_dtoa_r+0x696>
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	9a07      	ldr	r2, [sp, #28]
 800acf0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800acf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d028      	beq.n	800ad4c <_dtoa_r+0xaec>
 800acfa:	4649      	mov	r1, r9
 800acfc:	2300      	movs	r3, #0
 800acfe:	220a      	movs	r2, #10
 800ad00:	4658      	mov	r0, fp
 800ad02:	f000 fd21 	bl	800b748 <__multadd>
 800ad06:	42af      	cmp	r7, r5
 800ad08:	4681      	mov	r9, r0
 800ad0a:	f04f 0300 	mov.w	r3, #0
 800ad0e:	f04f 020a 	mov.w	r2, #10
 800ad12:	4639      	mov	r1, r7
 800ad14:	4658      	mov	r0, fp
 800ad16:	d107      	bne.n	800ad28 <_dtoa_r+0xac8>
 800ad18:	f000 fd16 	bl	800b748 <__multadd>
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	4605      	mov	r5, r0
 800ad20:	9b07      	ldr	r3, [sp, #28]
 800ad22:	3301      	adds	r3, #1
 800ad24:	9307      	str	r3, [sp, #28]
 800ad26:	e774      	b.n	800ac12 <_dtoa_r+0x9b2>
 800ad28:	f000 fd0e 	bl	800b748 <__multadd>
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	4607      	mov	r7, r0
 800ad30:	2300      	movs	r3, #0
 800ad32:	220a      	movs	r2, #10
 800ad34:	4658      	mov	r0, fp
 800ad36:	f000 fd07 	bl	800b748 <__multadd>
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	e7f0      	b.n	800ad20 <_dtoa_r+0xac0>
 800ad3e:	9b08      	ldr	r3, [sp, #32]
 800ad40:	2700      	movs	r7, #0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	bfcc      	ite	gt
 800ad46:	461e      	movgt	r6, r3
 800ad48:	2601      	movle	r6, #1
 800ad4a:	4456      	add	r6, sl
 800ad4c:	4649      	mov	r1, r9
 800ad4e:	2201      	movs	r2, #1
 800ad50:	4658      	mov	r0, fp
 800ad52:	f000 feed 	bl	800bb30 <__lshift>
 800ad56:	4621      	mov	r1, r4
 800ad58:	4681      	mov	r9, r0
 800ad5a:	f000 ff55 	bl	800bc08 <__mcmp>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	dcb0      	bgt.n	800acc4 <_dtoa_r+0xa64>
 800ad62:	d102      	bne.n	800ad6a <_dtoa_r+0xb0a>
 800ad64:	f018 0f01 	tst.w	r8, #1
 800ad68:	d1ac      	bne.n	800acc4 <_dtoa_r+0xa64>
 800ad6a:	4633      	mov	r3, r6
 800ad6c:	461e      	mov	r6, r3
 800ad6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad72:	2a30      	cmp	r2, #48	@ 0x30
 800ad74:	d0fa      	beq.n	800ad6c <_dtoa_r+0xb0c>
 800ad76:	e5be      	b.n	800a8f6 <_dtoa_r+0x696>
 800ad78:	459a      	cmp	sl, r3
 800ad7a:	d1a4      	bne.n	800acc6 <_dtoa_r+0xa66>
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	9304      	str	r3, [sp, #16]
 800ad82:	2331      	movs	r3, #49	@ 0x31
 800ad84:	f88a 3000 	strb.w	r3, [sl]
 800ad88:	e5b5      	b.n	800a8f6 <_dtoa_r+0x696>
 800ad8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad8c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800adec <_dtoa_r+0xb8c>
 800ad90:	b11b      	cbz	r3, 800ad9a <_dtoa_r+0xb3a>
 800ad92:	f10a 0308 	add.w	r3, sl, #8
 800ad96:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	4650      	mov	r0, sl
 800ad9c:	b017      	add	sp, #92	@ 0x5c
 800ad9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	f77f ae3d 	ble.w	800aa24 <_dtoa_r+0x7c4>
 800adaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adac:	930a      	str	r3, [sp, #40]	@ 0x28
 800adae:	2001      	movs	r0, #1
 800adb0:	e65b      	b.n	800aa6a <_dtoa_r+0x80a>
 800adb2:	9b08      	ldr	r3, [sp, #32]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f77f aed6 	ble.w	800ab66 <_dtoa_r+0x906>
 800adba:	4656      	mov	r6, sl
 800adbc:	4621      	mov	r1, r4
 800adbe:	4648      	mov	r0, r9
 800adc0:	f7ff f9c6 	bl	800a150 <quorem>
 800adc4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800adc8:	9b08      	ldr	r3, [sp, #32]
 800adca:	f806 8b01 	strb.w	r8, [r6], #1
 800adce:	eba6 020a 	sub.w	r2, r6, sl
 800add2:	4293      	cmp	r3, r2
 800add4:	ddb3      	ble.n	800ad3e <_dtoa_r+0xade>
 800add6:	4649      	mov	r1, r9
 800add8:	2300      	movs	r3, #0
 800adda:	220a      	movs	r2, #10
 800addc:	4658      	mov	r0, fp
 800adde:	f000 fcb3 	bl	800b748 <__multadd>
 800ade2:	4681      	mov	r9, r0
 800ade4:	e7ea      	b.n	800adbc <_dtoa_r+0xb5c>
 800ade6:	bf00      	nop
 800ade8:	0800ccbe 	.word	0x0800ccbe
 800adec:	0800cc59 	.word	0x0800cc59

0800adf0 <_free_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4605      	mov	r5, r0
 800adf4:	2900      	cmp	r1, #0
 800adf6:	d040      	beq.n	800ae7a <_free_r+0x8a>
 800adf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfc:	1f0c      	subs	r4, r1, #4
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bfb8      	it	lt
 800ae02:	18e4      	addlt	r4, r4, r3
 800ae04:	f000 fc32 	bl	800b66c <__malloc_lock>
 800ae08:	4a1c      	ldr	r2, [pc, #112]	@ (800ae7c <_free_r+0x8c>)
 800ae0a:	6813      	ldr	r3, [r2, #0]
 800ae0c:	b933      	cbnz	r3, 800ae1c <_free_r+0x2c>
 800ae0e:	6063      	str	r3, [r4, #4]
 800ae10:	6014      	str	r4, [r2, #0]
 800ae12:	4628      	mov	r0, r5
 800ae14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae18:	f000 bc2e 	b.w	800b678 <__malloc_unlock>
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	d908      	bls.n	800ae32 <_free_r+0x42>
 800ae20:	6820      	ldr	r0, [r4, #0]
 800ae22:	1821      	adds	r1, r4, r0
 800ae24:	428b      	cmp	r3, r1
 800ae26:	bf01      	itttt	eq
 800ae28:	6819      	ldreq	r1, [r3, #0]
 800ae2a:	685b      	ldreq	r3, [r3, #4]
 800ae2c:	1809      	addeq	r1, r1, r0
 800ae2e:	6021      	streq	r1, [r4, #0]
 800ae30:	e7ed      	b.n	800ae0e <_free_r+0x1e>
 800ae32:	461a      	mov	r2, r3
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	b10b      	cbz	r3, 800ae3c <_free_r+0x4c>
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	d9fa      	bls.n	800ae32 <_free_r+0x42>
 800ae3c:	6811      	ldr	r1, [r2, #0]
 800ae3e:	1850      	adds	r0, r2, r1
 800ae40:	42a0      	cmp	r0, r4
 800ae42:	d10b      	bne.n	800ae5c <_free_r+0x6c>
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	4401      	add	r1, r0
 800ae48:	1850      	adds	r0, r2, r1
 800ae4a:	4283      	cmp	r3, r0
 800ae4c:	6011      	str	r1, [r2, #0]
 800ae4e:	d1e0      	bne.n	800ae12 <_free_r+0x22>
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	4408      	add	r0, r1
 800ae56:	6010      	str	r0, [r2, #0]
 800ae58:	6053      	str	r3, [r2, #4]
 800ae5a:	e7da      	b.n	800ae12 <_free_r+0x22>
 800ae5c:	d902      	bls.n	800ae64 <_free_r+0x74>
 800ae5e:	230c      	movs	r3, #12
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	e7d6      	b.n	800ae12 <_free_r+0x22>
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	1821      	adds	r1, r4, r0
 800ae68:	428b      	cmp	r3, r1
 800ae6a:	bf01      	itttt	eq
 800ae6c:	6819      	ldreq	r1, [r3, #0]
 800ae6e:	685b      	ldreq	r3, [r3, #4]
 800ae70:	1809      	addeq	r1, r1, r0
 800ae72:	6021      	streq	r1, [r4, #0]
 800ae74:	6063      	str	r3, [r4, #4]
 800ae76:	6054      	str	r4, [r2, #4]
 800ae78:	e7cb      	b.n	800ae12 <_free_r+0x22>
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20000f70 	.word	0x20000f70

0800ae80 <rshift>:
 800ae80:	6903      	ldr	r3, [r0, #16]
 800ae82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae8a:	f100 0414 	add.w	r4, r0, #20
 800ae8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae92:	dd46      	ble.n	800af22 <rshift+0xa2>
 800ae94:	f011 011f 	ands.w	r1, r1, #31
 800ae98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aea0:	d10c      	bne.n	800aebc <rshift+0x3c>
 800aea2:	4629      	mov	r1, r5
 800aea4:	f100 0710 	add.w	r7, r0, #16
 800aea8:	42b1      	cmp	r1, r6
 800aeaa:	d335      	bcc.n	800af18 <rshift+0x98>
 800aeac:	1a9b      	subs	r3, r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	1eea      	subs	r2, r5, #3
 800aeb2:	4296      	cmp	r6, r2
 800aeb4:	bf38      	it	cc
 800aeb6:	2300      	movcc	r3, #0
 800aeb8:	4423      	add	r3, r4
 800aeba:	e015      	b.n	800aee8 <rshift+0x68>
 800aebc:	46a1      	mov	r9, r4
 800aebe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aec2:	f1c1 0820 	rsb	r8, r1, #32
 800aec6:	40cf      	lsrs	r7, r1
 800aec8:	f105 0e04 	add.w	lr, r5, #4
 800aecc:	4576      	cmp	r6, lr
 800aece:	46f4      	mov	ip, lr
 800aed0:	d816      	bhi.n	800af00 <rshift+0x80>
 800aed2:	1a9a      	subs	r2, r3, r2
 800aed4:	0092      	lsls	r2, r2, #2
 800aed6:	3a04      	subs	r2, #4
 800aed8:	3501      	adds	r5, #1
 800aeda:	42ae      	cmp	r6, r5
 800aedc:	bf38      	it	cc
 800aede:	2200      	movcc	r2, #0
 800aee0:	18a3      	adds	r3, r4, r2
 800aee2:	50a7      	str	r7, [r4, r2]
 800aee4:	b107      	cbz	r7, 800aee8 <rshift+0x68>
 800aee6:	3304      	adds	r3, #4
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	eba3 0204 	sub.w	r2, r3, r4
 800aeee:	bf08      	it	eq
 800aef0:	2300      	moveq	r3, #0
 800aef2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aef6:	6102      	str	r2, [r0, #16]
 800aef8:	bf08      	it	eq
 800aefa:	6143      	streq	r3, [r0, #20]
 800aefc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af00:	f8dc c000 	ldr.w	ip, [ip]
 800af04:	fa0c fc08 	lsl.w	ip, ip, r8
 800af08:	ea4c 0707 	orr.w	r7, ip, r7
 800af0c:	f849 7b04 	str.w	r7, [r9], #4
 800af10:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af14:	40cf      	lsrs	r7, r1
 800af16:	e7d9      	b.n	800aecc <rshift+0x4c>
 800af18:	f851 cb04 	ldr.w	ip, [r1], #4
 800af1c:	f847 cf04 	str.w	ip, [r7, #4]!
 800af20:	e7c2      	b.n	800aea8 <rshift+0x28>
 800af22:	4623      	mov	r3, r4
 800af24:	e7e0      	b.n	800aee8 <rshift+0x68>

0800af26 <__hexdig_fun>:
 800af26:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800af2a:	2b09      	cmp	r3, #9
 800af2c:	d802      	bhi.n	800af34 <__hexdig_fun+0xe>
 800af2e:	3820      	subs	r0, #32
 800af30:	b2c0      	uxtb	r0, r0
 800af32:	4770      	bx	lr
 800af34:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af38:	2b05      	cmp	r3, #5
 800af3a:	d801      	bhi.n	800af40 <__hexdig_fun+0x1a>
 800af3c:	3847      	subs	r0, #71	@ 0x47
 800af3e:	e7f7      	b.n	800af30 <__hexdig_fun+0xa>
 800af40:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800af44:	2b05      	cmp	r3, #5
 800af46:	d801      	bhi.n	800af4c <__hexdig_fun+0x26>
 800af48:	3827      	subs	r0, #39	@ 0x27
 800af4a:	e7f1      	b.n	800af30 <__hexdig_fun+0xa>
 800af4c:	2000      	movs	r0, #0
 800af4e:	4770      	bx	lr

0800af50 <__gethex>:
 800af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	468a      	mov	sl, r1
 800af56:	4690      	mov	r8, r2
 800af58:	b085      	sub	sp, #20
 800af5a:	9302      	str	r3, [sp, #8]
 800af5c:	680b      	ldr	r3, [r1, #0]
 800af5e:	9001      	str	r0, [sp, #4]
 800af60:	1c9c      	adds	r4, r3, #2
 800af62:	46a1      	mov	r9, r4
 800af64:	f814 0b01 	ldrb.w	r0, [r4], #1
 800af68:	2830      	cmp	r0, #48	@ 0x30
 800af6a:	d0fa      	beq.n	800af62 <__gethex+0x12>
 800af6c:	eba9 0303 	sub.w	r3, r9, r3
 800af70:	f1a3 0b02 	sub.w	fp, r3, #2
 800af74:	f7ff ffd7 	bl	800af26 <__hexdig_fun>
 800af78:	4605      	mov	r5, r0
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d168      	bne.n	800b050 <__gethex+0x100>
 800af7e:	2201      	movs	r2, #1
 800af80:	4648      	mov	r0, r9
 800af82:	499f      	ldr	r1, [pc, #636]	@ (800b200 <__gethex+0x2b0>)
 800af84:	f7fe ff95 	bl	8009eb2 <strncmp>
 800af88:	4607      	mov	r7, r0
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d167      	bne.n	800b05e <__gethex+0x10e>
 800af8e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800af92:	4626      	mov	r6, r4
 800af94:	f7ff ffc7 	bl	800af26 <__hexdig_fun>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d062      	beq.n	800b062 <__gethex+0x112>
 800af9c:	4623      	mov	r3, r4
 800af9e:	7818      	ldrb	r0, [r3, #0]
 800afa0:	4699      	mov	r9, r3
 800afa2:	2830      	cmp	r0, #48	@ 0x30
 800afa4:	f103 0301 	add.w	r3, r3, #1
 800afa8:	d0f9      	beq.n	800af9e <__gethex+0x4e>
 800afaa:	f7ff ffbc 	bl	800af26 <__hexdig_fun>
 800afae:	fab0 f580 	clz	r5, r0
 800afb2:	f04f 0b01 	mov.w	fp, #1
 800afb6:	096d      	lsrs	r5, r5, #5
 800afb8:	464a      	mov	r2, r9
 800afba:	4616      	mov	r6, r2
 800afbc:	7830      	ldrb	r0, [r6, #0]
 800afbe:	3201      	adds	r2, #1
 800afc0:	f7ff ffb1 	bl	800af26 <__hexdig_fun>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d1f8      	bne.n	800afba <__gethex+0x6a>
 800afc8:	2201      	movs	r2, #1
 800afca:	4630      	mov	r0, r6
 800afcc:	498c      	ldr	r1, [pc, #560]	@ (800b200 <__gethex+0x2b0>)
 800afce:	f7fe ff70 	bl	8009eb2 <strncmp>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d13f      	bne.n	800b056 <__gethex+0x106>
 800afd6:	b944      	cbnz	r4, 800afea <__gethex+0x9a>
 800afd8:	1c74      	adds	r4, r6, #1
 800afda:	4622      	mov	r2, r4
 800afdc:	4616      	mov	r6, r2
 800afde:	7830      	ldrb	r0, [r6, #0]
 800afe0:	3201      	adds	r2, #1
 800afe2:	f7ff ffa0 	bl	800af26 <__hexdig_fun>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d1f8      	bne.n	800afdc <__gethex+0x8c>
 800afea:	1ba4      	subs	r4, r4, r6
 800afec:	00a7      	lsls	r7, r4, #2
 800afee:	7833      	ldrb	r3, [r6, #0]
 800aff0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aff4:	2b50      	cmp	r3, #80	@ 0x50
 800aff6:	d13e      	bne.n	800b076 <__gethex+0x126>
 800aff8:	7873      	ldrb	r3, [r6, #1]
 800affa:	2b2b      	cmp	r3, #43	@ 0x2b
 800affc:	d033      	beq.n	800b066 <__gethex+0x116>
 800affe:	2b2d      	cmp	r3, #45	@ 0x2d
 800b000:	d034      	beq.n	800b06c <__gethex+0x11c>
 800b002:	2400      	movs	r4, #0
 800b004:	1c71      	adds	r1, r6, #1
 800b006:	7808      	ldrb	r0, [r1, #0]
 800b008:	f7ff ff8d 	bl	800af26 <__hexdig_fun>
 800b00c:	1e43      	subs	r3, r0, #1
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b18      	cmp	r3, #24
 800b012:	d830      	bhi.n	800b076 <__gethex+0x126>
 800b014:	f1a0 0210 	sub.w	r2, r0, #16
 800b018:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b01c:	f7ff ff83 	bl	800af26 <__hexdig_fun>
 800b020:	f100 3cff 	add.w	ip, r0, #4294967295
 800b024:	fa5f fc8c 	uxtb.w	ip, ip
 800b028:	f1bc 0f18 	cmp.w	ip, #24
 800b02c:	f04f 030a 	mov.w	r3, #10
 800b030:	d91e      	bls.n	800b070 <__gethex+0x120>
 800b032:	b104      	cbz	r4, 800b036 <__gethex+0xe6>
 800b034:	4252      	negs	r2, r2
 800b036:	4417      	add	r7, r2
 800b038:	f8ca 1000 	str.w	r1, [sl]
 800b03c:	b1ed      	cbz	r5, 800b07a <__gethex+0x12a>
 800b03e:	f1bb 0f00 	cmp.w	fp, #0
 800b042:	bf0c      	ite	eq
 800b044:	2506      	moveq	r5, #6
 800b046:	2500      	movne	r5, #0
 800b048:	4628      	mov	r0, r5
 800b04a:	b005      	add	sp, #20
 800b04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b050:	2500      	movs	r5, #0
 800b052:	462c      	mov	r4, r5
 800b054:	e7b0      	b.n	800afb8 <__gethex+0x68>
 800b056:	2c00      	cmp	r4, #0
 800b058:	d1c7      	bne.n	800afea <__gethex+0x9a>
 800b05a:	4627      	mov	r7, r4
 800b05c:	e7c7      	b.n	800afee <__gethex+0x9e>
 800b05e:	464e      	mov	r6, r9
 800b060:	462f      	mov	r7, r5
 800b062:	2501      	movs	r5, #1
 800b064:	e7c3      	b.n	800afee <__gethex+0x9e>
 800b066:	2400      	movs	r4, #0
 800b068:	1cb1      	adds	r1, r6, #2
 800b06a:	e7cc      	b.n	800b006 <__gethex+0xb6>
 800b06c:	2401      	movs	r4, #1
 800b06e:	e7fb      	b.n	800b068 <__gethex+0x118>
 800b070:	fb03 0002 	mla	r0, r3, r2, r0
 800b074:	e7ce      	b.n	800b014 <__gethex+0xc4>
 800b076:	4631      	mov	r1, r6
 800b078:	e7de      	b.n	800b038 <__gethex+0xe8>
 800b07a:	4629      	mov	r1, r5
 800b07c:	eba6 0309 	sub.w	r3, r6, r9
 800b080:	3b01      	subs	r3, #1
 800b082:	2b07      	cmp	r3, #7
 800b084:	dc0a      	bgt.n	800b09c <__gethex+0x14c>
 800b086:	9801      	ldr	r0, [sp, #4]
 800b088:	f000 fafc 	bl	800b684 <_Balloc>
 800b08c:	4604      	mov	r4, r0
 800b08e:	b940      	cbnz	r0, 800b0a2 <__gethex+0x152>
 800b090:	4602      	mov	r2, r0
 800b092:	21e4      	movs	r1, #228	@ 0xe4
 800b094:	4b5b      	ldr	r3, [pc, #364]	@ (800b204 <__gethex+0x2b4>)
 800b096:	485c      	ldr	r0, [pc, #368]	@ (800b208 <__gethex+0x2b8>)
 800b098:	f7ff f83c 	bl	800a114 <__assert_func>
 800b09c:	3101      	adds	r1, #1
 800b09e:	105b      	asrs	r3, r3, #1
 800b0a0:	e7ef      	b.n	800b082 <__gethex+0x132>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f100 0a14 	add.w	sl, r0, #20
 800b0a8:	4655      	mov	r5, sl
 800b0aa:	469b      	mov	fp, r3
 800b0ac:	45b1      	cmp	r9, r6
 800b0ae:	d337      	bcc.n	800b120 <__gethex+0x1d0>
 800b0b0:	f845 bb04 	str.w	fp, [r5], #4
 800b0b4:	eba5 050a 	sub.w	r5, r5, sl
 800b0b8:	10ad      	asrs	r5, r5, #2
 800b0ba:	6125      	str	r5, [r4, #16]
 800b0bc:	4658      	mov	r0, fp
 800b0be:	f000 fbd3 	bl	800b868 <__hi0bits>
 800b0c2:	016d      	lsls	r5, r5, #5
 800b0c4:	f8d8 6000 	ldr.w	r6, [r8]
 800b0c8:	1a2d      	subs	r5, r5, r0
 800b0ca:	42b5      	cmp	r5, r6
 800b0cc:	dd54      	ble.n	800b178 <__gethex+0x228>
 800b0ce:	1bad      	subs	r5, r5, r6
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 ff5b 	bl	800bf8e <__any_on>
 800b0d8:	4681      	mov	r9, r0
 800b0da:	b178      	cbz	r0, 800b0fc <__gethex+0x1ac>
 800b0dc:	f04f 0901 	mov.w	r9, #1
 800b0e0:	1e6b      	subs	r3, r5, #1
 800b0e2:	1159      	asrs	r1, r3, #5
 800b0e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b0e8:	f003 021f 	and.w	r2, r3, #31
 800b0ec:	fa09 f202 	lsl.w	r2, r9, r2
 800b0f0:	420a      	tst	r2, r1
 800b0f2:	d003      	beq.n	800b0fc <__gethex+0x1ac>
 800b0f4:	454b      	cmp	r3, r9
 800b0f6:	dc36      	bgt.n	800b166 <__gethex+0x216>
 800b0f8:	f04f 0902 	mov.w	r9, #2
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7ff febe 	bl	800ae80 <rshift>
 800b104:	442f      	add	r7, r5
 800b106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b10a:	42bb      	cmp	r3, r7
 800b10c:	da42      	bge.n	800b194 <__gethex+0x244>
 800b10e:	4621      	mov	r1, r4
 800b110:	9801      	ldr	r0, [sp, #4]
 800b112:	f000 faf7 	bl	800b704 <_Bfree>
 800b116:	2300      	movs	r3, #0
 800b118:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b11a:	25a3      	movs	r5, #163	@ 0xa3
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	e793      	b.n	800b048 <__gethex+0xf8>
 800b120:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b124:	2a2e      	cmp	r2, #46	@ 0x2e
 800b126:	d012      	beq.n	800b14e <__gethex+0x1fe>
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d104      	bne.n	800b136 <__gethex+0x1e6>
 800b12c:	f845 bb04 	str.w	fp, [r5], #4
 800b130:	f04f 0b00 	mov.w	fp, #0
 800b134:	465b      	mov	r3, fp
 800b136:	7830      	ldrb	r0, [r6, #0]
 800b138:	9303      	str	r3, [sp, #12]
 800b13a:	f7ff fef4 	bl	800af26 <__hexdig_fun>
 800b13e:	9b03      	ldr	r3, [sp, #12]
 800b140:	f000 000f 	and.w	r0, r0, #15
 800b144:	4098      	lsls	r0, r3
 800b146:	ea4b 0b00 	orr.w	fp, fp, r0
 800b14a:	3304      	adds	r3, #4
 800b14c:	e7ae      	b.n	800b0ac <__gethex+0x15c>
 800b14e:	45b1      	cmp	r9, r6
 800b150:	d8ea      	bhi.n	800b128 <__gethex+0x1d8>
 800b152:	2201      	movs	r2, #1
 800b154:	4630      	mov	r0, r6
 800b156:	492a      	ldr	r1, [pc, #168]	@ (800b200 <__gethex+0x2b0>)
 800b158:	9303      	str	r3, [sp, #12]
 800b15a:	f7fe feaa 	bl	8009eb2 <strncmp>
 800b15e:	9b03      	ldr	r3, [sp, #12]
 800b160:	2800      	cmp	r0, #0
 800b162:	d1e1      	bne.n	800b128 <__gethex+0x1d8>
 800b164:	e7a2      	b.n	800b0ac <__gethex+0x15c>
 800b166:	4620      	mov	r0, r4
 800b168:	1ea9      	subs	r1, r5, #2
 800b16a:	f000 ff10 	bl	800bf8e <__any_on>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d0c2      	beq.n	800b0f8 <__gethex+0x1a8>
 800b172:	f04f 0903 	mov.w	r9, #3
 800b176:	e7c1      	b.n	800b0fc <__gethex+0x1ac>
 800b178:	da09      	bge.n	800b18e <__gethex+0x23e>
 800b17a:	1b75      	subs	r5, r6, r5
 800b17c:	4621      	mov	r1, r4
 800b17e:	462a      	mov	r2, r5
 800b180:	9801      	ldr	r0, [sp, #4]
 800b182:	f000 fcd5 	bl	800bb30 <__lshift>
 800b186:	4604      	mov	r4, r0
 800b188:	1b7f      	subs	r7, r7, r5
 800b18a:	f100 0a14 	add.w	sl, r0, #20
 800b18e:	f04f 0900 	mov.w	r9, #0
 800b192:	e7b8      	b.n	800b106 <__gethex+0x1b6>
 800b194:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b198:	42bd      	cmp	r5, r7
 800b19a:	dd6f      	ble.n	800b27c <__gethex+0x32c>
 800b19c:	1bed      	subs	r5, r5, r7
 800b19e:	42ae      	cmp	r6, r5
 800b1a0:	dc34      	bgt.n	800b20c <__gethex+0x2bc>
 800b1a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d022      	beq.n	800b1f0 <__gethex+0x2a0>
 800b1aa:	2b03      	cmp	r3, #3
 800b1ac:	d024      	beq.n	800b1f8 <__gethex+0x2a8>
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d115      	bne.n	800b1de <__gethex+0x28e>
 800b1b2:	42ae      	cmp	r6, r5
 800b1b4:	d113      	bne.n	800b1de <__gethex+0x28e>
 800b1b6:	2e01      	cmp	r6, #1
 800b1b8:	d10b      	bne.n	800b1d2 <__gethex+0x282>
 800b1ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1be:	9a02      	ldr	r2, [sp, #8]
 800b1c0:	2562      	movs	r5, #98	@ 0x62
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	6123      	str	r3, [r4, #16]
 800b1c8:	f8ca 3000 	str.w	r3, [sl]
 800b1cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ce:	601c      	str	r4, [r3, #0]
 800b1d0:	e73a      	b.n	800b048 <__gethex+0xf8>
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	1e71      	subs	r1, r6, #1
 800b1d6:	f000 feda 	bl	800bf8e <__any_on>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d1ed      	bne.n	800b1ba <__gethex+0x26a>
 800b1de:	4621      	mov	r1, r4
 800b1e0:	9801      	ldr	r0, [sp, #4]
 800b1e2:	f000 fa8f 	bl	800b704 <_Bfree>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1ea:	2550      	movs	r5, #80	@ 0x50
 800b1ec:	6013      	str	r3, [r2, #0]
 800b1ee:	e72b      	b.n	800b048 <__gethex+0xf8>
 800b1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1f3      	bne.n	800b1de <__gethex+0x28e>
 800b1f6:	e7e0      	b.n	800b1ba <__gethex+0x26a>
 800b1f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1dd      	bne.n	800b1ba <__gethex+0x26a>
 800b1fe:	e7ee      	b.n	800b1de <__gethex+0x28e>
 800b200:	0800cb18 	.word	0x0800cb18
 800b204:	0800ccbe 	.word	0x0800ccbe
 800b208:	0800cccf 	.word	0x0800cccf
 800b20c:	1e6f      	subs	r7, r5, #1
 800b20e:	f1b9 0f00 	cmp.w	r9, #0
 800b212:	d130      	bne.n	800b276 <__gethex+0x326>
 800b214:	b127      	cbz	r7, 800b220 <__gethex+0x2d0>
 800b216:	4639      	mov	r1, r7
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 feb8 	bl	800bf8e <__any_on>
 800b21e:	4681      	mov	r9, r0
 800b220:	2301      	movs	r3, #1
 800b222:	4629      	mov	r1, r5
 800b224:	1b76      	subs	r6, r6, r5
 800b226:	2502      	movs	r5, #2
 800b228:	117a      	asrs	r2, r7, #5
 800b22a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b22e:	f007 071f 	and.w	r7, r7, #31
 800b232:	40bb      	lsls	r3, r7
 800b234:	4213      	tst	r3, r2
 800b236:	4620      	mov	r0, r4
 800b238:	bf18      	it	ne
 800b23a:	f049 0902 	orrne.w	r9, r9, #2
 800b23e:	f7ff fe1f 	bl	800ae80 <rshift>
 800b242:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b246:	f1b9 0f00 	cmp.w	r9, #0
 800b24a:	d047      	beq.n	800b2dc <__gethex+0x38c>
 800b24c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b250:	2b02      	cmp	r3, #2
 800b252:	d015      	beq.n	800b280 <__gethex+0x330>
 800b254:	2b03      	cmp	r3, #3
 800b256:	d017      	beq.n	800b288 <__gethex+0x338>
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d109      	bne.n	800b270 <__gethex+0x320>
 800b25c:	f019 0f02 	tst.w	r9, #2
 800b260:	d006      	beq.n	800b270 <__gethex+0x320>
 800b262:	f8da 3000 	ldr.w	r3, [sl]
 800b266:	ea49 0903 	orr.w	r9, r9, r3
 800b26a:	f019 0f01 	tst.w	r9, #1
 800b26e:	d10e      	bne.n	800b28e <__gethex+0x33e>
 800b270:	f045 0510 	orr.w	r5, r5, #16
 800b274:	e032      	b.n	800b2dc <__gethex+0x38c>
 800b276:	f04f 0901 	mov.w	r9, #1
 800b27a:	e7d1      	b.n	800b220 <__gethex+0x2d0>
 800b27c:	2501      	movs	r5, #1
 800b27e:	e7e2      	b.n	800b246 <__gethex+0x2f6>
 800b280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b282:	f1c3 0301 	rsb	r3, r3, #1
 800b286:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d0f0      	beq.n	800b270 <__gethex+0x320>
 800b28e:	f04f 0c00 	mov.w	ip, #0
 800b292:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b296:	f104 0314 	add.w	r3, r4, #20
 800b29a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b29e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2ac:	d01b      	beq.n	800b2e6 <__gethex+0x396>
 800b2ae:	3201      	adds	r2, #1
 800b2b0:	6002      	str	r2, [r0, #0]
 800b2b2:	2d02      	cmp	r5, #2
 800b2b4:	f104 0314 	add.w	r3, r4, #20
 800b2b8:	d13c      	bne.n	800b334 <__gethex+0x3e4>
 800b2ba:	f8d8 2000 	ldr.w	r2, [r8]
 800b2be:	3a01      	subs	r2, #1
 800b2c0:	42b2      	cmp	r2, r6
 800b2c2:	d109      	bne.n	800b2d8 <__gethex+0x388>
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	1171      	asrs	r1, r6, #5
 800b2c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2cc:	f006 061f 	and.w	r6, r6, #31
 800b2d0:	fa02 f606 	lsl.w	r6, r2, r6
 800b2d4:	421e      	tst	r6, r3
 800b2d6:	d13a      	bne.n	800b34e <__gethex+0x3fe>
 800b2d8:	f045 0520 	orr.w	r5, r5, #32
 800b2dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2de:	601c      	str	r4, [r3, #0]
 800b2e0:	9b02      	ldr	r3, [sp, #8]
 800b2e2:	601f      	str	r7, [r3, #0]
 800b2e4:	e6b0      	b.n	800b048 <__gethex+0xf8>
 800b2e6:	4299      	cmp	r1, r3
 800b2e8:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2ec:	d8d9      	bhi.n	800b2a2 <__gethex+0x352>
 800b2ee:	68a3      	ldr	r3, [r4, #8]
 800b2f0:	459b      	cmp	fp, r3
 800b2f2:	db17      	blt.n	800b324 <__gethex+0x3d4>
 800b2f4:	6861      	ldr	r1, [r4, #4]
 800b2f6:	9801      	ldr	r0, [sp, #4]
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	f000 f9c3 	bl	800b684 <_Balloc>
 800b2fe:	4681      	mov	r9, r0
 800b300:	b918      	cbnz	r0, 800b30a <__gethex+0x3ba>
 800b302:	4602      	mov	r2, r0
 800b304:	2184      	movs	r1, #132	@ 0x84
 800b306:	4b19      	ldr	r3, [pc, #100]	@ (800b36c <__gethex+0x41c>)
 800b308:	e6c5      	b.n	800b096 <__gethex+0x146>
 800b30a:	6922      	ldr	r2, [r4, #16]
 800b30c:	f104 010c 	add.w	r1, r4, #12
 800b310:	3202      	adds	r2, #2
 800b312:	0092      	lsls	r2, r2, #2
 800b314:	300c      	adds	r0, #12
 800b316:	f7fe fee8 	bl	800a0ea <memcpy>
 800b31a:	4621      	mov	r1, r4
 800b31c:	9801      	ldr	r0, [sp, #4]
 800b31e:	f000 f9f1 	bl	800b704 <_Bfree>
 800b322:	464c      	mov	r4, r9
 800b324:	6923      	ldr	r3, [r4, #16]
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	6122      	str	r2, [r4, #16]
 800b32a:	2201      	movs	r2, #1
 800b32c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b330:	615a      	str	r2, [r3, #20]
 800b332:	e7be      	b.n	800b2b2 <__gethex+0x362>
 800b334:	6922      	ldr	r2, [r4, #16]
 800b336:	455a      	cmp	r2, fp
 800b338:	dd0b      	ble.n	800b352 <__gethex+0x402>
 800b33a:	2101      	movs	r1, #1
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7ff fd9f 	bl	800ae80 <rshift>
 800b342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b346:	3701      	adds	r7, #1
 800b348:	42bb      	cmp	r3, r7
 800b34a:	f6ff aee0 	blt.w	800b10e <__gethex+0x1be>
 800b34e:	2501      	movs	r5, #1
 800b350:	e7c2      	b.n	800b2d8 <__gethex+0x388>
 800b352:	f016 061f 	ands.w	r6, r6, #31
 800b356:	d0fa      	beq.n	800b34e <__gethex+0x3fe>
 800b358:	4453      	add	r3, sl
 800b35a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b35e:	f000 fa83 	bl	800b868 <__hi0bits>
 800b362:	f1c6 0620 	rsb	r6, r6, #32
 800b366:	42b0      	cmp	r0, r6
 800b368:	dbe7      	blt.n	800b33a <__gethex+0x3ea>
 800b36a:	e7f0      	b.n	800b34e <__gethex+0x3fe>
 800b36c:	0800ccbe 	.word	0x0800ccbe

0800b370 <L_shift>:
 800b370:	f1c2 0208 	rsb	r2, r2, #8
 800b374:	0092      	lsls	r2, r2, #2
 800b376:	b570      	push	{r4, r5, r6, lr}
 800b378:	f1c2 0620 	rsb	r6, r2, #32
 800b37c:	6843      	ldr	r3, [r0, #4]
 800b37e:	6804      	ldr	r4, [r0, #0]
 800b380:	fa03 f506 	lsl.w	r5, r3, r6
 800b384:	432c      	orrs	r4, r5
 800b386:	40d3      	lsrs	r3, r2
 800b388:	6004      	str	r4, [r0, #0]
 800b38a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b38e:	4288      	cmp	r0, r1
 800b390:	d3f4      	bcc.n	800b37c <L_shift+0xc>
 800b392:	bd70      	pop	{r4, r5, r6, pc}

0800b394 <__match>:
 800b394:	b530      	push	{r4, r5, lr}
 800b396:	6803      	ldr	r3, [r0, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b39e:	b914      	cbnz	r4, 800b3a6 <__match+0x12>
 800b3a0:	6003      	str	r3, [r0, #0]
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	bd30      	pop	{r4, r5, pc}
 800b3a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3aa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b3ae:	2d19      	cmp	r5, #25
 800b3b0:	bf98      	it	ls
 800b3b2:	3220      	addls	r2, #32
 800b3b4:	42a2      	cmp	r2, r4
 800b3b6:	d0f0      	beq.n	800b39a <__match+0x6>
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	e7f3      	b.n	800b3a4 <__match+0x10>

0800b3bc <__hexnan>:
 800b3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c0:	2500      	movs	r5, #0
 800b3c2:	680b      	ldr	r3, [r1, #0]
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	115e      	asrs	r6, r3, #5
 800b3c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3cc:	f013 031f 	ands.w	r3, r3, #31
 800b3d0:	bf18      	it	ne
 800b3d2:	3604      	addne	r6, #4
 800b3d4:	1f37      	subs	r7, r6, #4
 800b3d6:	4690      	mov	r8, r2
 800b3d8:	46b9      	mov	r9, r7
 800b3da:	463c      	mov	r4, r7
 800b3dc:	46ab      	mov	fp, r5
 800b3de:	b087      	sub	sp, #28
 800b3e0:	6801      	ldr	r1, [r0, #0]
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3e8:	9502      	str	r5, [sp, #8]
 800b3ea:	784a      	ldrb	r2, [r1, #1]
 800b3ec:	1c4b      	adds	r3, r1, #1
 800b3ee:	9303      	str	r3, [sp, #12]
 800b3f0:	b342      	cbz	r2, 800b444 <__hexnan+0x88>
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	9105      	str	r1, [sp, #20]
 800b3f6:	9204      	str	r2, [sp, #16]
 800b3f8:	f7ff fd95 	bl	800af26 <__hexdig_fun>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d151      	bne.n	800b4a4 <__hexnan+0xe8>
 800b400:	9a04      	ldr	r2, [sp, #16]
 800b402:	9905      	ldr	r1, [sp, #20]
 800b404:	2a20      	cmp	r2, #32
 800b406:	d818      	bhi.n	800b43a <__hexnan+0x7e>
 800b408:	9b02      	ldr	r3, [sp, #8]
 800b40a:	459b      	cmp	fp, r3
 800b40c:	dd13      	ble.n	800b436 <__hexnan+0x7a>
 800b40e:	454c      	cmp	r4, r9
 800b410:	d206      	bcs.n	800b420 <__hexnan+0x64>
 800b412:	2d07      	cmp	r5, #7
 800b414:	dc04      	bgt.n	800b420 <__hexnan+0x64>
 800b416:	462a      	mov	r2, r5
 800b418:	4649      	mov	r1, r9
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff ffa8 	bl	800b370 <L_shift>
 800b420:	4544      	cmp	r4, r8
 800b422:	d952      	bls.n	800b4ca <__hexnan+0x10e>
 800b424:	2300      	movs	r3, #0
 800b426:	f1a4 0904 	sub.w	r9, r4, #4
 800b42a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b42e:	461d      	mov	r5, r3
 800b430:	464c      	mov	r4, r9
 800b432:	f8cd b008 	str.w	fp, [sp, #8]
 800b436:	9903      	ldr	r1, [sp, #12]
 800b438:	e7d7      	b.n	800b3ea <__hexnan+0x2e>
 800b43a:	2a29      	cmp	r2, #41	@ 0x29
 800b43c:	d157      	bne.n	800b4ee <__hexnan+0x132>
 800b43e:	3102      	adds	r1, #2
 800b440:	f8ca 1000 	str.w	r1, [sl]
 800b444:	f1bb 0f00 	cmp.w	fp, #0
 800b448:	d051      	beq.n	800b4ee <__hexnan+0x132>
 800b44a:	454c      	cmp	r4, r9
 800b44c:	d206      	bcs.n	800b45c <__hexnan+0xa0>
 800b44e:	2d07      	cmp	r5, #7
 800b450:	dc04      	bgt.n	800b45c <__hexnan+0xa0>
 800b452:	462a      	mov	r2, r5
 800b454:	4649      	mov	r1, r9
 800b456:	4620      	mov	r0, r4
 800b458:	f7ff ff8a 	bl	800b370 <L_shift>
 800b45c:	4544      	cmp	r4, r8
 800b45e:	d936      	bls.n	800b4ce <__hexnan+0x112>
 800b460:	4623      	mov	r3, r4
 800b462:	f1a8 0204 	sub.w	r2, r8, #4
 800b466:	f853 1b04 	ldr.w	r1, [r3], #4
 800b46a:	429f      	cmp	r7, r3
 800b46c:	f842 1f04 	str.w	r1, [r2, #4]!
 800b470:	d2f9      	bcs.n	800b466 <__hexnan+0xaa>
 800b472:	1b3b      	subs	r3, r7, r4
 800b474:	f023 0303 	bic.w	r3, r3, #3
 800b478:	3304      	adds	r3, #4
 800b47a:	3401      	adds	r4, #1
 800b47c:	3e03      	subs	r6, #3
 800b47e:	42b4      	cmp	r4, r6
 800b480:	bf88      	it	hi
 800b482:	2304      	movhi	r3, #4
 800b484:	2200      	movs	r2, #0
 800b486:	4443      	add	r3, r8
 800b488:	f843 2b04 	str.w	r2, [r3], #4
 800b48c:	429f      	cmp	r7, r3
 800b48e:	d2fb      	bcs.n	800b488 <__hexnan+0xcc>
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	b91b      	cbnz	r3, 800b49c <__hexnan+0xe0>
 800b494:	4547      	cmp	r7, r8
 800b496:	d128      	bne.n	800b4ea <__hexnan+0x12e>
 800b498:	2301      	movs	r3, #1
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	2005      	movs	r0, #5
 800b49e:	b007      	add	sp, #28
 800b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	3501      	adds	r5, #1
 800b4a6:	2d08      	cmp	r5, #8
 800b4a8:	f10b 0b01 	add.w	fp, fp, #1
 800b4ac:	dd06      	ble.n	800b4bc <__hexnan+0x100>
 800b4ae:	4544      	cmp	r4, r8
 800b4b0:	d9c1      	bls.n	800b436 <__hexnan+0x7a>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	2501      	movs	r5, #1
 800b4b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4ba:	3c04      	subs	r4, #4
 800b4bc:	6822      	ldr	r2, [r4, #0]
 800b4be:	f000 000f 	and.w	r0, r0, #15
 800b4c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b4c6:	6020      	str	r0, [r4, #0]
 800b4c8:	e7b5      	b.n	800b436 <__hexnan+0x7a>
 800b4ca:	2508      	movs	r5, #8
 800b4cc:	e7b3      	b.n	800b436 <__hexnan+0x7a>
 800b4ce:	9b01      	ldr	r3, [sp, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d0dd      	beq.n	800b490 <__hexnan+0xd4>
 800b4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d8:	f1c3 0320 	rsb	r3, r3, #32
 800b4dc:	40da      	lsrs	r2, r3
 800b4de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800b4e8:	e7d2      	b.n	800b490 <__hexnan+0xd4>
 800b4ea:	3f04      	subs	r7, #4
 800b4ec:	e7d0      	b.n	800b490 <__hexnan+0xd4>
 800b4ee:	2004      	movs	r0, #4
 800b4f0:	e7d5      	b.n	800b49e <__hexnan+0xe2>
	...

0800b4f4 <malloc>:
 800b4f4:	4b02      	ldr	r3, [pc, #8]	@ (800b500 <malloc+0xc>)
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	f000 b825 	b.w	800b548 <_malloc_r>
 800b4fe:	bf00      	nop
 800b500:	200002f8 	.word	0x200002f8

0800b504 <sbrk_aligned>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	4e0f      	ldr	r6, [pc, #60]	@ (800b544 <sbrk_aligned+0x40>)
 800b508:	460c      	mov	r4, r1
 800b50a:	6831      	ldr	r1, [r6, #0]
 800b50c:	4605      	mov	r5, r0
 800b50e:	b911      	cbnz	r1, 800b516 <sbrk_aligned+0x12>
 800b510:	f000 ff96 	bl	800c440 <_sbrk_r>
 800b514:	6030      	str	r0, [r6, #0]
 800b516:	4621      	mov	r1, r4
 800b518:	4628      	mov	r0, r5
 800b51a:	f000 ff91 	bl	800c440 <_sbrk_r>
 800b51e:	1c43      	adds	r3, r0, #1
 800b520:	d103      	bne.n	800b52a <sbrk_aligned+0x26>
 800b522:	f04f 34ff 	mov.w	r4, #4294967295
 800b526:	4620      	mov	r0, r4
 800b528:	bd70      	pop	{r4, r5, r6, pc}
 800b52a:	1cc4      	adds	r4, r0, #3
 800b52c:	f024 0403 	bic.w	r4, r4, #3
 800b530:	42a0      	cmp	r0, r4
 800b532:	d0f8      	beq.n	800b526 <sbrk_aligned+0x22>
 800b534:	1a21      	subs	r1, r4, r0
 800b536:	4628      	mov	r0, r5
 800b538:	f000 ff82 	bl	800c440 <_sbrk_r>
 800b53c:	3001      	adds	r0, #1
 800b53e:	d1f2      	bne.n	800b526 <sbrk_aligned+0x22>
 800b540:	e7ef      	b.n	800b522 <sbrk_aligned+0x1e>
 800b542:	bf00      	nop
 800b544:	20000f6c 	.word	0x20000f6c

0800b548 <_malloc_r>:
 800b548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b54c:	1ccd      	adds	r5, r1, #3
 800b54e:	f025 0503 	bic.w	r5, r5, #3
 800b552:	3508      	adds	r5, #8
 800b554:	2d0c      	cmp	r5, #12
 800b556:	bf38      	it	cc
 800b558:	250c      	movcc	r5, #12
 800b55a:	2d00      	cmp	r5, #0
 800b55c:	4606      	mov	r6, r0
 800b55e:	db01      	blt.n	800b564 <_malloc_r+0x1c>
 800b560:	42a9      	cmp	r1, r5
 800b562:	d904      	bls.n	800b56e <_malloc_r+0x26>
 800b564:	230c      	movs	r3, #12
 800b566:	6033      	str	r3, [r6, #0]
 800b568:	2000      	movs	r0, #0
 800b56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b644 <_malloc_r+0xfc>
 800b572:	f000 f87b 	bl	800b66c <__malloc_lock>
 800b576:	f8d8 3000 	ldr.w	r3, [r8]
 800b57a:	461c      	mov	r4, r3
 800b57c:	bb44      	cbnz	r4, 800b5d0 <_malloc_r+0x88>
 800b57e:	4629      	mov	r1, r5
 800b580:	4630      	mov	r0, r6
 800b582:	f7ff ffbf 	bl	800b504 <sbrk_aligned>
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	4604      	mov	r4, r0
 800b58a:	d158      	bne.n	800b63e <_malloc_r+0xf6>
 800b58c:	f8d8 4000 	ldr.w	r4, [r8]
 800b590:	4627      	mov	r7, r4
 800b592:	2f00      	cmp	r7, #0
 800b594:	d143      	bne.n	800b61e <_malloc_r+0xd6>
 800b596:	2c00      	cmp	r4, #0
 800b598:	d04b      	beq.n	800b632 <_malloc_r+0xea>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	4639      	mov	r1, r7
 800b59e:	4630      	mov	r0, r6
 800b5a0:	eb04 0903 	add.w	r9, r4, r3
 800b5a4:	f000 ff4c 	bl	800c440 <_sbrk_r>
 800b5a8:	4581      	cmp	r9, r0
 800b5aa:	d142      	bne.n	800b632 <_malloc_r+0xea>
 800b5ac:	6821      	ldr	r1, [r4, #0]
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	1a6d      	subs	r5, r5, r1
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	f7ff ffa6 	bl	800b504 <sbrk_aligned>
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	d03a      	beq.n	800b632 <_malloc_r+0xea>
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	442b      	add	r3, r5
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	bb62      	cbnz	r2, 800b624 <_malloc_r+0xdc>
 800b5ca:	f8c8 7000 	str.w	r7, [r8]
 800b5ce:	e00f      	b.n	800b5f0 <_malloc_r+0xa8>
 800b5d0:	6822      	ldr	r2, [r4, #0]
 800b5d2:	1b52      	subs	r2, r2, r5
 800b5d4:	d420      	bmi.n	800b618 <_malloc_r+0xd0>
 800b5d6:	2a0b      	cmp	r2, #11
 800b5d8:	d917      	bls.n	800b60a <_malloc_r+0xc2>
 800b5da:	1961      	adds	r1, r4, r5
 800b5dc:	42a3      	cmp	r3, r4
 800b5de:	6025      	str	r5, [r4, #0]
 800b5e0:	bf18      	it	ne
 800b5e2:	6059      	strne	r1, [r3, #4]
 800b5e4:	6863      	ldr	r3, [r4, #4]
 800b5e6:	bf08      	it	eq
 800b5e8:	f8c8 1000 	streq.w	r1, [r8]
 800b5ec:	5162      	str	r2, [r4, r5]
 800b5ee:	604b      	str	r3, [r1, #4]
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f000 f841 	bl	800b678 <__malloc_unlock>
 800b5f6:	f104 000b 	add.w	r0, r4, #11
 800b5fa:	1d23      	adds	r3, r4, #4
 800b5fc:	f020 0007 	bic.w	r0, r0, #7
 800b600:	1ac2      	subs	r2, r0, r3
 800b602:	bf1c      	itt	ne
 800b604:	1a1b      	subne	r3, r3, r0
 800b606:	50a3      	strne	r3, [r4, r2]
 800b608:	e7af      	b.n	800b56a <_malloc_r+0x22>
 800b60a:	6862      	ldr	r2, [r4, #4]
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	bf0c      	ite	eq
 800b610:	f8c8 2000 	streq.w	r2, [r8]
 800b614:	605a      	strne	r2, [r3, #4]
 800b616:	e7eb      	b.n	800b5f0 <_malloc_r+0xa8>
 800b618:	4623      	mov	r3, r4
 800b61a:	6864      	ldr	r4, [r4, #4]
 800b61c:	e7ae      	b.n	800b57c <_malloc_r+0x34>
 800b61e:	463c      	mov	r4, r7
 800b620:	687f      	ldr	r7, [r7, #4]
 800b622:	e7b6      	b.n	800b592 <_malloc_r+0x4a>
 800b624:	461a      	mov	r2, r3
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	42a3      	cmp	r3, r4
 800b62a:	d1fb      	bne.n	800b624 <_malloc_r+0xdc>
 800b62c:	2300      	movs	r3, #0
 800b62e:	6053      	str	r3, [r2, #4]
 800b630:	e7de      	b.n	800b5f0 <_malloc_r+0xa8>
 800b632:	230c      	movs	r3, #12
 800b634:	4630      	mov	r0, r6
 800b636:	6033      	str	r3, [r6, #0]
 800b638:	f000 f81e 	bl	800b678 <__malloc_unlock>
 800b63c:	e794      	b.n	800b568 <_malloc_r+0x20>
 800b63e:	6005      	str	r5, [r0, #0]
 800b640:	e7d6      	b.n	800b5f0 <_malloc_r+0xa8>
 800b642:	bf00      	nop
 800b644:	20000f70 	.word	0x20000f70

0800b648 <__ascii_mbtowc>:
 800b648:	b082      	sub	sp, #8
 800b64a:	b901      	cbnz	r1, 800b64e <__ascii_mbtowc+0x6>
 800b64c:	a901      	add	r1, sp, #4
 800b64e:	b142      	cbz	r2, 800b662 <__ascii_mbtowc+0x1a>
 800b650:	b14b      	cbz	r3, 800b666 <__ascii_mbtowc+0x1e>
 800b652:	7813      	ldrb	r3, [r2, #0]
 800b654:	600b      	str	r3, [r1, #0]
 800b656:	7812      	ldrb	r2, [r2, #0]
 800b658:	1e10      	subs	r0, r2, #0
 800b65a:	bf18      	it	ne
 800b65c:	2001      	movne	r0, #1
 800b65e:	b002      	add	sp, #8
 800b660:	4770      	bx	lr
 800b662:	4610      	mov	r0, r2
 800b664:	e7fb      	b.n	800b65e <__ascii_mbtowc+0x16>
 800b666:	f06f 0001 	mvn.w	r0, #1
 800b66a:	e7f8      	b.n	800b65e <__ascii_mbtowc+0x16>

0800b66c <__malloc_lock>:
 800b66c:	4801      	ldr	r0, [pc, #4]	@ (800b674 <__malloc_lock+0x8>)
 800b66e:	f7fe bd2c 	b.w	800a0ca <__retarget_lock_acquire_recursive>
 800b672:	bf00      	nop
 800b674:	20000f68 	.word	0x20000f68

0800b678 <__malloc_unlock>:
 800b678:	4801      	ldr	r0, [pc, #4]	@ (800b680 <__malloc_unlock+0x8>)
 800b67a:	f7fe bd27 	b.w	800a0cc <__retarget_lock_release_recursive>
 800b67e:	bf00      	nop
 800b680:	20000f68 	.word	0x20000f68

0800b684 <_Balloc>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	69c6      	ldr	r6, [r0, #28]
 800b688:	4604      	mov	r4, r0
 800b68a:	460d      	mov	r5, r1
 800b68c:	b976      	cbnz	r6, 800b6ac <_Balloc+0x28>
 800b68e:	2010      	movs	r0, #16
 800b690:	f7ff ff30 	bl	800b4f4 <malloc>
 800b694:	4602      	mov	r2, r0
 800b696:	61e0      	str	r0, [r4, #28]
 800b698:	b920      	cbnz	r0, 800b6a4 <_Balloc+0x20>
 800b69a:	216b      	movs	r1, #107	@ 0x6b
 800b69c:	4b17      	ldr	r3, [pc, #92]	@ (800b6fc <_Balloc+0x78>)
 800b69e:	4818      	ldr	r0, [pc, #96]	@ (800b700 <_Balloc+0x7c>)
 800b6a0:	f7fe fd38 	bl	800a114 <__assert_func>
 800b6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6a8:	6006      	str	r6, [r0, #0]
 800b6aa:	60c6      	str	r6, [r0, #12]
 800b6ac:	69e6      	ldr	r6, [r4, #28]
 800b6ae:	68f3      	ldr	r3, [r6, #12]
 800b6b0:	b183      	cbz	r3, 800b6d4 <_Balloc+0x50>
 800b6b2:	69e3      	ldr	r3, [r4, #28]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6ba:	b9b8      	cbnz	r0, 800b6ec <_Balloc+0x68>
 800b6bc:	2101      	movs	r1, #1
 800b6be:	fa01 f605 	lsl.w	r6, r1, r5
 800b6c2:	1d72      	adds	r2, r6, #5
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	0092      	lsls	r2, r2, #2
 800b6c8:	f000 fed1 	bl	800c46e <_calloc_r>
 800b6cc:	b160      	cbz	r0, 800b6e8 <_Balloc+0x64>
 800b6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6d2:	e00e      	b.n	800b6f2 <_Balloc+0x6e>
 800b6d4:	2221      	movs	r2, #33	@ 0x21
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 fec8 	bl	800c46e <_calloc_r>
 800b6de:	69e3      	ldr	r3, [r4, #28]
 800b6e0:	60f0      	str	r0, [r6, #12]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e4      	bne.n	800b6b2 <_Balloc+0x2e>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	6802      	ldr	r2, [r0, #0]
 800b6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6f8:	e7f7      	b.n	800b6ea <_Balloc+0x66>
 800b6fa:	bf00      	nop
 800b6fc:	0800cba4 	.word	0x0800cba4
 800b700:	0800cd2f 	.word	0x0800cd2f

0800b704 <_Bfree>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	69c6      	ldr	r6, [r0, #28]
 800b708:	4605      	mov	r5, r0
 800b70a:	460c      	mov	r4, r1
 800b70c:	b976      	cbnz	r6, 800b72c <_Bfree+0x28>
 800b70e:	2010      	movs	r0, #16
 800b710:	f7ff fef0 	bl	800b4f4 <malloc>
 800b714:	4602      	mov	r2, r0
 800b716:	61e8      	str	r0, [r5, #28]
 800b718:	b920      	cbnz	r0, 800b724 <_Bfree+0x20>
 800b71a:	218f      	movs	r1, #143	@ 0x8f
 800b71c:	4b08      	ldr	r3, [pc, #32]	@ (800b740 <_Bfree+0x3c>)
 800b71e:	4809      	ldr	r0, [pc, #36]	@ (800b744 <_Bfree+0x40>)
 800b720:	f7fe fcf8 	bl	800a114 <__assert_func>
 800b724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b728:	6006      	str	r6, [r0, #0]
 800b72a:	60c6      	str	r6, [r0, #12]
 800b72c:	b13c      	cbz	r4, 800b73e <_Bfree+0x3a>
 800b72e:	69eb      	ldr	r3, [r5, #28]
 800b730:	6862      	ldr	r2, [r4, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b738:	6021      	str	r1, [r4, #0]
 800b73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	0800cba4 	.word	0x0800cba4
 800b744:	0800cd2f 	.word	0x0800cd2f

0800b748 <__multadd>:
 800b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74c:	4607      	mov	r7, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	461e      	mov	r6, r3
 800b752:	2000      	movs	r0, #0
 800b754:	690d      	ldr	r5, [r1, #16]
 800b756:	f101 0c14 	add.w	ip, r1, #20
 800b75a:	f8dc 3000 	ldr.w	r3, [ip]
 800b75e:	3001      	adds	r0, #1
 800b760:	b299      	uxth	r1, r3
 800b762:	fb02 6101 	mla	r1, r2, r1, r6
 800b766:	0c1e      	lsrs	r6, r3, #16
 800b768:	0c0b      	lsrs	r3, r1, #16
 800b76a:	fb02 3306 	mla	r3, r2, r6, r3
 800b76e:	b289      	uxth	r1, r1
 800b770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b774:	4285      	cmp	r5, r0
 800b776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b77a:	f84c 1b04 	str.w	r1, [ip], #4
 800b77e:	dcec      	bgt.n	800b75a <__multadd+0x12>
 800b780:	b30e      	cbz	r6, 800b7c6 <__multadd+0x7e>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	42ab      	cmp	r3, r5
 800b786:	dc19      	bgt.n	800b7bc <__multadd+0x74>
 800b788:	6861      	ldr	r1, [r4, #4]
 800b78a:	4638      	mov	r0, r7
 800b78c:	3101      	adds	r1, #1
 800b78e:	f7ff ff79 	bl	800b684 <_Balloc>
 800b792:	4680      	mov	r8, r0
 800b794:	b928      	cbnz	r0, 800b7a2 <__multadd+0x5a>
 800b796:	4602      	mov	r2, r0
 800b798:	21ba      	movs	r1, #186	@ 0xba
 800b79a:	4b0c      	ldr	r3, [pc, #48]	@ (800b7cc <__multadd+0x84>)
 800b79c:	480c      	ldr	r0, [pc, #48]	@ (800b7d0 <__multadd+0x88>)
 800b79e:	f7fe fcb9 	bl	800a114 <__assert_func>
 800b7a2:	6922      	ldr	r2, [r4, #16]
 800b7a4:	f104 010c 	add.w	r1, r4, #12
 800b7a8:	3202      	adds	r2, #2
 800b7aa:	0092      	lsls	r2, r2, #2
 800b7ac:	300c      	adds	r0, #12
 800b7ae:	f7fe fc9c 	bl	800a0ea <memcpy>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ffa5 	bl	800b704 <_Bfree>
 800b7ba:	4644      	mov	r4, r8
 800b7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	615e      	str	r6, [r3, #20]
 800b7c4:	6125      	str	r5, [r4, #16]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7cc:	0800ccbe 	.word	0x0800ccbe
 800b7d0:	0800cd2f 	.word	0x0800cd2f

0800b7d4 <__s2b>:
 800b7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d8:	4615      	mov	r5, r2
 800b7da:	2209      	movs	r2, #9
 800b7dc:	461f      	mov	r7, r3
 800b7de:	3308      	adds	r3, #8
 800b7e0:	460c      	mov	r4, r1
 800b7e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	db09      	blt.n	800b804 <__s2b+0x30>
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7ff ff47 	bl	800b684 <_Balloc>
 800b7f6:	b940      	cbnz	r0, 800b80a <__s2b+0x36>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	21d3      	movs	r1, #211	@ 0xd3
 800b7fc:	4b18      	ldr	r3, [pc, #96]	@ (800b860 <__s2b+0x8c>)
 800b7fe:	4819      	ldr	r0, [pc, #100]	@ (800b864 <__s2b+0x90>)
 800b800:	f7fe fc88 	bl	800a114 <__assert_func>
 800b804:	0052      	lsls	r2, r2, #1
 800b806:	3101      	adds	r1, #1
 800b808:	e7f0      	b.n	800b7ec <__s2b+0x18>
 800b80a:	9b08      	ldr	r3, [sp, #32]
 800b80c:	2d09      	cmp	r5, #9
 800b80e:	6143      	str	r3, [r0, #20]
 800b810:	f04f 0301 	mov.w	r3, #1
 800b814:	6103      	str	r3, [r0, #16]
 800b816:	dd16      	ble.n	800b846 <__s2b+0x72>
 800b818:	f104 0909 	add.w	r9, r4, #9
 800b81c:	46c8      	mov	r8, r9
 800b81e:	442c      	add	r4, r5
 800b820:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b824:	4601      	mov	r1, r0
 800b826:	220a      	movs	r2, #10
 800b828:	4630      	mov	r0, r6
 800b82a:	3b30      	subs	r3, #48	@ 0x30
 800b82c:	f7ff ff8c 	bl	800b748 <__multadd>
 800b830:	45a0      	cmp	r8, r4
 800b832:	d1f5      	bne.n	800b820 <__s2b+0x4c>
 800b834:	f1a5 0408 	sub.w	r4, r5, #8
 800b838:	444c      	add	r4, r9
 800b83a:	1b2d      	subs	r5, r5, r4
 800b83c:	1963      	adds	r3, r4, r5
 800b83e:	42bb      	cmp	r3, r7
 800b840:	db04      	blt.n	800b84c <__s2b+0x78>
 800b842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b846:	2509      	movs	r5, #9
 800b848:	340a      	adds	r4, #10
 800b84a:	e7f6      	b.n	800b83a <__s2b+0x66>
 800b84c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b850:	4601      	mov	r1, r0
 800b852:	220a      	movs	r2, #10
 800b854:	4630      	mov	r0, r6
 800b856:	3b30      	subs	r3, #48	@ 0x30
 800b858:	f7ff ff76 	bl	800b748 <__multadd>
 800b85c:	e7ee      	b.n	800b83c <__s2b+0x68>
 800b85e:	bf00      	nop
 800b860:	0800ccbe 	.word	0x0800ccbe
 800b864:	0800cd2f 	.word	0x0800cd2f

0800b868 <__hi0bits>:
 800b868:	4603      	mov	r3, r0
 800b86a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b86e:	bf3a      	itte	cc
 800b870:	0403      	lslcc	r3, r0, #16
 800b872:	2010      	movcc	r0, #16
 800b874:	2000      	movcs	r0, #0
 800b876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b87a:	bf3c      	itt	cc
 800b87c:	021b      	lslcc	r3, r3, #8
 800b87e:	3008      	addcc	r0, #8
 800b880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b884:	bf3c      	itt	cc
 800b886:	011b      	lslcc	r3, r3, #4
 800b888:	3004      	addcc	r0, #4
 800b88a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b88e:	bf3c      	itt	cc
 800b890:	009b      	lslcc	r3, r3, #2
 800b892:	3002      	addcc	r0, #2
 800b894:	2b00      	cmp	r3, #0
 800b896:	db05      	blt.n	800b8a4 <__hi0bits+0x3c>
 800b898:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b89c:	f100 0001 	add.w	r0, r0, #1
 800b8a0:	bf08      	it	eq
 800b8a2:	2020      	moveq	r0, #32
 800b8a4:	4770      	bx	lr

0800b8a6 <__lo0bits>:
 800b8a6:	6803      	ldr	r3, [r0, #0]
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	f013 0007 	ands.w	r0, r3, #7
 800b8ae:	d00b      	beq.n	800b8c8 <__lo0bits+0x22>
 800b8b0:	07d9      	lsls	r1, r3, #31
 800b8b2:	d421      	bmi.n	800b8f8 <__lo0bits+0x52>
 800b8b4:	0798      	lsls	r0, r3, #30
 800b8b6:	bf49      	itett	mi
 800b8b8:	085b      	lsrmi	r3, r3, #1
 800b8ba:	089b      	lsrpl	r3, r3, #2
 800b8bc:	2001      	movmi	r0, #1
 800b8be:	6013      	strmi	r3, [r2, #0]
 800b8c0:	bf5c      	itt	pl
 800b8c2:	2002      	movpl	r0, #2
 800b8c4:	6013      	strpl	r3, [r2, #0]
 800b8c6:	4770      	bx	lr
 800b8c8:	b299      	uxth	r1, r3
 800b8ca:	b909      	cbnz	r1, 800b8d0 <__lo0bits+0x2a>
 800b8cc:	2010      	movs	r0, #16
 800b8ce:	0c1b      	lsrs	r3, r3, #16
 800b8d0:	b2d9      	uxtb	r1, r3
 800b8d2:	b909      	cbnz	r1, 800b8d8 <__lo0bits+0x32>
 800b8d4:	3008      	adds	r0, #8
 800b8d6:	0a1b      	lsrs	r3, r3, #8
 800b8d8:	0719      	lsls	r1, r3, #28
 800b8da:	bf04      	itt	eq
 800b8dc:	091b      	lsreq	r3, r3, #4
 800b8de:	3004      	addeq	r0, #4
 800b8e0:	0799      	lsls	r1, r3, #30
 800b8e2:	bf04      	itt	eq
 800b8e4:	089b      	lsreq	r3, r3, #2
 800b8e6:	3002      	addeq	r0, #2
 800b8e8:	07d9      	lsls	r1, r3, #31
 800b8ea:	d403      	bmi.n	800b8f4 <__lo0bits+0x4e>
 800b8ec:	085b      	lsrs	r3, r3, #1
 800b8ee:	f100 0001 	add.w	r0, r0, #1
 800b8f2:	d003      	beq.n	800b8fc <__lo0bits+0x56>
 800b8f4:	6013      	str	r3, [r2, #0]
 800b8f6:	4770      	bx	lr
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	4770      	bx	lr
 800b8fc:	2020      	movs	r0, #32
 800b8fe:	4770      	bx	lr

0800b900 <__i2b>:
 800b900:	b510      	push	{r4, lr}
 800b902:	460c      	mov	r4, r1
 800b904:	2101      	movs	r1, #1
 800b906:	f7ff febd 	bl	800b684 <_Balloc>
 800b90a:	4602      	mov	r2, r0
 800b90c:	b928      	cbnz	r0, 800b91a <__i2b+0x1a>
 800b90e:	f240 1145 	movw	r1, #325	@ 0x145
 800b912:	4b04      	ldr	r3, [pc, #16]	@ (800b924 <__i2b+0x24>)
 800b914:	4804      	ldr	r0, [pc, #16]	@ (800b928 <__i2b+0x28>)
 800b916:	f7fe fbfd 	bl	800a114 <__assert_func>
 800b91a:	2301      	movs	r3, #1
 800b91c:	6144      	str	r4, [r0, #20]
 800b91e:	6103      	str	r3, [r0, #16]
 800b920:	bd10      	pop	{r4, pc}
 800b922:	bf00      	nop
 800b924:	0800ccbe 	.word	0x0800ccbe
 800b928:	0800cd2f 	.word	0x0800cd2f

0800b92c <__multiply>:
 800b92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b930:	4614      	mov	r4, r2
 800b932:	690a      	ldr	r2, [r1, #16]
 800b934:	6923      	ldr	r3, [r4, #16]
 800b936:	460f      	mov	r7, r1
 800b938:	429a      	cmp	r2, r3
 800b93a:	bfa2      	ittt	ge
 800b93c:	4623      	movge	r3, r4
 800b93e:	460c      	movge	r4, r1
 800b940:	461f      	movge	r7, r3
 800b942:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b946:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b94a:	68a3      	ldr	r3, [r4, #8]
 800b94c:	6861      	ldr	r1, [r4, #4]
 800b94e:	eb0a 0609 	add.w	r6, sl, r9
 800b952:	42b3      	cmp	r3, r6
 800b954:	b085      	sub	sp, #20
 800b956:	bfb8      	it	lt
 800b958:	3101      	addlt	r1, #1
 800b95a:	f7ff fe93 	bl	800b684 <_Balloc>
 800b95e:	b930      	cbnz	r0, 800b96e <__multiply+0x42>
 800b960:	4602      	mov	r2, r0
 800b962:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b966:	4b43      	ldr	r3, [pc, #268]	@ (800ba74 <__multiply+0x148>)
 800b968:	4843      	ldr	r0, [pc, #268]	@ (800ba78 <__multiply+0x14c>)
 800b96a:	f7fe fbd3 	bl	800a114 <__assert_func>
 800b96e:	f100 0514 	add.w	r5, r0, #20
 800b972:	462b      	mov	r3, r5
 800b974:	2200      	movs	r2, #0
 800b976:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b97a:	4543      	cmp	r3, r8
 800b97c:	d321      	bcc.n	800b9c2 <__multiply+0x96>
 800b97e:	f107 0114 	add.w	r1, r7, #20
 800b982:	f104 0214 	add.w	r2, r4, #20
 800b986:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b98a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b98e:	9302      	str	r3, [sp, #8]
 800b990:	1b13      	subs	r3, r2, r4
 800b992:	3b15      	subs	r3, #21
 800b994:	f023 0303 	bic.w	r3, r3, #3
 800b998:	3304      	adds	r3, #4
 800b99a:	f104 0715 	add.w	r7, r4, #21
 800b99e:	42ba      	cmp	r2, r7
 800b9a0:	bf38      	it	cc
 800b9a2:	2304      	movcc	r3, #4
 800b9a4:	9301      	str	r3, [sp, #4]
 800b9a6:	9b02      	ldr	r3, [sp, #8]
 800b9a8:	9103      	str	r1, [sp, #12]
 800b9aa:	428b      	cmp	r3, r1
 800b9ac:	d80c      	bhi.n	800b9c8 <__multiply+0x9c>
 800b9ae:	2e00      	cmp	r6, #0
 800b9b0:	dd03      	ble.n	800b9ba <__multiply+0x8e>
 800b9b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d05a      	beq.n	800ba70 <__multiply+0x144>
 800b9ba:	6106      	str	r6, [r0, #16]
 800b9bc:	b005      	add	sp, #20
 800b9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c2:	f843 2b04 	str.w	r2, [r3], #4
 800b9c6:	e7d8      	b.n	800b97a <__multiply+0x4e>
 800b9c8:	f8b1 a000 	ldrh.w	sl, [r1]
 800b9cc:	f1ba 0f00 	cmp.w	sl, #0
 800b9d0:	d023      	beq.n	800ba1a <__multiply+0xee>
 800b9d2:	46a9      	mov	r9, r5
 800b9d4:	f04f 0c00 	mov.w	ip, #0
 800b9d8:	f104 0e14 	add.w	lr, r4, #20
 800b9dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b9e0:	f8d9 3000 	ldr.w	r3, [r9]
 800b9e4:	fa1f fb87 	uxth.w	fp, r7
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	fb0a 330b 	mla	r3, sl, fp, r3
 800b9ee:	4463      	add	r3, ip
 800b9f0:	f8d9 c000 	ldr.w	ip, [r9]
 800b9f4:	0c3f      	lsrs	r7, r7, #16
 800b9f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b9fa:	fb0a c707 	mla	r7, sl, r7, ip
 800b9fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba08:	4572      	cmp	r2, lr
 800ba0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba0e:	f849 3b04 	str.w	r3, [r9], #4
 800ba12:	d8e3      	bhi.n	800b9dc <__multiply+0xb0>
 800ba14:	9b01      	ldr	r3, [sp, #4]
 800ba16:	f845 c003 	str.w	ip, [r5, r3]
 800ba1a:	9b03      	ldr	r3, [sp, #12]
 800ba1c:	3104      	adds	r1, #4
 800ba1e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba22:	f1b9 0f00 	cmp.w	r9, #0
 800ba26:	d021      	beq.n	800ba6c <__multiply+0x140>
 800ba28:	46ae      	mov	lr, r5
 800ba2a:	f04f 0a00 	mov.w	sl, #0
 800ba2e:	682b      	ldr	r3, [r5, #0]
 800ba30:	f104 0c14 	add.w	ip, r4, #20
 800ba34:	f8bc b000 	ldrh.w	fp, [ip]
 800ba38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	fb09 770b 	mla	r7, r9, fp, r7
 800ba42:	4457      	add	r7, sl
 800ba44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ba48:	f84e 3b04 	str.w	r3, [lr], #4
 800ba4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba54:	f8be 3000 	ldrh.w	r3, [lr]
 800ba58:	4562      	cmp	r2, ip
 800ba5a:	fb09 330a 	mla	r3, r9, sl, r3
 800ba5e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ba62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba66:	d8e5      	bhi.n	800ba34 <__multiply+0x108>
 800ba68:	9f01      	ldr	r7, [sp, #4]
 800ba6a:	51eb      	str	r3, [r5, r7]
 800ba6c:	3504      	adds	r5, #4
 800ba6e:	e79a      	b.n	800b9a6 <__multiply+0x7a>
 800ba70:	3e01      	subs	r6, #1
 800ba72:	e79c      	b.n	800b9ae <__multiply+0x82>
 800ba74:	0800ccbe 	.word	0x0800ccbe
 800ba78:	0800cd2f 	.word	0x0800cd2f

0800ba7c <__pow5mult>:
 800ba7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba80:	4615      	mov	r5, r2
 800ba82:	f012 0203 	ands.w	r2, r2, #3
 800ba86:	4607      	mov	r7, r0
 800ba88:	460e      	mov	r6, r1
 800ba8a:	d007      	beq.n	800ba9c <__pow5mult+0x20>
 800ba8c:	4c25      	ldr	r4, [pc, #148]	@ (800bb24 <__pow5mult+0xa8>)
 800ba8e:	3a01      	subs	r2, #1
 800ba90:	2300      	movs	r3, #0
 800ba92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba96:	f7ff fe57 	bl	800b748 <__multadd>
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	10ad      	asrs	r5, r5, #2
 800ba9e:	d03d      	beq.n	800bb1c <__pow5mult+0xa0>
 800baa0:	69fc      	ldr	r4, [r7, #28]
 800baa2:	b97c      	cbnz	r4, 800bac4 <__pow5mult+0x48>
 800baa4:	2010      	movs	r0, #16
 800baa6:	f7ff fd25 	bl	800b4f4 <malloc>
 800baaa:	4602      	mov	r2, r0
 800baac:	61f8      	str	r0, [r7, #28]
 800baae:	b928      	cbnz	r0, 800babc <__pow5mult+0x40>
 800bab0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bab4:	4b1c      	ldr	r3, [pc, #112]	@ (800bb28 <__pow5mult+0xac>)
 800bab6:	481d      	ldr	r0, [pc, #116]	@ (800bb2c <__pow5mult+0xb0>)
 800bab8:	f7fe fb2c 	bl	800a114 <__assert_func>
 800babc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bac0:	6004      	str	r4, [r0, #0]
 800bac2:	60c4      	str	r4, [r0, #12]
 800bac4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bacc:	b94c      	cbnz	r4, 800bae2 <__pow5mult+0x66>
 800bace:	f240 2171 	movw	r1, #625	@ 0x271
 800bad2:	4638      	mov	r0, r7
 800bad4:	f7ff ff14 	bl	800b900 <__i2b>
 800bad8:	2300      	movs	r3, #0
 800bada:	4604      	mov	r4, r0
 800badc:	f8c8 0008 	str.w	r0, [r8, #8]
 800bae0:	6003      	str	r3, [r0, #0]
 800bae2:	f04f 0900 	mov.w	r9, #0
 800bae6:	07eb      	lsls	r3, r5, #31
 800bae8:	d50a      	bpl.n	800bb00 <__pow5mult+0x84>
 800baea:	4631      	mov	r1, r6
 800baec:	4622      	mov	r2, r4
 800baee:	4638      	mov	r0, r7
 800baf0:	f7ff ff1c 	bl	800b92c <__multiply>
 800baf4:	4680      	mov	r8, r0
 800baf6:	4631      	mov	r1, r6
 800baf8:	4638      	mov	r0, r7
 800bafa:	f7ff fe03 	bl	800b704 <_Bfree>
 800bafe:	4646      	mov	r6, r8
 800bb00:	106d      	asrs	r5, r5, #1
 800bb02:	d00b      	beq.n	800bb1c <__pow5mult+0xa0>
 800bb04:	6820      	ldr	r0, [r4, #0]
 800bb06:	b938      	cbnz	r0, 800bb18 <__pow5mult+0x9c>
 800bb08:	4622      	mov	r2, r4
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f7ff ff0d 	bl	800b92c <__multiply>
 800bb12:	6020      	str	r0, [r4, #0]
 800bb14:	f8c0 9000 	str.w	r9, [r0]
 800bb18:	4604      	mov	r4, r0
 800bb1a:	e7e4      	b.n	800bae6 <__pow5mult+0x6a>
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb22:	bf00      	nop
 800bb24:	0800cd88 	.word	0x0800cd88
 800bb28:	0800cba4 	.word	0x0800cba4
 800bb2c:	0800cd2f 	.word	0x0800cd2f

0800bb30 <__lshift>:
 800bb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb34:	460c      	mov	r4, r1
 800bb36:	4607      	mov	r7, r0
 800bb38:	4691      	mov	r9, r2
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	6849      	ldr	r1, [r1, #4]
 800bb3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb42:	68a3      	ldr	r3, [r4, #8]
 800bb44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb48:	f108 0601 	add.w	r6, r8, #1
 800bb4c:	42b3      	cmp	r3, r6
 800bb4e:	db0b      	blt.n	800bb68 <__lshift+0x38>
 800bb50:	4638      	mov	r0, r7
 800bb52:	f7ff fd97 	bl	800b684 <_Balloc>
 800bb56:	4605      	mov	r5, r0
 800bb58:	b948      	cbnz	r0, 800bb6e <__lshift+0x3e>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb60:	4b27      	ldr	r3, [pc, #156]	@ (800bc00 <__lshift+0xd0>)
 800bb62:	4828      	ldr	r0, [pc, #160]	@ (800bc04 <__lshift+0xd4>)
 800bb64:	f7fe fad6 	bl	800a114 <__assert_func>
 800bb68:	3101      	adds	r1, #1
 800bb6a:	005b      	lsls	r3, r3, #1
 800bb6c:	e7ee      	b.n	800bb4c <__lshift+0x1c>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f100 0114 	add.w	r1, r0, #20
 800bb74:	f100 0210 	add.w	r2, r0, #16
 800bb78:	4618      	mov	r0, r3
 800bb7a:	4553      	cmp	r3, sl
 800bb7c:	db33      	blt.n	800bbe6 <__lshift+0xb6>
 800bb7e:	6920      	ldr	r0, [r4, #16]
 800bb80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb84:	f104 0314 	add.w	r3, r4, #20
 800bb88:	f019 091f 	ands.w	r9, r9, #31
 800bb8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb94:	d02b      	beq.n	800bbee <__lshift+0xbe>
 800bb96:	468a      	mov	sl, r1
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f1c9 0e20 	rsb	lr, r9, #32
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	fa00 f009 	lsl.w	r0, r0, r9
 800bba4:	4310      	orrs	r0, r2
 800bba6:	f84a 0b04 	str.w	r0, [sl], #4
 800bbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbae:	459c      	cmp	ip, r3
 800bbb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbb4:	d8f3      	bhi.n	800bb9e <__lshift+0x6e>
 800bbb6:	ebac 0304 	sub.w	r3, ip, r4
 800bbba:	3b15      	subs	r3, #21
 800bbbc:	f023 0303 	bic.w	r3, r3, #3
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	f104 0015 	add.w	r0, r4, #21
 800bbc6:	4584      	cmp	ip, r0
 800bbc8:	bf38      	it	cc
 800bbca:	2304      	movcc	r3, #4
 800bbcc:	50ca      	str	r2, [r1, r3]
 800bbce:	b10a      	cbz	r2, 800bbd4 <__lshift+0xa4>
 800bbd0:	f108 0602 	add.w	r6, r8, #2
 800bbd4:	3e01      	subs	r6, #1
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	4621      	mov	r1, r4
 800bbda:	612e      	str	r6, [r5, #16]
 800bbdc:	f7ff fd92 	bl	800b704 <_Bfree>
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbea:	3301      	adds	r3, #1
 800bbec:	e7c5      	b.n	800bb7a <__lshift+0x4a>
 800bbee:	3904      	subs	r1, #4
 800bbf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbf4:	459c      	cmp	ip, r3
 800bbf6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbfa:	d8f9      	bhi.n	800bbf0 <__lshift+0xc0>
 800bbfc:	e7ea      	b.n	800bbd4 <__lshift+0xa4>
 800bbfe:	bf00      	nop
 800bc00:	0800ccbe 	.word	0x0800ccbe
 800bc04:	0800cd2f 	.word	0x0800cd2f

0800bc08 <__mcmp>:
 800bc08:	4603      	mov	r3, r0
 800bc0a:	690a      	ldr	r2, [r1, #16]
 800bc0c:	6900      	ldr	r0, [r0, #16]
 800bc0e:	b530      	push	{r4, r5, lr}
 800bc10:	1a80      	subs	r0, r0, r2
 800bc12:	d10e      	bne.n	800bc32 <__mcmp+0x2a>
 800bc14:	3314      	adds	r3, #20
 800bc16:	3114      	adds	r1, #20
 800bc18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc28:	4295      	cmp	r5, r2
 800bc2a:	d003      	beq.n	800bc34 <__mcmp+0x2c>
 800bc2c:	d205      	bcs.n	800bc3a <__mcmp+0x32>
 800bc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc32:	bd30      	pop	{r4, r5, pc}
 800bc34:	42a3      	cmp	r3, r4
 800bc36:	d3f3      	bcc.n	800bc20 <__mcmp+0x18>
 800bc38:	e7fb      	b.n	800bc32 <__mcmp+0x2a>
 800bc3a:	2001      	movs	r0, #1
 800bc3c:	e7f9      	b.n	800bc32 <__mcmp+0x2a>
	...

0800bc40 <__mdiff>:
 800bc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	4689      	mov	r9, r1
 800bc46:	4606      	mov	r6, r0
 800bc48:	4611      	mov	r1, r2
 800bc4a:	4648      	mov	r0, r9
 800bc4c:	4614      	mov	r4, r2
 800bc4e:	f7ff ffdb 	bl	800bc08 <__mcmp>
 800bc52:	1e05      	subs	r5, r0, #0
 800bc54:	d112      	bne.n	800bc7c <__mdiff+0x3c>
 800bc56:	4629      	mov	r1, r5
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f7ff fd13 	bl	800b684 <_Balloc>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	b928      	cbnz	r0, 800bc6e <__mdiff+0x2e>
 800bc62:	f240 2137 	movw	r1, #567	@ 0x237
 800bc66:	4b3e      	ldr	r3, [pc, #248]	@ (800bd60 <__mdiff+0x120>)
 800bc68:	483e      	ldr	r0, [pc, #248]	@ (800bd64 <__mdiff+0x124>)
 800bc6a:	f7fe fa53 	bl	800a114 <__assert_func>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc74:	4610      	mov	r0, r2
 800bc76:	b003      	add	sp, #12
 800bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7c:	bfbc      	itt	lt
 800bc7e:	464b      	movlt	r3, r9
 800bc80:	46a1      	movlt	r9, r4
 800bc82:	4630      	mov	r0, r6
 800bc84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bc88:	bfba      	itte	lt
 800bc8a:	461c      	movlt	r4, r3
 800bc8c:	2501      	movlt	r5, #1
 800bc8e:	2500      	movge	r5, #0
 800bc90:	f7ff fcf8 	bl	800b684 <_Balloc>
 800bc94:	4602      	mov	r2, r0
 800bc96:	b918      	cbnz	r0, 800bca0 <__mdiff+0x60>
 800bc98:	f240 2145 	movw	r1, #581	@ 0x245
 800bc9c:	4b30      	ldr	r3, [pc, #192]	@ (800bd60 <__mdiff+0x120>)
 800bc9e:	e7e3      	b.n	800bc68 <__mdiff+0x28>
 800bca0:	f100 0b14 	add.w	fp, r0, #20
 800bca4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bca8:	f109 0310 	add.w	r3, r9, #16
 800bcac:	60c5      	str	r5, [r0, #12]
 800bcae:	f04f 0c00 	mov.w	ip, #0
 800bcb2:	f109 0514 	add.w	r5, r9, #20
 800bcb6:	46d9      	mov	r9, fp
 800bcb8:	6926      	ldr	r6, [r4, #16]
 800bcba:	f104 0e14 	add.w	lr, r4, #20
 800bcbe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bcc2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bcc6:	9301      	str	r3, [sp, #4]
 800bcc8:	9b01      	ldr	r3, [sp, #4]
 800bcca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bcce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bcd2:	b281      	uxth	r1, r0
 800bcd4:	9301      	str	r3, [sp, #4]
 800bcd6:	fa1f f38a 	uxth.w	r3, sl
 800bcda:	1a5b      	subs	r3, r3, r1
 800bcdc:	0c00      	lsrs	r0, r0, #16
 800bcde:	4463      	add	r3, ip
 800bce0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bce4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bcee:	4576      	cmp	r6, lr
 800bcf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bcf4:	f849 3b04 	str.w	r3, [r9], #4
 800bcf8:	d8e6      	bhi.n	800bcc8 <__mdiff+0x88>
 800bcfa:	1b33      	subs	r3, r6, r4
 800bcfc:	3b15      	subs	r3, #21
 800bcfe:	f023 0303 	bic.w	r3, r3, #3
 800bd02:	3415      	adds	r4, #21
 800bd04:	3304      	adds	r3, #4
 800bd06:	42a6      	cmp	r6, r4
 800bd08:	bf38      	it	cc
 800bd0a:	2304      	movcc	r3, #4
 800bd0c:	441d      	add	r5, r3
 800bd0e:	445b      	add	r3, fp
 800bd10:	461e      	mov	r6, r3
 800bd12:	462c      	mov	r4, r5
 800bd14:	4544      	cmp	r4, r8
 800bd16:	d30e      	bcc.n	800bd36 <__mdiff+0xf6>
 800bd18:	f108 0103 	add.w	r1, r8, #3
 800bd1c:	1b49      	subs	r1, r1, r5
 800bd1e:	f021 0103 	bic.w	r1, r1, #3
 800bd22:	3d03      	subs	r5, #3
 800bd24:	45a8      	cmp	r8, r5
 800bd26:	bf38      	it	cc
 800bd28:	2100      	movcc	r1, #0
 800bd2a:	440b      	add	r3, r1
 800bd2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd30:	b199      	cbz	r1, 800bd5a <__mdiff+0x11a>
 800bd32:	6117      	str	r7, [r2, #16]
 800bd34:	e79e      	b.n	800bc74 <__mdiff+0x34>
 800bd36:	46e6      	mov	lr, ip
 800bd38:	f854 1b04 	ldr.w	r1, [r4], #4
 800bd3c:	fa1f fc81 	uxth.w	ip, r1
 800bd40:	44f4      	add	ip, lr
 800bd42:	0c08      	lsrs	r0, r1, #16
 800bd44:	4471      	add	r1, lr
 800bd46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bd4a:	b289      	uxth	r1, r1
 800bd4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd54:	f846 1b04 	str.w	r1, [r6], #4
 800bd58:	e7dc      	b.n	800bd14 <__mdiff+0xd4>
 800bd5a:	3f01      	subs	r7, #1
 800bd5c:	e7e6      	b.n	800bd2c <__mdiff+0xec>
 800bd5e:	bf00      	nop
 800bd60:	0800ccbe 	.word	0x0800ccbe
 800bd64:	0800cd2f 	.word	0x0800cd2f

0800bd68 <__ulp>:
 800bd68:	4b0e      	ldr	r3, [pc, #56]	@ (800bda4 <__ulp+0x3c>)
 800bd6a:	400b      	ands	r3, r1
 800bd6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	dc08      	bgt.n	800bd86 <__ulp+0x1e>
 800bd74:	425b      	negs	r3, r3
 800bd76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bd7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd7e:	da04      	bge.n	800bd8a <__ulp+0x22>
 800bd80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bd84:	4113      	asrs	r3, r2
 800bd86:	2200      	movs	r2, #0
 800bd88:	e008      	b.n	800bd9c <__ulp+0x34>
 800bd8a:	f1a2 0314 	sub.w	r3, r2, #20
 800bd8e:	2b1e      	cmp	r3, #30
 800bd90:	bfd6      	itet	le
 800bd92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bd96:	2201      	movgt	r2, #1
 800bd98:	40da      	lsrle	r2, r3
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4610      	mov	r0, r2
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	7ff00000 	.word	0x7ff00000

0800bda8 <__b2d>:
 800bda8:	6902      	ldr	r2, [r0, #16]
 800bdaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdac:	f100 0614 	add.w	r6, r0, #20
 800bdb0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800bdb4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800bdb8:	4f1e      	ldr	r7, [pc, #120]	@ (800be34 <__b2d+0x8c>)
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f7ff fd54 	bl	800b868 <__hi0bits>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	f1c0 0020 	rsb	r0, r0, #32
 800bdc6:	2b0a      	cmp	r3, #10
 800bdc8:	f1a2 0504 	sub.w	r5, r2, #4
 800bdcc:	6008      	str	r0, [r1, #0]
 800bdce:	dc12      	bgt.n	800bdf6 <__b2d+0x4e>
 800bdd0:	42ae      	cmp	r6, r5
 800bdd2:	bf2c      	ite	cs
 800bdd4:	2200      	movcs	r2, #0
 800bdd6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800bdda:	f1c3 0c0b 	rsb	ip, r3, #11
 800bdde:	3315      	adds	r3, #21
 800bde0:	fa24 fe0c 	lsr.w	lr, r4, ip
 800bde4:	fa04 f303 	lsl.w	r3, r4, r3
 800bde8:	fa22 f20c 	lsr.w	r2, r2, ip
 800bdec:	ea4e 0107 	orr.w	r1, lr, r7
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdf6:	42ae      	cmp	r6, r5
 800bdf8:	bf36      	itet	cc
 800bdfa:	f1a2 0508 	subcc.w	r5, r2, #8
 800bdfe:	2200      	movcs	r2, #0
 800be00:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800be04:	3b0b      	subs	r3, #11
 800be06:	d012      	beq.n	800be2e <__b2d+0x86>
 800be08:	f1c3 0720 	rsb	r7, r3, #32
 800be0c:	fa22 f107 	lsr.w	r1, r2, r7
 800be10:	409c      	lsls	r4, r3
 800be12:	430c      	orrs	r4, r1
 800be14:	42b5      	cmp	r5, r6
 800be16:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800be1a:	bf94      	ite	ls
 800be1c:	2400      	movls	r4, #0
 800be1e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800be22:	409a      	lsls	r2, r3
 800be24:	40fc      	lsrs	r4, r7
 800be26:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800be2a:	4322      	orrs	r2, r4
 800be2c:	e7e1      	b.n	800bdf2 <__b2d+0x4a>
 800be2e:	ea44 0107 	orr.w	r1, r4, r7
 800be32:	e7de      	b.n	800bdf2 <__b2d+0x4a>
 800be34:	3ff00000 	.word	0x3ff00000

0800be38 <__d2b>:
 800be38:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800be3c:	2101      	movs	r1, #1
 800be3e:	4690      	mov	r8, r2
 800be40:	4699      	mov	r9, r3
 800be42:	9e08      	ldr	r6, [sp, #32]
 800be44:	f7ff fc1e 	bl	800b684 <_Balloc>
 800be48:	4604      	mov	r4, r0
 800be4a:	b930      	cbnz	r0, 800be5a <__d2b+0x22>
 800be4c:	4602      	mov	r2, r0
 800be4e:	f240 310f 	movw	r1, #783	@ 0x30f
 800be52:	4b23      	ldr	r3, [pc, #140]	@ (800bee0 <__d2b+0xa8>)
 800be54:	4823      	ldr	r0, [pc, #140]	@ (800bee4 <__d2b+0xac>)
 800be56:	f7fe f95d 	bl	800a114 <__assert_func>
 800be5a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be62:	b10d      	cbz	r5, 800be68 <__d2b+0x30>
 800be64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be68:	9301      	str	r3, [sp, #4]
 800be6a:	f1b8 0300 	subs.w	r3, r8, #0
 800be6e:	d024      	beq.n	800beba <__d2b+0x82>
 800be70:	4668      	mov	r0, sp
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	f7ff fd17 	bl	800b8a6 <__lo0bits>
 800be78:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be7c:	b1d8      	cbz	r0, 800beb6 <__d2b+0x7e>
 800be7e:	f1c0 0320 	rsb	r3, r0, #32
 800be82:	fa02 f303 	lsl.w	r3, r2, r3
 800be86:	430b      	orrs	r3, r1
 800be88:	40c2      	lsrs	r2, r0
 800be8a:	6163      	str	r3, [r4, #20]
 800be8c:	9201      	str	r2, [sp, #4]
 800be8e:	9b01      	ldr	r3, [sp, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	bf0c      	ite	eq
 800be94:	2201      	moveq	r2, #1
 800be96:	2202      	movne	r2, #2
 800be98:	61a3      	str	r3, [r4, #24]
 800be9a:	6122      	str	r2, [r4, #16]
 800be9c:	b1ad      	cbz	r5, 800beca <__d2b+0x92>
 800be9e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bea2:	4405      	add	r5, r0
 800bea4:	6035      	str	r5, [r6, #0]
 800bea6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800beaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beac:	6018      	str	r0, [r3, #0]
 800beae:	4620      	mov	r0, r4
 800beb0:	b002      	add	sp, #8
 800beb2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800beb6:	6161      	str	r1, [r4, #20]
 800beb8:	e7e9      	b.n	800be8e <__d2b+0x56>
 800beba:	a801      	add	r0, sp, #4
 800bebc:	f7ff fcf3 	bl	800b8a6 <__lo0bits>
 800bec0:	9b01      	ldr	r3, [sp, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	6163      	str	r3, [r4, #20]
 800bec6:	3020      	adds	r0, #32
 800bec8:	e7e7      	b.n	800be9a <__d2b+0x62>
 800beca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bece:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bed2:	6030      	str	r0, [r6, #0]
 800bed4:	6918      	ldr	r0, [r3, #16]
 800bed6:	f7ff fcc7 	bl	800b868 <__hi0bits>
 800beda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bede:	e7e4      	b.n	800beaa <__d2b+0x72>
 800bee0:	0800ccbe 	.word	0x0800ccbe
 800bee4:	0800cd2f 	.word	0x0800cd2f

0800bee8 <__ratio>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	b085      	sub	sp, #20
 800beee:	e9cd 1000 	strd	r1, r0, [sp]
 800bef2:	a902      	add	r1, sp, #8
 800bef4:	f7ff ff58 	bl	800bda8 <__b2d>
 800bef8:	468b      	mov	fp, r1
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	9800      	ldr	r0, [sp, #0]
 800bf00:	a903      	add	r1, sp, #12
 800bf02:	f7ff ff51 	bl	800bda8 <__b2d>
 800bf06:	460d      	mov	r5, r1
 800bf08:	9b01      	ldr	r3, [sp, #4]
 800bf0a:	4689      	mov	r9, r1
 800bf0c:	6919      	ldr	r1, [r3, #16]
 800bf0e:	9b00      	ldr	r3, [sp, #0]
 800bf10:	4604      	mov	r4, r0
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	4630      	mov	r0, r6
 800bf16:	1ac9      	subs	r1, r1, r3
 800bf18:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bf1c:	1a9b      	subs	r3, r3, r2
 800bf1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	bfcd      	iteet	gt
 800bf26:	463a      	movgt	r2, r7
 800bf28:	462a      	movle	r2, r5
 800bf2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf2e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bf32:	bfd8      	it	le
 800bf34:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bf38:	464b      	mov	r3, r9
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	4659      	mov	r1, fp
 800bf3e:	f7f4 fc0d 	bl	800075c <__aeabi_ddiv>
 800bf42:	b005      	add	sp, #20
 800bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf48 <__copybits>:
 800bf48:	3901      	subs	r1, #1
 800bf4a:	b570      	push	{r4, r5, r6, lr}
 800bf4c:	1149      	asrs	r1, r1, #5
 800bf4e:	6914      	ldr	r4, [r2, #16]
 800bf50:	3101      	adds	r1, #1
 800bf52:	f102 0314 	add.w	r3, r2, #20
 800bf56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf5e:	1f05      	subs	r5, r0, #4
 800bf60:	42a3      	cmp	r3, r4
 800bf62:	d30c      	bcc.n	800bf7e <__copybits+0x36>
 800bf64:	1aa3      	subs	r3, r4, r2
 800bf66:	3b11      	subs	r3, #17
 800bf68:	f023 0303 	bic.w	r3, r3, #3
 800bf6c:	3211      	adds	r2, #17
 800bf6e:	42a2      	cmp	r2, r4
 800bf70:	bf88      	it	hi
 800bf72:	2300      	movhi	r3, #0
 800bf74:	4418      	add	r0, r3
 800bf76:	2300      	movs	r3, #0
 800bf78:	4288      	cmp	r0, r1
 800bf7a:	d305      	bcc.n	800bf88 <__copybits+0x40>
 800bf7c:	bd70      	pop	{r4, r5, r6, pc}
 800bf7e:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf82:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf86:	e7eb      	b.n	800bf60 <__copybits+0x18>
 800bf88:	f840 3b04 	str.w	r3, [r0], #4
 800bf8c:	e7f4      	b.n	800bf78 <__copybits+0x30>

0800bf8e <__any_on>:
 800bf8e:	f100 0214 	add.w	r2, r0, #20
 800bf92:	6900      	ldr	r0, [r0, #16]
 800bf94:	114b      	asrs	r3, r1, #5
 800bf96:	4298      	cmp	r0, r3
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	db11      	blt.n	800bfc0 <__any_on+0x32>
 800bf9c:	dd0a      	ble.n	800bfb4 <__any_on+0x26>
 800bf9e:	f011 011f 	ands.w	r1, r1, #31
 800bfa2:	d007      	beq.n	800bfb4 <__any_on+0x26>
 800bfa4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfa8:	fa24 f001 	lsr.w	r0, r4, r1
 800bfac:	fa00 f101 	lsl.w	r1, r0, r1
 800bfb0:	428c      	cmp	r4, r1
 800bfb2:	d10b      	bne.n	800bfcc <__any_on+0x3e>
 800bfb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d803      	bhi.n	800bfc4 <__any_on+0x36>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	bd10      	pop	{r4, pc}
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	e7f7      	b.n	800bfb4 <__any_on+0x26>
 800bfc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfc8:	2900      	cmp	r1, #0
 800bfca:	d0f5      	beq.n	800bfb8 <__any_on+0x2a>
 800bfcc:	2001      	movs	r0, #1
 800bfce:	e7f6      	b.n	800bfbe <__any_on+0x30>

0800bfd0 <__ascii_wctomb>:
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	4608      	mov	r0, r1
 800bfd4:	b141      	cbz	r1, 800bfe8 <__ascii_wctomb+0x18>
 800bfd6:	2aff      	cmp	r2, #255	@ 0xff
 800bfd8:	d904      	bls.n	800bfe4 <__ascii_wctomb+0x14>
 800bfda:	228a      	movs	r2, #138	@ 0x8a
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	4770      	bx	lr
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	700a      	strb	r2, [r1, #0]
 800bfe8:	4770      	bx	lr

0800bfea <__ssputs_r>:
 800bfea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfee:	461f      	mov	r7, r3
 800bff0:	688e      	ldr	r6, [r1, #8]
 800bff2:	4682      	mov	sl, r0
 800bff4:	42be      	cmp	r6, r7
 800bff6:	460c      	mov	r4, r1
 800bff8:	4690      	mov	r8, r2
 800bffa:	680b      	ldr	r3, [r1, #0]
 800bffc:	d82d      	bhi.n	800c05a <__ssputs_r+0x70>
 800bffe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c002:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c006:	d026      	beq.n	800c056 <__ssputs_r+0x6c>
 800c008:	6965      	ldr	r5, [r4, #20]
 800c00a:	6909      	ldr	r1, [r1, #16]
 800c00c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c010:	eba3 0901 	sub.w	r9, r3, r1
 800c014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c018:	1c7b      	adds	r3, r7, #1
 800c01a:	444b      	add	r3, r9
 800c01c:	106d      	asrs	r5, r5, #1
 800c01e:	429d      	cmp	r5, r3
 800c020:	bf38      	it	cc
 800c022:	461d      	movcc	r5, r3
 800c024:	0553      	lsls	r3, r2, #21
 800c026:	d527      	bpl.n	800c078 <__ssputs_r+0x8e>
 800c028:	4629      	mov	r1, r5
 800c02a:	f7ff fa8d 	bl	800b548 <_malloc_r>
 800c02e:	4606      	mov	r6, r0
 800c030:	b360      	cbz	r0, 800c08c <__ssputs_r+0xa2>
 800c032:	464a      	mov	r2, r9
 800c034:	6921      	ldr	r1, [r4, #16]
 800c036:	f7fe f858 	bl	800a0ea <memcpy>
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c044:	81a3      	strh	r3, [r4, #12]
 800c046:	6126      	str	r6, [r4, #16]
 800c048:	444e      	add	r6, r9
 800c04a:	6026      	str	r6, [r4, #0]
 800c04c:	463e      	mov	r6, r7
 800c04e:	6165      	str	r5, [r4, #20]
 800c050:	eba5 0509 	sub.w	r5, r5, r9
 800c054:	60a5      	str	r5, [r4, #8]
 800c056:	42be      	cmp	r6, r7
 800c058:	d900      	bls.n	800c05c <__ssputs_r+0x72>
 800c05a:	463e      	mov	r6, r7
 800c05c:	4632      	mov	r2, r6
 800c05e:	4641      	mov	r1, r8
 800c060:	6820      	ldr	r0, [r4, #0]
 800c062:	f000 f9d3 	bl	800c40c <memmove>
 800c066:	2000      	movs	r0, #0
 800c068:	68a3      	ldr	r3, [r4, #8]
 800c06a:	1b9b      	subs	r3, r3, r6
 800c06c:	60a3      	str	r3, [r4, #8]
 800c06e:	6823      	ldr	r3, [r4, #0]
 800c070:	4433      	add	r3, r6
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c078:	462a      	mov	r2, r5
 800c07a:	f000 fa0c 	bl	800c496 <_realloc_r>
 800c07e:	4606      	mov	r6, r0
 800c080:	2800      	cmp	r0, #0
 800c082:	d1e0      	bne.n	800c046 <__ssputs_r+0x5c>
 800c084:	4650      	mov	r0, sl
 800c086:	6921      	ldr	r1, [r4, #16]
 800c088:	f7fe feb2 	bl	800adf0 <_free_r>
 800c08c:	230c      	movs	r3, #12
 800c08e:	f8ca 3000 	str.w	r3, [sl]
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	f04f 30ff 	mov.w	r0, #4294967295
 800c098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	e7e9      	b.n	800c074 <__ssputs_r+0x8a>

0800c0a0 <_svfiprintf_r>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	4698      	mov	r8, r3
 800c0a6:	898b      	ldrh	r3, [r1, #12]
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	061b      	lsls	r3, r3, #24
 800c0ac:	460d      	mov	r5, r1
 800c0ae:	4614      	mov	r4, r2
 800c0b0:	b09d      	sub	sp, #116	@ 0x74
 800c0b2:	d510      	bpl.n	800c0d6 <_svfiprintf_r+0x36>
 800c0b4:	690b      	ldr	r3, [r1, #16]
 800c0b6:	b973      	cbnz	r3, 800c0d6 <_svfiprintf_r+0x36>
 800c0b8:	2140      	movs	r1, #64	@ 0x40
 800c0ba:	f7ff fa45 	bl	800b548 <_malloc_r>
 800c0be:	6028      	str	r0, [r5, #0]
 800c0c0:	6128      	str	r0, [r5, #16]
 800c0c2:	b930      	cbnz	r0, 800c0d2 <_svfiprintf_r+0x32>
 800c0c4:	230c      	movs	r3, #12
 800c0c6:	603b      	str	r3, [r7, #0]
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0cc:	b01d      	add	sp, #116	@ 0x74
 800c0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d2:	2340      	movs	r3, #64	@ 0x40
 800c0d4:	616b      	str	r3, [r5, #20]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0da:	2320      	movs	r3, #32
 800c0dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c0e0:	2330      	movs	r3, #48	@ 0x30
 800c0e2:	f04f 0901 	mov.w	r9, #1
 800c0e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c284 <_svfiprintf_r+0x1e4>
 800c0ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0f2:	4623      	mov	r3, r4
 800c0f4:	469a      	mov	sl, r3
 800c0f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0fa:	b10a      	cbz	r2, 800c100 <_svfiprintf_r+0x60>
 800c0fc:	2a25      	cmp	r2, #37	@ 0x25
 800c0fe:	d1f9      	bne.n	800c0f4 <_svfiprintf_r+0x54>
 800c100:	ebba 0b04 	subs.w	fp, sl, r4
 800c104:	d00b      	beq.n	800c11e <_svfiprintf_r+0x7e>
 800c106:	465b      	mov	r3, fp
 800c108:	4622      	mov	r2, r4
 800c10a:	4629      	mov	r1, r5
 800c10c:	4638      	mov	r0, r7
 800c10e:	f7ff ff6c 	bl	800bfea <__ssputs_r>
 800c112:	3001      	adds	r0, #1
 800c114:	f000 80a7 	beq.w	800c266 <_svfiprintf_r+0x1c6>
 800c118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c11a:	445a      	add	r2, fp
 800c11c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c11e:	f89a 3000 	ldrb.w	r3, [sl]
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 809f 	beq.w	800c266 <_svfiprintf_r+0x1c6>
 800c128:	2300      	movs	r3, #0
 800c12a:	f04f 32ff 	mov.w	r2, #4294967295
 800c12e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c132:	f10a 0a01 	add.w	sl, sl, #1
 800c136:	9304      	str	r3, [sp, #16]
 800c138:	9307      	str	r3, [sp, #28]
 800c13a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c13e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c140:	4654      	mov	r4, sl
 800c142:	2205      	movs	r2, #5
 800c144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c148:	484e      	ldr	r0, [pc, #312]	@ (800c284 <_svfiprintf_r+0x1e4>)
 800c14a:	f7fd ffc0 	bl	800a0ce <memchr>
 800c14e:	9a04      	ldr	r2, [sp, #16]
 800c150:	b9d8      	cbnz	r0, 800c18a <_svfiprintf_r+0xea>
 800c152:	06d0      	lsls	r0, r2, #27
 800c154:	bf44      	itt	mi
 800c156:	2320      	movmi	r3, #32
 800c158:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c15c:	0711      	lsls	r1, r2, #28
 800c15e:	bf44      	itt	mi
 800c160:	232b      	movmi	r3, #43	@ 0x2b
 800c162:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c166:	f89a 3000 	ldrb.w	r3, [sl]
 800c16a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c16c:	d015      	beq.n	800c19a <_svfiprintf_r+0xfa>
 800c16e:	4654      	mov	r4, sl
 800c170:	2000      	movs	r0, #0
 800c172:	f04f 0c0a 	mov.w	ip, #10
 800c176:	9a07      	ldr	r2, [sp, #28]
 800c178:	4621      	mov	r1, r4
 800c17a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c17e:	3b30      	subs	r3, #48	@ 0x30
 800c180:	2b09      	cmp	r3, #9
 800c182:	d94b      	bls.n	800c21c <_svfiprintf_r+0x17c>
 800c184:	b1b0      	cbz	r0, 800c1b4 <_svfiprintf_r+0x114>
 800c186:	9207      	str	r2, [sp, #28]
 800c188:	e014      	b.n	800c1b4 <_svfiprintf_r+0x114>
 800c18a:	eba0 0308 	sub.w	r3, r0, r8
 800c18e:	fa09 f303 	lsl.w	r3, r9, r3
 800c192:	4313      	orrs	r3, r2
 800c194:	46a2      	mov	sl, r4
 800c196:	9304      	str	r3, [sp, #16]
 800c198:	e7d2      	b.n	800c140 <_svfiprintf_r+0xa0>
 800c19a:	9b03      	ldr	r3, [sp, #12]
 800c19c:	1d19      	adds	r1, r3, #4
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	9103      	str	r1, [sp, #12]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	bfbb      	ittet	lt
 800c1a6:	425b      	neglt	r3, r3
 800c1a8:	f042 0202 	orrlt.w	r2, r2, #2
 800c1ac:	9307      	strge	r3, [sp, #28]
 800c1ae:	9307      	strlt	r3, [sp, #28]
 800c1b0:	bfb8      	it	lt
 800c1b2:	9204      	strlt	r2, [sp, #16]
 800c1b4:	7823      	ldrb	r3, [r4, #0]
 800c1b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1b8:	d10a      	bne.n	800c1d0 <_svfiprintf_r+0x130>
 800c1ba:	7863      	ldrb	r3, [r4, #1]
 800c1bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1be:	d132      	bne.n	800c226 <_svfiprintf_r+0x186>
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	3402      	adds	r4, #2
 800c1c4:	1d1a      	adds	r2, r3, #4
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	9203      	str	r2, [sp, #12]
 800c1ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1ce:	9305      	str	r3, [sp, #20]
 800c1d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c288 <_svfiprintf_r+0x1e8>
 800c1d4:	2203      	movs	r2, #3
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	7821      	ldrb	r1, [r4, #0]
 800c1da:	f7fd ff78 	bl	800a0ce <memchr>
 800c1de:	b138      	cbz	r0, 800c1f0 <_svfiprintf_r+0x150>
 800c1e0:	2240      	movs	r2, #64	@ 0x40
 800c1e2:	9b04      	ldr	r3, [sp, #16]
 800c1e4:	eba0 000a 	sub.w	r0, r0, sl
 800c1e8:	4082      	lsls	r2, r0
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	3401      	adds	r4, #1
 800c1ee:	9304      	str	r3, [sp, #16]
 800c1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f4:	2206      	movs	r2, #6
 800c1f6:	4825      	ldr	r0, [pc, #148]	@ (800c28c <_svfiprintf_r+0x1ec>)
 800c1f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1fc:	f7fd ff67 	bl	800a0ce <memchr>
 800c200:	2800      	cmp	r0, #0
 800c202:	d036      	beq.n	800c272 <_svfiprintf_r+0x1d2>
 800c204:	4b22      	ldr	r3, [pc, #136]	@ (800c290 <_svfiprintf_r+0x1f0>)
 800c206:	bb1b      	cbnz	r3, 800c250 <_svfiprintf_r+0x1b0>
 800c208:	9b03      	ldr	r3, [sp, #12]
 800c20a:	3307      	adds	r3, #7
 800c20c:	f023 0307 	bic.w	r3, r3, #7
 800c210:	3308      	adds	r3, #8
 800c212:	9303      	str	r3, [sp, #12]
 800c214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c216:	4433      	add	r3, r6
 800c218:	9309      	str	r3, [sp, #36]	@ 0x24
 800c21a:	e76a      	b.n	800c0f2 <_svfiprintf_r+0x52>
 800c21c:	460c      	mov	r4, r1
 800c21e:	2001      	movs	r0, #1
 800c220:	fb0c 3202 	mla	r2, ip, r2, r3
 800c224:	e7a8      	b.n	800c178 <_svfiprintf_r+0xd8>
 800c226:	2300      	movs	r3, #0
 800c228:	f04f 0c0a 	mov.w	ip, #10
 800c22c:	4619      	mov	r1, r3
 800c22e:	3401      	adds	r4, #1
 800c230:	9305      	str	r3, [sp, #20]
 800c232:	4620      	mov	r0, r4
 800c234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c238:	3a30      	subs	r2, #48	@ 0x30
 800c23a:	2a09      	cmp	r2, #9
 800c23c:	d903      	bls.n	800c246 <_svfiprintf_r+0x1a6>
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d0c6      	beq.n	800c1d0 <_svfiprintf_r+0x130>
 800c242:	9105      	str	r1, [sp, #20]
 800c244:	e7c4      	b.n	800c1d0 <_svfiprintf_r+0x130>
 800c246:	4604      	mov	r4, r0
 800c248:	2301      	movs	r3, #1
 800c24a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c24e:	e7f0      	b.n	800c232 <_svfiprintf_r+0x192>
 800c250:	ab03      	add	r3, sp, #12
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	462a      	mov	r2, r5
 800c256:	4638      	mov	r0, r7
 800c258:	4b0e      	ldr	r3, [pc, #56]	@ (800c294 <_svfiprintf_r+0x1f4>)
 800c25a:	a904      	add	r1, sp, #16
 800c25c:	f7fd f92a 	bl	80094b4 <_printf_float>
 800c260:	1c42      	adds	r2, r0, #1
 800c262:	4606      	mov	r6, r0
 800c264:	d1d6      	bne.n	800c214 <_svfiprintf_r+0x174>
 800c266:	89ab      	ldrh	r3, [r5, #12]
 800c268:	065b      	lsls	r3, r3, #25
 800c26a:	f53f af2d 	bmi.w	800c0c8 <_svfiprintf_r+0x28>
 800c26e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c270:	e72c      	b.n	800c0cc <_svfiprintf_r+0x2c>
 800c272:	ab03      	add	r3, sp, #12
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	462a      	mov	r2, r5
 800c278:	4638      	mov	r0, r7
 800c27a:	4b06      	ldr	r3, [pc, #24]	@ (800c294 <_svfiprintf_r+0x1f4>)
 800c27c:	a904      	add	r1, sp, #16
 800c27e:	f7fd fbb7 	bl	80099f0 <_printf_i>
 800c282:	e7ed      	b.n	800c260 <_svfiprintf_r+0x1c0>
 800c284:	0800cf89 	.word	0x0800cf89
 800c288:	0800cf8f 	.word	0x0800cf8f
 800c28c:	0800cf93 	.word	0x0800cf93
 800c290:	080094b5 	.word	0x080094b5
 800c294:	0800bfeb 	.word	0x0800bfeb

0800c298 <__sflush_r>:
 800c298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	0716      	lsls	r6, r2, #28
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	d454      	bmi.n	800c350 <__sflush_r+0xb8>
 800c2a6:	684b      	ldr	r3, [r1, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dc02      	bgt.n	800c2b2 <__sflush_r+0x1a>
 800c2ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	dd48      	ble.n	800c344 <__sflush_r+0xac>
 800c2b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2b4:	2e00      	cmp	r6, #0
 800c2b6:	d045      	beq.n	800c344 <__sflush_r+0xac>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c2be:	682f      	ldr	r7, [r5, #0]
 800c2c0:	6a21      	ldr	r1, [r4, #32]
 800c2c2:	602b      	str	r3, [r5, #0]
 800c2c4:	d030      	beq.n	800c328 <__sflush_r+0x90>
 800c2c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	0759      	lsls	r1, r3, #29
 800c2cc:	d505      	bpl.n	800c2da <__sflush_r+0x42>
 800c2ce:	6863      	ldr	r3, [r4, #4]
 800c2d0:	1ad2      	subs	r2, r2, r3
 800c2d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c2d4:	b10b      	cbz	r3, 800c2da <__sflush_r+0x42>
 800c2d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c2d8:	1ad2      	subs	r2, r2, r3
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4628      	mov	r0, r5
 800c2de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2e0:	6a21      	ldr	r1, [r4, #32]
 800c2e2:	47b0      	blx	r6
 800c2e4:	1c43      	adds	r3, r0, #1
 800c2e6:	89a3      	ldrh	r3, [r4, #12]
 800c2e8:	d106      	bne.n	800c2f8 <__sflush_r+0x60>
 800c2ea:	6829      	ldr	r1, [r5, #0]
 800c2ec:	291d      	cmp	r1, #29
 800c2ee:	d82b      	bhi.n	800c348 <__sflush_r+0xb0>
 800c2f0:	4a28      	ldr	r2, [pc, #160]	@ (800c394 <__sflush_r+0xfc>)
 800c2f2:	410a      	asrs	r2, r1
 800c2f4:	07d6      	lsls	r6, r2, #31
 800c2f6:	d427      	bmi.n	800c348 <__sflush_r+0xb0>
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	6062      	str	r2, [r4, #4]
 800c2fc:	6922      	ldr	r2, [r4, #16]
 800c2fe:	04d9      	lsls	r1, r3, #19
 800c300:	6022      	str	r2, [r4, #0]
 800c302:	d504      	bpl.n	800c30e <__sflush_r+0x76>
 800c304:	1c42      	adds	r2, r0, #1
 800c306:	d101      	bne.n	800c30c <__sflush_r+0x74>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b903      	cbnz	r3, 800c30e <__sflush_r+0x76>
 800c30c:	6560      	str	r0, [r4, #84]	@ 0x54
 800c30e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c310:	602f      	str	r7, [r5, #0]
 800c312:	b1b9      	cbz	r1, 800c344 <__sflush_r+0xac>
 800c314:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c318:	4299      	cmp	r1, r3
 800c31a:	d002      	beq.n	800c322 <__sflush_r+0x8a>
 800c31c:	4628      	mov	r0, r5
 800c31e:	f7fe fd67 	bl	800adf0 <_free_r>
 800c322:	2300      	movs	r3, #0
 800c324:	6363      	str	r3, [r4, #52]	@ 0x34
 800c326:	e00d      	b.n	800c344 <__sflush_r+0xac>
 800c328:	2301      	movs	r3, #1
 800c32a:	4628      	mov	r0, r5
 800c32c:	47b0      	blx	r6
 800c32e:	4602      	mov	r2, r0
 800c330:	1c50      	adds	r0, r2, #1
 800c332:	d1c9      	bne.n	800c2c8 <__sflush_r+0x30>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d0c6      	beq.n	800c2c8 <__sflush_r+0x30>
 800c33a:	2b1d      	cmp	r3, #29
 800c33c:	d001      	beq.n	800c342 <__sflush_r+0xaa>
 800c33e:	2b16      	cmp	r3, #22
 800c340:	d11d      	bne.n	800c37e <__sflush_r+0xe6>
 800c342:	602f      	str	r7, [r5, #0]
 800c344:	2000      	movs	r0, #0
 800c346:	e021      	b.n	800c38c <__sflush_r+0xf4>
 800c348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c34c:	b21b      	sxth	r3, r3
 800c34e:	e01a      	b.n	800c386 <__sflush_r+0xee>
 800c350:	690f      	ldr	r7, [r1, #16]
 800c352:	2f00      	cmp	r7, #0
 800c354:	d0f6      	beq.n	800c344 <__sflush_r+0xac>
 800c356:	0793      	lsls	r3, r2, #30
 800c358:	bf18      	it	ne
 800c35a:	2300      	movne	r3, #0
 800c35c:	680e      	ldr	r6, [r1, #0]
 800c35e:	bf08      	it	eq
 800c360:	694b      	ldreq	r3, [r1, #20]
 800c362:	1bf6      	subs	r6, r6, r7
 800c364:	600f      	str	r7, [r1, #0]
 800c366:	608b      	str	r3, [r1, #8]
 800c368:	2e00      	cmp	r6, #0
 800c36a:	ddeb      	ble.n	800c344 <__sflush_r+0xac>
 800c36c:	4633      	mov	r3, r6
 800c36e:	463a      	mov	r2, r7
 800c370:	4628      	mov	r0, r5
 800c372:	6a21      	ldr	r1, [r4, #32]
 800c374:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c378:	47e0      	blx	ip
 800c37a:	2800      	cmp	r0, #0
 800c37c:	dc07      	bgt.n	800c38e <__sflush_r+0xf6>
 800c37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c386:	f04f 30ff 	mov.w	r0, #4294967295
 800c38a:	81a3      	strh	r3, [r4, #12]
 800c38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c38e:	4407      	add	r7, r0
 800c390:	1a36      	subs	r6, r6, r0
 800c392:	e7e9      	b.n	800c368 <__sflush_r+0xd0>
 800c394:	dfbffffe 	.word	0xdfbffffe

0800c398 <_fflush_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	690b      	ldr	r3, [r1, #16]
 800c39c:	4605      	mov	r5, r0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	b913      	cbnz	r3, 800c3a8 <_fflush_r+0x10>
 800c3a2:	2500      	movs	r5, #0
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	bd38      	pop	{r3, r4, r5, pc}
 800c3a8:	b118      	cbz	r0, 800c3b2 <_fflush_r+0x1a>
 800c3aa:	6a03      	ldr	r3, [r0, #32]
 800c3ac:	b90b      	cbnz	r3, 800c3b2 <_fflush_r+0x1a>
 800c3ae:	f7fd fccb 	bl	8009d48 <__sinit>
 800c3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0f3      	beq.n	800c3a2 <_fflush_r+0xa>
 800c3ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c3bc:	07d0      	lsls	r0, r2, #31
 800c3be:	d404      	bmi.n	800c3ca <_fflush_r+0x32>
 800c3c0:	0599      	lsls	r1, r3, #22
 800c3c2:	d402      	bmi.n	800c3ca <_fflush_r+0x32>
 800c3c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3c6:	f7fd fe80 	bl	800a0ca <__retarget_lock_acquire_recursive>
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	f7ff ff63 	bl	800c298 <__sflush_r>
 800c3d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	07da      	lsls	r2, r3, #31
 800c3d8:	d4e4      	bmi.n	800c3a4 <_fflush_r+0xc>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	059b      	lsls	r3, r3, #22
 800c3de:	d4e1      	bmi.n	800c3a4 <_fflush_r+0xc>
 800c3e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3e2:	f7fd fe73 	bl	800a0cc <__retarget_lock_release_recursive>
 800c3e6:	e7dd      	b.n	800c3a4 <_fflush_r+0xc>

0800c3e8 <fiprintf>:
 800c3e8:	b40e      	push	{r1, r2, r3}
 800c3ea:	b503      	push	{r0, r1, lr}
 800c3ec:	4601      	mov	r1, r0
 800c3ee:	ab03      	add	r3, sp, #12
 800c3f0:	4805      	ldr	r0, [pc, #20]	@ (800c408 <fiprintf+0x20>)
 800c3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f6:	6800      	ldr	r0, [r0, #0]
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	f000 f8a1 	bl	800c540 <_vfiprintf_r>
 800c3fe:	b002      	add	sp, #8
 800c400:	f85d eb04 	ldr.w	lr, [sp], #4
 800c404:	b003      	add	sp, #12
 800c406:	4770      	bx	lr
 800c408:	200002f8 	.word	0x200002f8

0800c40c <memmove>:
 800c40c:	4288      	cmp	r0, r1
 800c40e:	b510      	push	{r4, lr}
 800c410:	eb01 0402 	add.w	r4, r1, r2
 800c414:	d902      	bls.n	800c41c <memmove+0x10>
 800c416:	4284      	cmp	r4, r0
 800c418:	4623      	mov	r3, r4
 800c41a:	d807      	bhi.n	800c42c <memmove+0x20>
 800c41c:	1e43      	subs	r3, r0, #1
 800c41e:	42a1      	cmp	r1, r4
 800c420:	d008      	beq.n	800c434 <memmove+0x28>
 800c422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c42a:	e7f8      	b.n	800c41e <memmove+0x12>
 800c42c:	4601      	mov	r1, r0
 800c42e:	4402      	add	r2, r0
 800c430:	428a      	cmp	r2, r1
 800c432:	d100      	bne.n	800c436 <memmove+0x2a>
 800c434:	bd10      	pop	{r4, pc}
 800c436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c43e:	e7f7      	b.n	800c430 <memmove+0x24>

0800c440 <_sbrk_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	2300      	movs	r3, #0
 800c444:	4d05      	ldr	r5, [pc, #20]	@ (800c45c <_sbrk_r+0x1c>)
 800c446:	4604      	mov	r4, r0
 800c448:	4608      	mov	r0, r1
 800c44a:	602b      	str	r3, [r5, #0]
 800c44c:	f7f6 fd44 	bl	8002ed8 <_sbrk>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_sbrk_r+0x1a>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b103      	cbz	r3, 800c45a <_sbrk_r+0x1a>
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	20000f64 	.word	0x20000f64

0800c460 <abort>:
 800c460:	2006      	movs	r0, #6
 800c462:	b508      	push	{r3, lr}
 800c464:	f000 fa40 	bl	800c8e8 <raise>
 800c468:	2001      	movs	r0, #1
 800c46a:	f7f6 fcc0 	bl	8002dee <_exit>

0800c46e <_calloc_r>:
 800c46e:	b570      	push	{r4, r5, r6, lr}
 800c470:	fba1 5402 	umull	r5, r4, r1, r2
 800c474:	b93c      	cbnz	r4, 800c486 <_calloc_r+0x18>
 800c476:	4629      	mov	r1, r5
 800c478:	f7ff f866 	bl	800b548 <_malloc_r>
 800c47c:	4606      	mov	r6, r0
 800c47e:	b928      	cbnz	r0, 800c48c <_calloc_r+0x1e>
 800c480:	2600      	movs	r6, #0
 800c482:	4630      	mov	r0, r6
 800c484:	bd70      	pop	{r4, r5, r6, pc}
 800c486:	220c      	movs	r2, #12
 800c488:	6002      	str	r2, [r0, #0]
 800c48a:	e7f9      	b.n	800c480 <_calloc_r+0x12>
 800c48c:	462a      	mov	r2, r5
 800c48e:	4621      	mov	r1, r4
 800c490:	f7fd fd07 	bl	8009ea2 <memset>
 800c494:	e7f5      	b.n	800c482 <_calloc_r+0x14>

0800c496 <_realloc_r>:
 800c496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c49a:	4680      	mov	r8, r0
 800c49c:	4615      	mov	r5, r2
 800c49e:	460c      	mov	r4, r1
 800c4a0:	b921      	cbnz	r1, 800c4ac <_realloc_r+0x16>
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a8:	f7ff b84e 	b.w	800b548 <_malloc_r>
 800c4ac:	b92a      	cbnz	r2, 800c4ba <_realloc_r+0x24>
 800c4ae:	f7fe fc9f 	bl	800adf0 <_free_r>
 800c4b2:	2400      	movs	r4, #0
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ba:	f000 fa31 	bl	800c920 <_malloc_usable_size_r>
 800c4be:	4285      	cmp	r5, r0
 800c4c0:	4606      	mov	r6, r0
 800c4c2:	d802      	bhi.n	800c4ca <_realloc_r+0x34>
 800c4c4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c4c8:	d8f4      	bhi.n	800c4b4 <_realloc_r+0x1e>
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	f7ff f83b 	bl	800b548 <_malloc_r>
 800c4d2:	4607      	mov	r7, r0
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d0ec      	beq.n	800c4b2 <_realloc_r+0x1c>
 800c4d8:	42b5      	cmp	r5, r6
 800c4da:	462a      	mov	r2, r5
 800c4dc:	4621      	mov	r1, r4
 800c4de:	bf28      	it	cs
 800c4e0:	4632      	movcs	r2, r6
 800c4e2:	f7fd fe02 	bl	800a0ea <memcpy>
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	f7fe fc81 	bl	800adf0 <_free_r>
 800c4ee:	463c      	mov	r4, r7
 800c4f0:	e7e0      	b.n	800c4b4 <_realloc_r+0x1e>

0800c4f2 <__sfputc_r>:
 800c4f2:	6893      	ldr	r3, [r2, #8]
 800c4f4:	b410      	push	{r4}
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	6093      	str	r3, [r2, #8]
 800c4fc:	da07      	bge.n	800c50e <__sfputc_r+0x1c>
 800c4fe:	6994      	ldr	r4, [r2, #24]
 800c500:	42a3      	cmp	r3, r4
 800c502:	db01      	blt.n	800c508 <__sfputc_r+0x16>
 800c504:	290a      	cmp	r1, #10
 800c506:	d102      	bne.n	800c50e <__sfputc_r+0x1c>
 800c508:	bc10      	pop	{r4}
 800c50a:	f000 b931 	b.w	800c770 <__swbuf_r>
 800c50e:	6813      	ldr	r3, [r2, #0]
 800c510:	1c58      	adds	r0, r3, #1
 800c512:	6010      	str	r0, [r2, #0]
 800c514:	7019      	strb	r1, [r3, #0]
 800c516:	4608      	mov	r0, r1
 800c518:	bc10      	pop	{r4}
 800c51a:	4770      	bx	lr

0800c51c <__sfputs_r>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	4606      	mov	r6, r0
 800c520:	460f      	mov	r7, r1
 800c522:	4614      	mov	r4, r2
 800c524:	18d5      	adds	r5, r2, r3
 800c526:	42ac      	cmp	r4, r5
 800c528:	d101      	bne.n	800c52e <__sfputs_r+0x12>
 800c52a:	2000      	movs	r0, #0
 800c52c:	e007      	b.n	800c53e <__sfputs_r+0x22>
 800c52e:	463a      	mov	r2, r7
 800c530:	4630      	mov	r0, r6
 800c532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c536:	f7ff ffdc 	bl	800c4f2 <__sfputc_r>
 800c53a:	1c43      	adds	r3, r0, #1
 800c53c:	d1f3      	bne.n	800c526 <__sfputs_r+0xa>
 800c53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c540 <_vfiprintf_r>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	460d      	mov	r5, r1
 800c546:	4614      	mov	r4, r2
 800c548:	4698      	mov	r8, r3
 800c54a:	4606      	mov	r6, r0
 800c54c:	b09d      	sub	sp, #116	@ 0x74
 800c54e:	b118      	cbz	r0, 800c558 <_vfiprintf_r+0x18>
 800c550:	6a03      	ldr	r3, [r0, #32]
 800c552:	b90b      	cbnz	r3, 800c558 <_vfiprintf_r+0x18>
 800c554:	f7fd fbf8 	bl	8009d48 <__sinit>
 800c558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c55a:	07d9      	lsls	r1, r3, #31
 800c55c:	d405      	bmi.n	800c56a <_vfiprintf_r+0x2a>
 800c55e:	89ab      	ldrh	r3, [r5, #12]
 800c560:	059a      	lsls	r2, r3, #22
 800c562:	d402      	bmi.n	800c56a <_vfiprintf_r+0x2a>
 800c564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c566:	f7fd fdb0 	bl	800a0ca <__retarget_lock_acquire_recursive>
 800c56a:	89ab      	ldrh	r3, [r5, #12]
 800c56c:	071b      	lsls	r3, r3, #28
 800c56e:	d501      	bpl.n	800c574 <_vfiprintf_r+0x34>
 800c570:	692b      	ldr	r3, [r5, #16]
 800c572:	b99b      	cbnz	r3, 800c59c <_vfiprintf_r+0x5c>
 800c574:	4629      	mov	r1, r5
 800c576:	4630      	mov	r0, r6
 800c578:	f000 f938 	bl	800c7ec <__swsetup_r>
 800c57c:	b170      	cbz	r0, 800c59c <_vfiprintf_r+0x5c>
 800c57e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c580:	07dc      	lsls	r4, r3, #31
 800c582:	d504      	bpl.n	800c58e <_vfiprintf_r+0x4e>
 800c584:	f04f 30ff 	mov.w	r0, #4294967295
 800c588:	b01d      	add	sp, #116	@ 0x74
 800c58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58e:	89ab      	ldrh	r3, [r5, #12]
 800c590:	0598      	lsls	r0, r3, #22
 800c592:	d4f7      	bmi.n	800c584 <_vfiprintf_r+0x44>
 800c594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c596:	f7fd fd99 	bl	800a0cc <__retarget_lock_release_recursive>
 800c59a:	e7f3      	b.n	800c584 <_vfiprintf_r+0x44>
 800c59c:	2300      	movs	r3, #0
 800c59e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5a0:	2320      	movs	r3, #32
 800c5a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5a6:	2330      	movs	r3, #48	@ 0x30
 800c5a8:	f04f 0901 	mov.w	r9, #1
 800c5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c75c <_vfiprintf_r+0x21c>
 800c5b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5b8:	4623      	mov	r3, r4
 800c5ba:	469a      	mov	sl, r3
 800c5bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5c0:	b10a      	cbz	r2, 800c5c6 <_vfiprintf_r+0x86>
 800c5c2:	2a25      	cmp	r2, #37	@ 0x25
 800c5c4:	d1f9      	bne.n	800c5ba <_vfiprintf_r+0x7a>
 800c5c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c5ca:	d00b      	beq.n	800c5e4 <_vfiprintf_r+0xa4>
 800c5cc:	465b      	mov	r3, fp
 800c5ce:	4622      	mov	r2, r4
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7ff ffa2 	bl	800c51c <__sfputs_r>
 800c5d8:	3001      	adds	r0, #1
 800c5da:	f000 80a7 	beq.w	800c72c <_vfiprintf_r+0x1ec>
 800c5de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5e0:	445a      	add	r2, fp
 800c5e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f000 809f 	beq.w	800c72c <_vfiprintf_r+0x1ec>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5f8:	f10a 0a01 	add.w	sl, sl, #1
 800c5fc:	9304      	str	r3, [sp, #16]
 800c5fe:	9307      	str	r3, [sp, #28]
 800c600:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c604:	931a      	str	r3, [sp, #104]	@ 0x68
 800c606:	4654      	mov	r4, sl
 800c608:	2205      	movs	r2, #5
 800c60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c60e:	4853      	ldr	r0, [pc, #332]	@ (800c75c <_vfiprintf_r+0x21c>)
 800c610:	f7fd fd5d 	bl	800a0ce <memchr>
 800c614:	9a04      	ldr	r2, [sp, #16]
 800c616:	b9d8      	cbnz	r0, 800c650 <_vfiprintf_r+0x110>
 800c618:	06d1      	lsls	r1, r2, #27
 800c61a:	bf44      	itt	mi
 800c61c:	2320      	movmi	r3, #32
 800c61e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c622:	0713      	lsls	r3, r2, #28
 800c624:	bf44      	itt	mi
 800c626:	232b      	movmi	r3, #43	@ 0x2b
 800c628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c62c:	f89a 3000 	ldrb.w	r3, [sl]
 800c630:	2b2a      	cmp	r3, #42	@ 0x2a
 800c632:	d015      	beq.n	800c660 <_vfiprintf_r+0x120>
 800c634:	4654      	mov	r4, sl
 800c636:	2000      	movs	r0, #0
 800c638:	f04f 0c0a 	mov.w	ip, #10
 800c63c:	9a07      	ldr	r2, [sp, #28]
 800c63e:	4621      	mov	r1, r4
 800c640:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c644:	3b30      	subs	r3, #48	@ 0x30
 800c646:	2b09      	cmp	r3, #9
 800c648:	d94b      	bls.n	800c6e2 <_vfiprintf_r+0x1a2>
 800c64a:	b1b0      	cbz	r0, 800c67a <_vfiprintf_r+0x13a>
 800c64c:	9207      	str	r2, [sp, #28]
 800c64e:	e014      	b.n	800c67a <_vfiprintf_r+0x13a>
 800c650:	eba0 0308 	sub.w	r3, r0, r8
 800c654:	fa09 f303 	lsl.w	r3, r9, r3
 800c658:	4313      	orrs	r3, r2
 800c65a:	46a2      	mov	sl, r4
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	e7d2      	b.n	800c606 <_vfiprintf_r+0xc6>
 800c660:	9b03      	ldr	r3, [sp, #12]
 800c662:	1d19      	adds	r1, r3, #4
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	9103      	str	r1, [sp, #12]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	bfbb      	ittet	lt
 800c66c:	425b      	neglt	r3, r3
 800c66e:	f042 0202 	orrlt.w	r2, r2, #2
 800c672:	9307      	strge	r3, [sp, #28]
 800c674:	9307      	strlt	r3, [sp, #28]
 800c676:	bfb8      	it	lt
 800c678:	9204      	strlt	r2, [sp, #16]
 800c67a:	7823      	ldrb	r3, [r4, #0]
 800c67c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c67e:	d10a      	bne.n	800c696 <_vfiprintf_r+0x156>
 800c680:	7863      	ldrb	r3, [r4, #1]
 800c682:	2b2a      	cmp	r3, #42	@ 0x2a
 800c684:	d132      	bne.n	800c6ec <_vfiprintf_r+0x1ac>
 800c686:	9b03      	ldr	r3, [sp, #12]
 800c688:	3402      	adds	r4, #2
 800c68a:	1d1a      	adds	r2, r3, #4
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	9203      	str	r2, [sp, #12]
 800c690:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c694:	9305      	str	r3, [sp, #20]
 800c696:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c760 <_vfiprintf_r+0x220>
 800c69a:	2203      	movs	r2, #3
 800c69c:	4650      	mov	r0, sl
 800c69e:	7821      	ldrb	r1, [r4, #0]
 800c6a0:	f7fd fd15 	bl	800a0ce <memchr>
 800c6a4:	b138      	cbz	r0, 800c6b6 <_vfiprintf_r+0x176>
 800c6a6:	2240      	movs	r2, #64	@ 0x40
 800c6a8:	9b04      	ldr	r3, [sp, #16]
 800c6aa:	eba0 000a 	sub.w	r0, r0, sl
 800c6ae:	4082      	lsls	r2, r0
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	3401      	adds	r4, #1
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ba:	2206      	movs	r2, #6
 800c6bc:	4829      	ldr	r0, [pc, #164]	@ (800c764 <_vfiprintf_r+0x224>)
 800c6be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6c2:	f7fd fd04 	bl	800a0ce <memchr>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d03f      	beq.n	800c74a <_vfiprintf_r+0x20a>
 800c6ca:	4b27      	ldr	r3, [pc, #156]	@ (800c768 <_vfiprintf_r+0x228>)
 800c6cc:	bb1b      	cbnz	r3, 800c716 <_vfiprintf_r+0x1d6>
 800c6ce:	9b03      	ldr	r3, [sp, #12]
 800c6d0:	3307      	adds	r3, #7
 800c6d2:	f023 0307 	bic.w	r3, r3, #7
 800c6d6:	3308      	adds	r3, #8
 800c6d8:	9303      	str	r3, [sp, #12]
 800c6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6dc:	443b      	add	r3, r7
 800c6de:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6e0:	e76a      	b.n	800c5b8 <_vfiprintf_r+0x78>
 800c6e2:	460c      	mov	r4, r1
 800c6e4:	2001      	movs	r0, #1
 800c6e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ea:	e7a8      	b.n	800c63e <_vfiprintf_r+0xfe>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f04f 0c0a 	mov.w	ip, #10
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	3401      	adds	r4, #1
 800c6f6:	9305      	str	r3, [sp, #20]
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6fe:	3a30      	subs	r2, #48	@ 0x30
 800c700:	2a09      	cmp	r2, #9
 800c702:	d903      	bls.n	800c70c <_vfiprintf_r+0x1cc>
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0c6      	beq.n	800c696 <_vfiprintf_r+0x156>
 800c708:	9105      	str	r1, [sp, #20]
 800c70a:	e7c4      	b.n	800c696 <_vfiprintf_r+0x156>
 800c70c:	4604      	mov	r4, r0
 800c70e:	2301      	movs	r3, #1
 800c710:	fb0c 2101 	mla	r1, ip, r1, r2
 800c714:	e7f0      	b.n	800c6f8 <_vfiprintf_r+0x1b8>
 800c716:	ab03      	add	r3, sp, #12
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	462a      	mov	r2, r5
 800c71c:	4630      	mov	r0, r6
 800c71e:	4b13      	ldr	r3, [pc, #76]	@ (800c76c <_vfiprintf_r+0x22c>)
 800c720:	a904      	add	r1, sp, #16
 800c722:	f7fc fec7 	bl	80094b4 <_printf_float>
 800c726:	4607      	mov	r7, r0
 800c728:	1c78      	adds	r0, r7, #1
 800c72a:	d1d6      	bne.n	800c6da <_vfiprintf_r+0x19a>
 800c72c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c72e:	07d9      	lsls	r1, r3, #31
 800c730:	d405      	bmi.n	800c73e <_vfiprintf_r+0x1fe>
 800c732:	89ab      	ldrh	r3, [r5, #12]
 800c734:	059a      	lsls	r2, r3, #22
 800c736:	d402      	bmi.n	800c73e <_vfiprintf_r+0x1fe>
 800c738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c73a:	f7fd fcc7 	bl	800a0cc <__retarget_lock_release_recursive>
 800c73e:	89ab      	ldrh	r3, [r5, #12]
 800c740:	065b      	lsls	r3, r3, #25
 800c742:	f53f af1f 	bmi.w	800c584 <_vfiprintf_r+0x44>
 800c746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c748:	e71e      	b.n	800c588 <_vfiprintf_r+0x48>
 800c74a:	ab03      	add	r3, sp, #12
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	462a      	mov	r2, r5
 800c750:	4630      	mov	r0, r6
 800c752:	4b06      	ldr	r3, [pc, #24]	@ (800c76c <_vfiprintf_r+0x22c>)
 800c754:	a904      	add	r1, sp, #16
 800c756:	f7fd f94b 	bl	80099f0 <_printf_i>
 800c75a:	e7e4      	b.n	800c726 <_vfiprintf_r+0x1e6>
 800c75c:	0800cf89 	.word	0x0800cf89
 800c760:	0800cf8f 	.word	0x0800cf8f
 800c764:	0800cf93 	.word	0x0800cf93
 800c768:	080094b5 	.word	0x080094b5
 800c76c:	0800c51d 	.word	0x0800c51d

0800c770 <__swbuf_r>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	460e      	mov	r6, r1
 800c774:	4614      	mov	r4, r2
 800c776:	4605      	mov	r5, r0
 800c778:	b118      	cbz	r0, 800c782 <__swbuf_r+0x12>
 800c77a:	6a03      	ldr	r3, [r0, #32]
 800c77c:	b90b      	cbnz	r3, 800c782 <__swbuf_r+0x12>
 800c77e:	f7fd fae3 	bl	8009d48 <__sinit>
 800c782:	69a3      	ldr	r3, [r4, #24]
 800c784:	60a3      	str	r3, [r4, #8]
 800c786:	89a3      	ldrh	r3, [r4, #12]
 800c788:	071a      	lsls	r2, r3, #28
 800c78a:	d501      	bpl.n	800c790 <__swbuf_r+0x20>
 800c78c:	6923      	ldr	r3, [r4, #16]
 800c78e:	b943      	cbnz	r3, 800c7a2 <__swbuf_r+0x32>
 800c790:	4621      	mov	r1, r4
 800c792:	4628      	mov	r0, r5
 800c794:	f000 f82a 	bl	800c7ec <__swsetup_r>
 800c798:	b118      	cbz	r0, 800c7a2 <__swbuf_r+0x32>
 800c79a:	f04f 37ff 	mov.w	r7, #4294967295
 800c79e:	4638      	mov	r0, r7
 800c7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	6922      	ldr	r2, [r4, #16]
 800c7a6:	b2f6      	uxtb	r6, r6
 800c7a8:	1a98      	subs	r0, r3, r2
 800c7aa:	6963      	ldr	r3, [r4, #20]
 800c7ac:	4637      	mov	r7, r6
 800c7ae:	4283      	cmp	r3, r0
 800c7b0:	dc05      	bgt.n	800c7be <__swbuf_r+0x4e>
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	f7ff fdef 	bl	800c398 <_fflush_r>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d1ed      	bne.n	800c79a <__swbuf_r+0x2a>
 800c7be:	68a3      	ldr	r3, [r4, #8]
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	60a3      	str	r3, [r4, #8]
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	1c5a      	adds	r2, r3, #1
 800c7c8:	6022      	str	r2, [r4, #0]
 800c7ca:	701e      	strb	r6, [r3, #0]
 800c7cc:	6962      	ldr	r2, [r4, #20]
 800c7ce:	1c43      	adds	r3, r0, #1
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d004      	beq.n	800c7de <__swbuf_r+0x6e>
 800c7d4:	89a3      	ldrh	r3, [r4, #12]
 800c7d6:	07db      	lsls	r3, r3, #31
 800c7d8:	d5e1      	bpl.n	800c79e <__swbuf_r+0x2e>
 800c7da:	2e0a      	cmp	r6, #10
 800c7dc:	d1df      	bne.n	800c79e <__swbuf_r+0x2e>
 800c7de:	4621      	mov	r1, r4
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	f7ff fdd9 	bl	800c398 <_fflush_r>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0d9      	beq.n	800c79e <__swbuf_r+0x2e>
 800c7ea:	e7d6      	b.n	800c79a <__swbuf_r+0x2a>

0800c7ec <__swsetup_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4b29      	ldr	r3, [pc, #164]	@ (800c894 <__swsetup_r+0xa8>)
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	6818      	ldr	r0, [r3, #0]
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	b118      	cbz	r0, 800c800 <__swsetup_r+0x14>
 800c7f8:	6a03      	ldr	r3, [r0, #32]
 800c7fa:	b90b      	cbnz	r3, 800c800 <__swsetup_r+0x14>
 800c7fc:	f7fd faa4 	bl	8009d48 <__sinit>
 800c800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c804:	0719      	lsls	r1, r3, #28
 800c806:	d422      	bmi.n	800c84e <__swsetup_r+0x62>
 800c808:	06da      	lsls	r2, r3, #27
 800c80a:	d407      	bmi.n	800c81c <__swsetup_r+0x30>
 800c80c:	2209      	movs	r2, #9
 800c80e:	602a      	str	r2, [r5, #0]
 800c810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c814:	f04f 30ff 	mov.w	r0, #4294967295
 800c818:	81a3      	strh	r3, [r4, #12]
 800c81a:	e033      	b.n	800c884 <__swsetup_r+0x98>
 800c81c:	0758      	lsls	r0, r3, #29
 800c81e:	d512      	bpl.n	800c846 <__swsetup_r+0x5a>
 800c820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c822:	b141      	cbz	r1, 800c836 <__swsetup_r+0x4a>
 800c824:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c828:	4299      	cmp	r1, r3
 800c82a:	d002      	beq.n	800c832 <__swsetup_r+0x46>
 800c82c:	4628      	mov	r0, r5
 800c82e:	f7fe fadf 	bl	800adf0 <_free_r>
 800c832:	2300      	movs	r3, #0
 800c834:	6363      	str	r3, [r4, #52]	@ 0x34
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c83c:	81a3      	strh	r3, [r4, #12]
 800c83e:	2300      	movs	r3, #0
 800c840:	6063      	str	r3, [r4, #4]
 800c842:	6923      	ldr	r3, [r4, #16]
 800c844:	6023      	str	r3, [r4, #0]
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	f043 0308 	orr.w	r3, r3, #8
 800c84c:	81a3      	strh	r3, [r4, #12]
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	b94b      	cbnz	r3, 800c866 <__swsetup_r+0x7a>
 800c852:	89a3      	ldrh	r3, [r4, #12]
 800c854:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c85c:	d003      	beq.n	800c866 <__swsetup_r+0x7a>
 800c85e:	4621      	mov	r1, r4
 800c860:	4628      	mov	r0, r5
 800c862:	f000 f88a 	bl	800c97a <__smakebuf_r>
 800c866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c86a:	f013 0201 	ands.w	r2, r3, #1
 800c86e:	d00a      	beq.n	800c886 <__swsetup_r+0x9a>
 800c870:	2200      	movs	r2, #0
 800c872:	60a2      	str	r2, [r4, #8]
 800c874:	6962      	ldr	r2, [r4, #20]
 800c876:	4252      	negs	r2, r2
 800c878:	61a2      	str	r2, [r4, #24]
 800c87a:	6922      	ldr	r2, [r4, #16]
 800c87c:	b942      	cbnz	r2, 800c890 <__swsetup_r+0xa4>
 800c87e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c882:	d1c5      	bne.n	800c810 <__swsetup_r+0x24>
 800c884:	bd38      	pop	{r3, r4, r5, pc}
 800c886:	0799      	lsls	r1, r3, #30
 800c888:	bf58      	it	pl
 800c88a:	6962      	ldrpl	r2, [r4, #20]
 800c88c:	60a2      	str	r2, [r4, #8]
 800c88e:	e7f4      	b.n	800c87a <__swsetup_r+0x8e>
 800c890:	2000      	movs	r0, #0
 800c892:	e7f7      	b.n	800c884 <__swsetup_r+0x98>
 800c894:	200002f8 	.word	0x200002f8

0800c898 <_raise_r>:
 800c898:	291f      	cmp	r1, #31
 800c89a:	b538      	push	{r3, r4, r5, lr}
 800c89c:	4605      	mov	r5, r0
 800c89e:	460c      	mov	r4, r1
 800c8a0:	d904      	bls.n	800c8ac <_raise_r+0x14>
 800c8a2:	2316      	movs	r3, #22
 800c8a4:	6003      	str	r3, [r0, #0]
 800c8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c8ae:	b112      	cbz	r2, 800c8b6 <_raise_r+0x1e>
 800c8b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8b4:	b94b      	cbnz	r3, 800c8ca <_raise_r+0x32>
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f000 f830 	bl	800c91c <_getpid_r>
 800c8bc:	4622      	mov	r2, r4
 800c8be:	4601      	mov	r1, r0
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8c6:	f000 b817 	b.w	800c8f8 <_kill_r>
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d00a      	beq.n	800c8e4 <_raise_r+0x4c>
 800c8ce:	1c59      	adds	r1, r3, #1
 800c8d0:	d103      	bne.n	800c8da <_raise_r+0x42>
 800c8d2:	2316      	movs	r3, #22
 800c8d4:	6003      	str	r3, [r0, #0]
 800c8d6:	2001      	movs	r0, #1
 800c8d8:	e7e7      	b.n	800c8aa <_raise_r+0x12>
 800c8da:	2100      	movs	r1, #0
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c8e2:	4798      	blx	r3
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	e7e0      	b.n	800c8aa <_raise_r+0x12>

0800c8e8 <raise>:
 800c8e8:	4b02      	ldr	r3, [pc, #8]	@ (800c8f4 <raise+0xc>)
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	6818      	ldr	r0, [r3, #0]
 800c8ee:	f7ff bfd3 	b.w	800c898 <_raise_r>
 800c8f2:	bf00      	nop
 800c8f4:	200002f8 	.word	0x200002f8

0800c8f8 <_kill_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	4d06      	ldr	r5, [pc, #24]	@ (800c918 <_kill_r+0x20>)
 800c8fe:	4604      	mov	r4, r0
 800c900:	4608      	mov	r0, r1
 800c902:	4611      	mov	r1, r2
 800c904:	602b      	str	r3, [r5, #0]
 800c906:	f7f6 fa62 	bl	8002dce <_kill>
 800c90a:	1c43      	adds	r3, r0, #1
 800c90c:	d102      	bne.n	800c914 <_kill_r+0x1c>
 800c90e:	682b      	ldr	r3, [r5, #0]
 800c910:	b103      	cbz	r3, 800c914 <_kill_r+0x1c>
 800c912:	6023      	str	r3, [r4, #0]
 800c914:	bd38      	pop	{r3, r4, r5, pc}
 800c916:	bf00      	nop
 800c918:	20000f64 	.word	0x20000f64

0800c91c <_getpid_r>:
 800c91c:	f7f6 ba50 	b.w	8002dc0 <_getpid>

0800c920 <_malloc_usable_size_r>:
 800c920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c924:	1f18      	subs	r0, r3, #4
 800c926:	2b00      	cmp	r3, #0
 800c928:	bfbc      	itt	lt
 800c92a:	580b      	ldrlt	r3, [r1, r0]
 800c92c:	18c0      	addlt	r0, r0, r3
 800c92e:	4770      	bx	lr

0800c930 <__swhatbuf_r>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	460c      	mov	r4, r1
 800c934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c938:	4615      	mov	r5, r2
 800c93a:	2900      	cmp	r1, #0
 800c93c:	461e      	mov	r6, r3
 800c93e:	b096      	sub	sp, #88	@ 0x58
 800c940:	da0c      	bge.n	800c95c <__swhatbuf_r+0x2c>
 800c942:	89a3      	ldrh	r3, [r4, #12]
 800c944:	2100      	movs	r1, #0
 800c946:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c94a:	bf14      	ite	ne
 800c94c:	2340      	movne	r3, #64	@ 0x40
 800c94e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c952:	2000      	movs	r0, #0
 800c954:	6031      	str	r1, [r6, #0]
 800c956:	602b      	str	r3, [r5, #0]
 800c958:	b016      	add	sp, #88	@ 0x58
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	466a      	mov	r2, sp
 800c95e:	f000 f849 	bl	800c9f4 <_fstat_r>
 800c962:	2800      	cmp	r0, #0
 800c964:	dbed      	blt.n	800c942 <__swhatbuf_r+0x12>
 800c966:	9901      	ldr	r1, [sp, #4]
 800c968:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c96c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c970:	4259      	negs	r1, r3
 800c972:	4159      	adcs	r1, r3
 800c974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c978:	e7eb      	b.n	800c952 <__swhatbuf_r+0x22>

0800c97a <__smakebuf_r>:
 800c97a:	898b      	ldrh	r3, [r1, #12]
 800c97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c97e:	079d      	lsls	r5, r3, #30
 800c980:	4606      	mov	r6, r0
 800c982:	460c      	mov	r4, r1
 800c984:	d507      	bpl.n	800c996 <__smakebuf_r+0x1c>
 800c986:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	6123      	str	r3, [r4, #16]
 800c98e:	2301      	movs	r3, #1
 800c990:	6163      	str	r3, [r4, #20]
 800c992:	b003      	add	sp, #12
 800c994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c996:	466a      	mov	r2, sp
 800c998:	ab01      	add	r3, sp, #4
 800c99a:	f7ff ffc9 	bl	800c930 <__swhatbuf_r>
 800c99e:	9f00      	ldr	r7, [sp, #0]
 800c9a0:	4605      	mov	r5, r0
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7fe fdcf 	bl	800b548 <_malloc_r>
 800c9aa:	b948      	cbnz	r0, 800c9c0 <__smakebuf_r+0x46>
 800c9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b0:	059a      	lsls	r2, r3, #22
 800c9b2:	d4ee      	bmi.n	800c992 <__smakebuf_r+0x18>
 800c9b4:	f023 0303 	bic.w	r3, r3, #3
 800c9b8:	f043 0302 	orr.w	r3, r3, #2
 800c9bc:	81a3      	strh	r3, [r4, #12]
 800c9be:	e7e2      	b.n	800c986 <__smakebuf_r+0xc>
 800c9c0:	89a3      	ldrh	r3, [r4, #12]
 800c9c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ca:	81a3      	strh	r3, [r4, #12]
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	6020      	str	r0, [r4, #0]
 800c9d0:	b15b      	cbz	r3, 800c9ea <__smakebuf_r+0x70>
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9d8:	f000 f81e 	bl	800ca18 <_isatty_r>
 800c9dc:	b128      	cbz	r0, 800c9ea <__smakebuf_r+0x70>
 800c9de:	89a3      	ldrh	r3, [r4, #12]
 800c9e0:	f023 0303 	bic.w	r3, r3, #3
 800c9e4:	f043 0301 	orr.w	r3, r3, #1
 800c9e8:	81a3      	strh	r3, [r4, #12]
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	431d      	orrs	r5, r3
 800c9ee:	81a5      	strh	r5, [r4, #12]
 800c9f0:	e7cf      	b.n	800c992 <__smakebuf_r+0x18>
	...

0800c9f4 <_fstat_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	4d06      	ldr	r5, [pc, #24]	@ (800ca14 <_fstat_r+0x20>)
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	4611      	mov	r1, r2
 800ca00:	602b      	str	r3, [r5, #0]
 800ca02:	f7f6 fa43 	bl	8002e8c <_fstat>
 800ca06:	1c43      	adds	r3, r0, #1
 800ca08:	d102      	bne.n	800ca10 <_fstat_r+0x1c>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	b103      	cbz	r3, 800ca10 <_fstat_r+0x1c>
 800ca0e:	6023      	str	r3, [r4, #0]
 800ca10:	bd38      	pop	{r3, r4, r5, pc}
 800ca12:	bf00      	nop
 800ca14:	20000f64 	.word	0x20000f64

0800ca18 <_isatty_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	4d05      	ldr	r5, [pc, #20]	@ (800ca34 <_isatty_r+0x1c>)
 800ca1e:	4604      	mov	r4, r0
 800ca20:	4608      	mov	r0, r1
 800ca22:	602b      	str	r3, [r5, #0]
 800ca24:	f7f6 fa41 	bl	8002eaa <_isatty>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_isatty_r+0x1a>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_isatty_r+0x1a>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	20000f64 	.word	0x20000f64

0800ca38 <_init>:
 800ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3a:	bf00      	nop
 800ca3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca3e:	bc08      	pop	{r3}
 800ca40:	469e      	mov	lr, r3
 800ca42:	4770      	bx	lr

0800ca44 <_fini>:
 800ca44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca46:	bf00      	nop
 800ca48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca4a:	bc08      	pop	{r3}
 800ca4c:	469e      	mov	lr, r3
 800ca4e:	4770      	bx	lr
